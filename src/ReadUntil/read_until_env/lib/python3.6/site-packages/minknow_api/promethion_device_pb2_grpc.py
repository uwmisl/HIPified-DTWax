# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import promethion_device_pb2 as minknow__api_dot_promethion__device__pb2


class PromethionDeviceServiceStub(object):
    """Interface to control PromethION devices.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.change_device_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/change_device_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsResponse.FromString,
                )
        self.get_device_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/get_device_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.GetDeviceSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.GetDeviceSettingsResponse.FromString,
                )
        self.change_pixel_block_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/change_pixel_block_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsResponse.FromString,
                )
        self.get_pixel_block_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/get_pixel_block_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsResponse.FromString,
                )
        self.change_pixel_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/change_pixel_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.ChangePixelSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.ChangePixelSettingsResponse.FromString,
                )
        self.get_pixel_settings = channel.unary_unary(
                '/minknow_api.promethion_device.PromethionDeviceService/get_pixel_settings',
                request_serializer=minknow__api_dot_promethion__device__pb2.GetPixelSettingsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.GetPixelSettingsResponse.FromString,
                )
        self.stream_temperature = channel.unary_stream(
                '/minknow_api.promethion_device.PromethionDeviceService/stream_temperature',
                request_serializer=minknow__api_dot_promethion__device__pb2.StreamTemperatureRequest.SerializeToString,
                response_deserializer=minknow__api_dot_promethion__device__pb2.GetTemperatureResponse.FromString,
                )


class PromethionDeviceServiceServicer(object):
    """Interface to control PromethION devices.
    """

    def change_device_settings(self, request, context):
        """Change the settings which apply to the whole device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_device_settings(self, request, context):
        """Get the current settings which apply to the whole device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_pixel_block_settings(self, request, context):
        """Change the settings which apply specific pixel blocks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_pixel_block_settings(self, request, context):
        """Get the settings which apply to specific pixel blocks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_pixel_settings(self, request, context):
        """Change the settings which apply to the referenced pixels.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_pixel_settings(self, request, context):
        """Get the pixel settings for the requested pixel's
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_temperature(self, request, context):
        """Stream the current temperature of the device

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PromethionDeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'change_device_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.change_device_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsResponse.SerializeToString,
            ),
            'get_device_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.get_device_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.GetDeviceSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.GetDeviceSettingsResponse.SerializeToString,
            ),
            'change_pixel_block_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.change_pixel_block_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsResponse.SerializeToString,
            ),
            'get_pixel_block_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.get_pixel_block_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsResponse.SerializeToString,
            ),
            'change_pixel_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.change_pixel_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.ChangePixelSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.ChangePixelSettingsResponse.SerializeToString,
            ),
            'get_pixel_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.get_pixel_settings,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.GetPixelSettingsRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.GetPixelSettingsResponse.SerializeToString,
            ),
            'stream_temperature': grpc.unary_stream_rpc_method_handler(
                    servicer.stream_temperature,
                    request_deserializer=minknow__api_dot_promethion__device__pb2.StreamTemperatureRequest.FromString,
                    response_serializer=minknow__api_dot_promethion__device__pb2.GetTemperatureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.promethion_device.PromethionDeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PromethionDeviceService(object):
    """Interface to control PromethION devices.
    """

    @staticmethod
    def change_device_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/change_device_settings',
            minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.ChangeDeviceSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_device_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/get_device_settings',
            minknow__api_dot_promethion__device__pb2.GetDeviceSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.GetDeviceSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_pixel_block_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/change_pixel_block_settings',
            minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.ChangePixelBlockSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_pixel_block_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/get_pixel_block_settings',
            minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.GetPixelBlockSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_pixel_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/change_pixel_settings',
            minknow__api_dot_promethion__device__pb2.ChangePixelSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.ChangePixelSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_pixel_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.promethion_device.PromethionDeviceService/get_pixel_settings',
            minknow__api_dot_promethion__device__pb2.GetPixelSettingsRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.GetPixelSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream_temperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.promethion_device.PromethionDeviceService/stream_temperature',
            minknow__api_dot_promethion__device__pb2.StreamTemperatureRequest.SerializeToString,
            minknow__api_dot_promethion__device__pb2.GetTemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
