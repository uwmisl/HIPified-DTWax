# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: minknow_api/statistics.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from minknow_api import acquisition_pb2 as minknow__api_dot_acquisition__pb2
from minknow_api import rpc_options_pb2 as minknow__api_dot_rpc__options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1cminknow_api/statistics.proto\x12\x16minknow_api.statistics\x1a\x1dminknow_api/acquisition.proto\x1a\x1dminknow_api/rpc_options.proto\"9\n\rDataSelection\x12\r\n\x05start\x18\x01 \x01(\x03\x12\x0c\n\x04step\x18\x02 \x01(\x04\x12\x0b\n\x03\x65nd\x18\x03 \x01(\x03\"x\n\x15StreamDutyTimeRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12=\n\x0e\x64\x61ta_selection\x18\x02 \x01(\x0b\x32%.minknow_api.statistics.DataSelection\"\x91\x03\n\x16StreamDutyTimeResponse\x12Q\n\rbucket_ranges\x18\x01 \x03(\x0b\x32:.minknow_api.statistics.StreamDutyTimeResponse.BucketRange\x12Y\n\x0e\x63hannel_states\x18\x02 \x03(\x0b\x32\x41.minknow_api.statistics.StreamDutyTimeResponse.ChannelStatesEntry\x1a)\n\x0b\x42ucketRange\x12\r\n\x05start\x18\x01 \x01(\r\x12\x0b\n\x03\x65nd\x18\x02 \x01(\r\x1a\'\n\x10\x43hannelStateData\x12\x13\n\x0bstate_times\x18\x01 \x03(\x04\x1au\n\x12\x43hannelStatesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12N\n\x05value\x18\x02 \x01(\x0b\x32?.minknow_api.statistics.StreamDutyTimeResponse.ChannelStateData:\x02\x38\x01\"X\n\x16ReadLengthHistogramKey\x12>\n\x0fread_end_reason\x18\x01 \x01(\x0e\x32%.minknow_api.statistics.ReadEndReason\"3\n\x18ReadLengthHistogramSplit\x12\x17\n\x0fread_end_reason\x18\x01 \x01(\x08\"\xc9\x03\n StreamReadLengthHistogramRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12\x19\n\x11poll_time_seconds\x18\x02 \x01(\r\x12@\n\x10read_length_type\x18\x03 \x01(\x0e\x32&.minknow_api.statistics.ReadLengthType\x12=\n\x0e\x64\x61ta_selection\x18\x04 \x01(\x0b\x32%.minknow_api.statistics.DataSelection\x12\x42\n\x11\x62ucket_value_type\x18\x05 \x01(\x0e\x32\'.minknow_api.statistics.BucketValueType\x12\x1f\n\x17\x64iscard_outlier_percent\x18\x06 \x01(\x02\x12\x41\n\tfiltering\x18\x07 \x03(\x0b\x32..minknow_api.statistics.ReadLengthHistogramKey\x12?\n\x05split\x18\x08 \x01(\x0b\x32\x30.minknow_api.statistics.ReadLengthHistogramSplit\"\xb9\x04\n!StreamReadLengthHistogramResponse\x12@\n\x10read_length_type\x18\x01 \x01(\x0e\x32&.minknow_api.statistics.ReadLengthType\x12\\\n\rbucket_ranges\x18\x02 \x03(\x0b\x32\x45.minknow_api.statistics.StreamReadLengthHistogramResponse.BucketRange\x12\x17\n\x0fsource_data_end\x18\x05 \x01(\x04\x12\x42\n\x11\x62ucket_value_type\x18\x03 \x01(\x0e\x32\'.minknow_api.statistics.BucketValueType\x12i\n\x0ehistogram_data\x18\x04 \x03(\x0b\x32Q.minknow_api.statistics.StreamReadLengthHistogramResponse.ReadLengthHistogramData\x1a)\n\x0b\x42ucketRange\x12\r\n\x05start\x18\x01 \x01(\x04\x12\x0b\n\x03\x65nd\x18\x02 \x01(\x04\x1a\x80\x01\n\x17ReadLengthHistogramData\x12\x41\n\tfiltering\x18\x03 \x03(\x0b\x32..minknow_api.statistics.ReadLengthHistogramKey\x12\x15\n\rbucket_values\x18\x01 \x03(\x04\x12\x0b\n\x03n50\x18\x02 \x01(\x02\"=\n\x19GetReadLengthTypesRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\"]\n\x1aGetReadLengthTypesResponse\x12?\n\x0f\x61vailable_types\x18\x01 \x03(\x0e\x32&.minknow_api.statistics.ReadLengthType\"\x9c\x02\n\x14\x41\x63quisitionOutputKey\x12\x14\n\x0c\x62\x61rcode_name\x18\x01 \x01(\t\x12\x1b\n\x13\x61lignment_reference\x18\x02 \x01(\t\x12!\n\x19\x61lignment_bed_file_region\x18\x03 \x01(\t\x12&\n\x1e\x61lignment_bed_file_region_name\x18\x08 \x01(\t\x12\x17\n\x0flamp_barcode_id\x18\x04 \x01(\t\x12\x16\n\x0elamp_target_id\x18\x05 \x01(\t\x12\x15\n\rbarcode_alias\x18\x06 \x01(\t\x12>\n\x0fread_end_reason\x18\x07 \x01(\x0e\x32%.minknow_api.statistics.ReadEndReason\"\xb8\x01\n\x16\x41\x63quisitionOutputSplit\x12\x14\n\x0c\x62\x61rcode_name\x18\x01 \x01(\x08\x12\x1b\n\x13\x61lignment_reference\x18\x02 \x01(\x08\x12!\n\x19\x61lignment_bed_file_region\x18\x03 \x01(\x08\x12\x17\n\x0flamp_barcode_id\x18\x04 \x01(\x08\x12\x16\n\x0elamp_target_id\x18\x05 \x01(\x08\x12\x17\n\x0fread_end_reason\x18\x06 \x01(\x08\"\x81\x02\n\x1eStreamAcquisitionOutputRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12=\n\x0e\x64\x61ta_selection\x18\x02 \x01(\x0b\x32%.minknow_api.statistics.DataSelection\x12?\n\tfiltering\x18\x03 \x03(\x0b\x32,.minknow_api.statistics.AcquisitionOutputKey\x12=\n\x05split\x18\x04 \x01(\x0b\x32..minknow_api.statistics.AcquisitionOutputSplit\"u\n\x19\x41\x63quisitionOutputSnapshot\x12\x0f\n\x07seconds\x18\x01 \x01(\r\x12G\n\ryield_summary\x18\x02 \x01(\x0b\x32\x30.minknow_api.acquisition.AcquisitionYieldSummary\"\x9c\x02\n\x1fStreamAcquisitionOutputResponse\x12\\\n\tsnapshots\x18\x01 \x03(\x0b\x32I.minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredSnapshots\x1a\x9a\x01\n\x11\x46ilteredSnapshots\x12?\n\tfiltering\x18\x01 \x03(\x0b\x32,.minknow_api.statistics.AcquisitionOutputKey\x12\x44\n\tsnapshots\x18\x02 \x03(\x0b\x32\x31.minknow_api.statistics.AcquisitionOutputSnapshot\"|\n\x19StreamWriterOutputRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12=\n\x0e\x64\x61ta_selection\x18\x02 \x01(\x0b\x32%.minknow_api.statistics.DataSelection\"q\n\x14WriterOutputSnapshot\x12\x0f\n\x07seconds\x18\x01 \x01(\r\x12H\n\rwriter_output\x18\x02 \x01(\x0b\x32\x31.minknow_api.acquisition.AcquisitionWriterSummary\"]\n\x1aStreamWriterOutputResponse\x12?\n\tsnapshots\x18\x01 \x03(\x0b\x32,.minknow_api.statistics.WriterOutputSnapshot\"Q\n-StreamEncounteredAcquisitionOutputKeysRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\"\x7f\n.StreamEncounteredAcquisitionOutputKeysResponse\x12M\n\x17\x61\x63quisition_output_keys\x18\x01 \x03(\x0b\x32,.minknow_api.statistics.AcquisitionOutputKey\"{\n\x18StreamTemperatureRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12=\n\x0e\x64\x61ta_selection\x18\x02 \x01(\x0b\x32%.minknow_api.statistics.DataSelection\"\xe1\x03\n\x11TemperaturePacket\x12M\n\x06minion\x18\x01 \x01(\x0b\x32;.minknow_api.statistics.TemperaturePacket.MinIONTemperatureH\x00\x12U\n\npromethion\x18\x02 \x01(\x0b\x32?.minknow_api.statistics.TemperaturePacket.PromethIONTemperatureH\x00\x12K\n\x12target_temperature\x18\x03 \x01(\x0b\x32/.minknow_api.statistics.TemperaturePacket.Range\x1a)\n\x05Range\x12\x0f\n\x07minimum\x18\x01 \x01(\x02\x12\x0f\n\x07maximum\x18\x02 \x01(\x02\x1aK\n\x11MinIONTemperature\x12\x18\n\x10\x61sic_temperature\x18\x01 \x01(\x01\x12\x1c\n\x14heatsink_temperature\x18\x02 \x01(\x01\x1aR\n\x15PromethIONTemperature\x12\x1c\n\x14\x66lowcell_temperature\x18\x01 \x01(\x01\x12\x1b\n\x13\x63hamber_temperature\x18\x02 \x01(\x01\x42\r\n\x0btemperature\"\\\n\x19StreamTemperatureResponse\x12?\n\x0ctemperatures\x18\x01 \x03(\x0b\x32).minknow_api.statistics.TemperaturePacket\"Z\n\x11\x42iasVoltagePacket\x12\x19\n\x11\x61\x63quisition_index\x18\x01 \x01(\x04\x12\x14\n\x0c\x62ias_voltage\x18\x02 \x01(\x01\x12\x14\n\x0ctime_seconds\x18\x03 \x01(\x04\"=\n\x19StreamBiasVoltagesRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\"^\n\x1aStreamBiasVoltagesResponse\x12@\n\rbias_voltages\x18\x01 \x03(\x0b\x32).minknow_api.statistics.BiasVoltagePacket\"\xee\x01\n\x14StreamBoxplotRequest\x12 \n\x12\x61\x63quisition_run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12K\n\tdata_type\x18\x02 \x01(\x0e\x32\x38.minknow_api.statistics.StreamBoxplotRequest.BoxplotType\x12\x15\n\rdataset_width\x18\x03 \x01(\r\x12\x11\n\tpoll_time\x18\x04 \x01(\r\"=\n\x0b\x42oxplotType\x12\n\n\x06QSCORE\x10\x00\x12\x14\n\x10\x42\x41SES_PER_SECOND\x10\x01\x12\x0c\n\x08\x41\x43\x43URACY\x10\x02\"\x9a\x02\n\x0f\x42oxplotResponse\x12H\n\x08\x64\x61tasets\x18\x01 \x03(\x0b\x32\x36.minknow_api.statistics.BoxplotResponse.BoxplotDataset\x1a\xbc\x01\n\x0e\x42oxplotDataset\x12\x0b\n\x03min\x18\x01 \x01(\x02\x12\x0b\n\x03q25\x18\x02 \x01(\x02\x12\x0b\n\x03q50\x18\x03 \x01(\x02\x12\x0b\n\x03q75\x18\x04 \x01(\x02\x12\x0b\n\x03max\x18\x05 \x01(\x02\x12\r\n\x05\x63ount\x18\x06 \x01(\x04\x12%\n\x1dlower_full_width_half_maximum\x18\x07 \x01(\x02\x12\x0c\n\x04mode\x18\x08 \x01(\x02\x12%\n\x1dupper_full_width_half_maximum\x18\t \x01(\x02*L\n\x0eReadLengthType\x12\x11\n\rMinknowEvents\x10\x00\x12\x12\n\x0e\x45stimatedBases\x10\x01\x12\x13\n\x0f\x42\x61secalledBases\x10\x02*2\n\x0f\x42ucketValueType\x12\x0e\n\nReadCounts\x10\x00\x12\x0f\n\x0bReadLengths\x10\x01*\xa0\x01\n\rReadEndReason\x12\x07\n\x03\x41ll\x10\x00\x12\x0b\n\x07Unknown\x10\x01\x12\x0b\n\x07Partial\x10\x02\x12\r\n\tMuxChange\x10\x03\x12\x14\n\x10UnblockMuxChange\x10\x04\x12\x12\n\x0eSignalPositive\x10\x05\x12\x12\n\x0eSignalNegative\x10\x06\x12\x1f\n\x1b\x44\x61taServiceUnblockMuxChange\x10\x07\x32\x96\n\n\x11StatisticsService\x12x\n\x10stream_duty_time\x12-.minknow_api.statistics.StreamDutyTimeRequest\x1a..minknow_api.statistics.StreamDutyTimeResponse\"\x03\x90\x02\x01\x30\x01\x12\x93\x01\n\x19stream_acquisition_output\x12\x36.minknow_api.statistics.StreamAcquisitionOutputRequest\x1a\x37.minknow_api.statistics.StreamAcquisitionOutputResponse\"\x03\x90\x02\x01\x30\x01\x12\x84\x01\n\x14stream_writer_output\x12\x31.minknow_api.statistics.StreamWriterOutputRequest\x1a\x32.minknow_api.statistics.StreamWriterOutputResponse\"\x03\x90\x02\x01\x30\x01\x12\xc2\x01\n*stream_encountered_acquisition_output_keys\x12\x45.minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysRequest\x1a\x46.minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysResponse\"\x03\x90\x02\x01\x30\x01\x12\x80\x01\n\x12stream_temperature\x12\x30.minknow_api.statistics.StreamTemperatureRequest\x1a\x31.minknow_api.statistics.StreamTemperatureResponse\"\x03\x90\x02\x01\x30\x01\x12\x84\x01\n\x14stream_bias_voltages\x12\x31.minknow_api.statistics.StreamBiasVoltagesRequest\x1a\x32.minknow_api.statistics.StreamBiasVoltagesResponse\"\x03\x90\x02\x01\x30\x01\x12\x9a\x01\n\x1cstream_read_length_histogram\x12\x38.minknow_api.statistics.StreamReadLengthHistogramRequest\x1a\x39.minknow_api.statistics.StreamReadLengthHistogramResponse\"\x03\x90\x02\x01\x30\x01\x12\x83\x01\n\x15get_read_length_types\x12\x31.minknow_api.statistics.GetReadLengthTypesRequest\x1a\x32.minknow_api.statistics.GetReadLengthTypesResponse\"\x03\x90\x02\x01\x12x\n\x18stream_basecall_boxplots\x12,.minknow_api.statistics.StreamBoxplotRequest\x1a\'.minknow_api.statistics.BoxplotResponse\"\x03\x90\x02\x01\x30\x01\x42&\n\x1c\x63om.nanoporetech.minknow_api\xa2\x02\x05MKAPIb\x06proto3')

_READLENGTHTYPE = DESCRIPTOR.enum_types_by_name['ReadLengthType']
ReadLengthType = enum_type_wrapper.EnumTypeWrapper(_READLENGTHTYPE)
_BUCKETVALUETYPE = DESCRIPTOR.enum_types_by_name['BucketValueType']
BucketValueType = enum_type_wrapper.EnumTypeWrapper(_BUCKETVALUETYPE)
_READENDREASON = DESCRIPTOR.enum_types_by_name['ReadEndReason']
ReadEndReason = enum_type_wrapper.EnumTypeWrapper(_READENDREASON)
MinknowEvents = 0
EstimatedBases = 1
BasecalledBases = 2
ReadCounts = 0
ReadLengths = 1
All = 0
Unknown = 1
Partial = 2
MuxChange = 3
UnblockMuxChange = 4
SignalPositive = 5
SignalNegative = 6
DataServiceUnblockMuxChange = 7


_DATASELECTION = DESCRIPTOR.message_types_by_name['DataSelection']
_STREAMDUTYTIMEREQUEST = DESCRIPTOR.message_types_by_name['StreamDutyTimeRequest']
_STREAMDUTYTIMERESPONSE = DESCRIPTOR.message_types_by_name['StreamDutyTimeResponse']
_STREAMDUTYTIMERESPONSE_BUCKETRANGE = _STREAMDUTYTIMERESPONSE.nested_types_by_name['BucketRange']
_STREAMDUTYTIMERESPONSE_CHANNELSTATEDATA = _STREAMDUTYTIMERESPONSE.nested_types_by_name['ChannelStateData']
_STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY = _STREAMDUTYTIMERESPONSE.nested_types_by_name['ChannelStatesEntry']
_READLENGTHHISTOGRAMKEY = DESCRIPTOR.message_types_by_name['ReadLengthHistogramKey']
_READLENGTHHISTOGRAMSPLIT = DESCRIPTOR.message_types_by_name['ReadLengthHistogramSplit']
_STREAMREADLENGTHHISTOGRAMREQUEST = DESCRIPTOR.message_types_by_name['StreamReadLengthHistogramRequest']
_STREAMREADLENGTHHISTOGRAMRESPONSE = DESCRIPTOR.message_types_by_name['StreamReadLengthHistogramResponse']
_STREAMREADLENGTHHISTOGRAMRESPONSE_BUCKETRANGE = _STREAMREADLENGTHHISTOGRAMRESPONSE.nested_types_by_name['BucketRange']
_STREAMREADLENGTHHISTOGRAMRESPONSE_READLENGTHHISTOGRAMDATA = _STREAMREADLENGTHHISTOGRAMRESPONSE.nested_types_by_name['ReadLengthHistogramData']
_GETREADLENGTHTYPESREQUEST = DESCRIPTOR.message_types_by_name['GetReadLengthTypesRequest']
_GETREADLENGTHTYPESRESPONSE = DESCRIPTOR.message_types_by_name['GetReadLengthTypesResponse']
_ACQUISITIONOUTPUTKEY = DESCRIPTOR.message_types_by_name['AcquisitionOutputKey']
_ACQUISITIONOUTPUTSPLIT = DESCRIPTOR.message_types_by_name['AcquisitionOutputSplit']
_STREAMACQUISITIONOUTPUTREQUEST = DESCRIPTOR.message_types_by_name['StreamAcquisitionOutputRequest']
_ACQUISITIONOUTPUTSNAPSHOT = DESCRIPTOR.message_types_by_name['AcquisitionOutputSnapshot']
_STREAMACQUISITIONOUTPUTRESPONSE = DESCRIPTOR.message_types_by_name['StreamAcquisitionOutputResponse']
_STREAMACQUISITIONOUTPUTRESPONSE_FILTEREDSNAPSHOTS = _STREAMACQUISITIONOUTPUTRESPONSE.nested_types_by_name['FilteredSnapshots']
_STREAMWRITEROUTPUTREQUEST = DESCRIPTOR.message_types_by_name['StreamWriterOutputRequest']
_WRITEROUTPUTSNAPSHOT = DESCRIPTOR.message_types_by_name['WriterOutputSnapshot']
_STREAMWRITEROUTPUTRESPONSE = DESCRIPTOR.message_types_by_name['StreamWriterOutputResponse']
_STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST = DESCRIPTOR.message_types_by_name['StreamEncounteredAcquisitionOutputKeysRequest']
_STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSRESPONSE = DESCRIPTOR.message_types_by_name['StreamEncounteredAcquisitionOutputKeysResponse']
_STREAMTEMPERATUREREQUEST = DESCRIPTOR.message_types_by_name['StreamTemperatureRequest']
_TEMPERATUREPACKET = DESCRIPTOR.message_types_by_name['TemperaturePacket']
_TEMPERATUREPACKET_RANGE = _TEMPERATUREPACKET.nested_types_by_name['Range']
_TEMPERATUREPACKET_MINIONTEMPERATURE = _TEMPERATUREPACKET.nested_types_by_name['MinIONTemperature']
_TEMPERATUREPACKET_PROMETHIONTEMPERATURE = _TEMPERATUREPACKET.nested_types_by_name['PromethIONTemperature']
_STREAMTEMPERATURERESPONSE = DESCRIPTOR.message_types_by_name['StreamTemperatureResponse']
_BIASVOLTAGEPACKET = DESCRIPTOR.message_types_by_name['BiasVoltagePacket']
_STREAMBIASVOLTAGESREQUEST = DESCRIPTOR.message_types_by_name['StreamBiasVoltagesRequest']
_STREAMBIASVOLTAGESRESPONSE = DESCRIPTOR.message_types_by_name['StreamBiasVoltagesResponse']
_STREAMBOXPLOTREQUEST = DESCRIPTOR.message_types_by_name['StreamBoxplotRequest']
_BOXPLOTRESPONSE = DESCRIPTOR.message_types_by_name['BoxplotResponse']
_BOXPLOTRESPONSE_BOXPLOTDATASET = _BOXPLOTRESPONSE.nested_types_by_name['BoxplotDataset']
_STREAMBOXPLOTREQUEST_BOXPLOTTYPE = _STREAMBOXPLOTREQUEST.enum_types_by_name['BoxplotType']
DataSelection = _reflection.GeneratedProtocolMessageType('DataSelection', (_message.Message,), {
  'DESCRIPTOR' : _DATASELECTION,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Specify a desired data selection.  Units for values are as specified
  in the corresponding Request  The actual data selection used may
  differ from the desired one.  They are adjusted in the following
  sequence:   1. All values are set equal to the corresponding desired
  value.  2. Negative `start` or `end` values are fixed up by adding the
  current maximum value to the     specified value      - Negative start
  and end values are only supported for certain requests; typically they
  are        supported for time-series data      - If, after adding the
  current bucket count, the `start` value is still negative, then the
  start value is adjusted to `0`      - If, after adding the current
  bucket count, the `end` value is still negative, or is zero,
  then the data selection is empty      - If data collection is still
  ongoing, then the current bucket count may change between rpc
  calls as more data is collected.  3. Values which are not set, or
  which are set at `0`, are then adjusted to a default value:      -
  `start` and `step` will be set to the minimum valid value      - `end`
  will be set to the maximum valid value  4. Values which are outside of
  the valid range are clamped to the nearest valid value:      - Values
  less than minimum valid value will be set equal to the minimum valid
  value      - Values greater than the maximum valid value will be set
  equal to the maximum valid value  5. Finally, all values are 'rounded'
  to a nearby valid value      - `start` and `step` will be rounded down
  to the first valid value less than or equal to        their current
  values      - `end` will be rounded up to the first valid value that
  is greater than or equal to its        current value      - This means
  that the range that is specified after rounding includes the range
  that was        specified prior to rounding  If (`end` - `start`) is
  not an exact integer multiple of `step`, then the final bucket will
  cover a smaller range than that specified by `step`.  Note also that
  the maximum valid start and end value may not be known if data
  collection is still ongoing -- for example, the maximum valid time for
  time series data.  If this is the case, then the maximum valid value
  will be determined when the experiment ends, and values in use will be
  adjusted acordingly.""",
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.DataSelection)
  })
_sym_db.RegisterMessage(DataSelection)

StreamDutyTimeRequest = _reflection.GeneratedProtocolMessageType('StreamDutyTimeRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMDUTYTIMEREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
      data_selection:
          The desired data selection.  The units for all values are
          `seconds since the start of the experiment`.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamDutyTimeRequest)
  })
_sym_db.RegisterMessage(StreamDutyTimeRequest)

StreamDutyTimeResponse = _reflection.GeneratedProtocolMessageType('StreamDutyTimeResponse', (_message.Message,), {

  'BucketRange' : _reflection.GeneratedProtocolMessageType('BucketRange', (_message.Message,), {
    'DESCRIPTOR' : _STREAMDUTYTIMERESPONSE_BUCKETRANGE,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        start:
            The range covered by a bucket Values are in seconds  The range
            [start, end) is half open (i.e. the start value is included,
            the end value is not).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamDutyTimeResponse.BucketRange)
    })
  ,

  'ChannelStateData' : _reflection.GeneratedProtocolMessageType('ChannelStateData', (_message.Message,), {
    'DESCRIPTOR' : _STREAMDUTYTIMERESPONSE_CHANNELSTATEDATA,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        state_times:
            How much time (in samples) spent in this channel state, for
            each bucket
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamDutyTimeResponse.ChannelStateData)
    })
  ,

  'ChannelStatesEntry' : _reflection.GeneratedProtocolMessageType('ChannelStatesEntry', (_message.Message,), {
    'DESCRIPTOR' : _STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY,
    '__module__' : 'minknow_api.statistics_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamDutyTimeResponse.ChannelStatesEntry)
    })
  ,
  'DESCRIPTOR' : _STREAMDUTYTIMERESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      bucket_ranges:
          The range covered by each entry in state_times
      channel_states:
          Map between channel state names, and a list of bucketed duty
          time data
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamDutyTimeResponse)
  })
_sym_db.RegisterMessage(StreamDutyTimeResponse)
_sym_db.RegisterMessage(StreamDutyTimeResponse.BucketRange)
_sym_db.RegisterMessage(StreamDutyTimeResponse.ChannelStateData)
_sym_db.RegisterMessage(StreamDutyTimeResponse.ChannelStatesEntry)

ReadLengthHistogramKey = _reflection.GeneratedProtocolMessageType('ReadLengthHistogramKey', (_message.Message,), {
  'DESCRIPTOR' : _READLENGTHHISTOGRAMKEY,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      read_end_reason:
          Only return data for the given ReadEndReason.  Special values:
          - Specify `ReadEndReason::All` to return data for all read end
          reasons  If unspecified all read end reasons are returned.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.ReadLengthHistogramKey)
  })
_sym_db.RegisterMessage(ReadLengthHistogramKey)

ReadLengthHistogramSplit = _reflection.GeneratedProtocolMessageType('ReadLengthHistogramSplit', (_message.Message,), {
  'DESCRIPTOR' : _READLENGTHHISTOGRAMSPLIT,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      read_end_reason:
          Split returned data by read_end_reason
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.ReadLengthHistogramSplit)
  })
_sym_db.RegisterMessage(ReadLengthHistogramSplit)

StreamReadLengthHistogramRequest = _reflection.GeneratedProtocolMessageType('StreamReadLengthHistogramRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMREADLENGTHHISTOGRAMREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The `acquisition_run_id` of the acquisition to obtain data for
          If this is set to the `acquisition_run_id` of an acquisition
          which is in-progress, then updates containing the latest
          histogram data for that acquisition will be streamed regularly
          until that acquisition finishes (see `poll_time_seconds`
          below)  Otherwise, if this is set to the `acquisition_run_id`
          of an acquisition which is finished, and for which final
          histogram data is available, then the final histogram data for
          that acquisition will be returned.  Final histogram data is
          available until it is cleared.  Otherwise, if this parameter
          is not set, or is set to a value which is neither the
          `acquisition_run_id` of an acquisition which is in-progress,
          nor the `acquisition_run_id` of an acquisition for which final
          histogram data is available, then this call will fail with the
          status `INVALID_ARGUMENT`.
      poll_time_seconds:
          How often to return new histogram data, in seconds  If not
          specified, or set to `0`, then the poll time will be set to 60
          seconds  If data is being returned for an acquisition which is
          in progress, then one update will be sent when the call is
          first performed, then subsequently every `poll_time` after
          that, and then finally once again when the acquisition
          finishes.  Otherwise, if final histogram data is being
          returned for an acquisition that has already finished, this
          parameter has no effect.  The final histogram data will be
          returned, and the call will complete.
      read_length_type:
          The source of the read lengths in the histogram  If MinKNOW is
          unable to supply data from the requested source (e.g. if the
          user requests BasecalledBases, but basecalling is not
          enabled), then this call will fail with the status
          `FAILED_PRECONDITION`.  See `ReadLengthType` for further
          information about the available options.
      data_selection:
          The desired read length range which histograms should cover.
          Units are as set in `read_length_type`, above.
      bucket_value_type:
          What data to accumulate in the read length histogram buckets
          See `BucketValueType` for further information about the
          available options.
      discard_outlier_percent:
          If set greater than zero then discard some percent of data at
          the upper end of the source data before producing histograms
          and N50 values.  This is intended to assist in the case where
          a small number of outliers with very long read lengths cause
          the histogram axes and N50 to be skewed.  Defaults to 0 - no
          data discarded. Values should be specified in percent - a
          value of 0.05 will cause the top 5% of the data to be
          discarded before producing outputs.  For histograms, the data
          discarded depends on the bucket_value_type.  If `ReadCounts`,
          then a percentage of the total number of reads reads will be
          discarded; if `ReadLengths` then a percentage of the total
          read lengths will be discarded.  For the N50 value,
          `discard_outlier_percent` always causes a percentage of the
          total read lengths to be discarded (since it is always
          calculated from read length data)
      filtering:
          Define filtering parameters for streamed data.
      split:
          Define how results are split for returned data.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamReadLengthHistogramRequest)
  })
_sym_db.RegisterMessage(StreamReadLengthHistogramRequest)

StreamReadLengthHistogramResponse = _reflection.GeneratedProtocolMessageType('StreamReadLengthHistogramResponse', (_message.Message,), {

  'BucketRange' : _reflection.GeneratedProtocolMessageType('BucketRange', (_message.Message,), {
    'DESCRIPTOR' : _STREAMREADLENGTHHISTOGRAMRESPONSE_BUCKETRANGE,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        start:
            The range covered by a bucket Units are as set in
            `read_length_type`, above  The range [start, end) is half open
            (i.e. the start value is included, the end value is not).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamReadLengthHistogramResponse.BucketRange)
    })
  ,

  'ReadLengthHistogramData' : _reflection.GeneratedProtocolMessageType('ReadLengthHistogramData', (_message.Message,), {
    'DESCRIPTOR' : _STREAMREADLENGTHHISTOGRAMRESPONSE_READLENGTHHISTOGRAMDATA,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        filtering:
            The filtering parameters which contributed to this bucket.
        bucket_values:
            Counts for each histogram bucket  Units are as specified in
            `read_length_type` The range covered by each bucket is as in
            `bucket_ranges` The type of data accumulated in each bucket is
            given by `bucket_value_type`
        n50:
            The N50 value for the read length data for the selected
            `read_length_type` and `read_end_reasons`.  Units are as
            specified by `read_length_type`.  Measured across all source
            data, after excluding the reads specified by
            `discard_outlier_percent` in the stream request.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamReadLengthHistogramResponse.ReadLengthHistogramData)
    })
  ,
  'DESCRIPTOR' : _STREAMREADLENGTHHISTOGRAMRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      read_length_type:
          The data source for the histograms  Also specifies the units
          for `data_selection` and `n50`  See `ReadLengthType` for
          further information about the possible options.
      bucket_ranges:
          The range covered by each bucket in the histogram data
      source_data_end:
          The right hand edge of the last source bucket which contains
          data  Measured across all source data, after excluding the
          reads specified by `discard_outlier_percent` in the stream
          request.
      bucket_value_type:
          The data accumulated in the read length histogram buckets  See
          `BucketValueType` for further information about the possible
          options.
      histogram_data:
          The histogram data
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamReadLengthHistogramResponse)
  })
_sym_db.RegisterMessage(StreamReadLengthHistogramResponse)
_sym_db.RegisterMessage(StreamReadLengthHistogramResponse.BucketRange)
_sym_db.RegisterMessage(StreamReadLengthHistogramResponse.ReadLengthHistogramData)

GetReadLengthTypesRequest = _reflection.GeneratedProtocolMessageType('GetReadLengthTypesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETREADLENGTHTYPESREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.GetReadLengthTypesRequest)
  })
_sym_db.RegisterMessage(GetReadLengthTypesRequest)

GetReadLengthTypesResponse = _reflection.GeneratedProtocolMessageType('GetReadLengthTypesResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETREADLENGTHTYPESRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      available_types:
          Array of the types of bucket for which a histogram is
          currently available
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.GetReadLengthTypesResponse)
  })
_sym_db.RegisterMessage(GetReadLengthTypesResponse)

AcquisitionOutputKey = _reflection.GeneratedProtocolMessageType('AcquisitionOutputKey', (_message.Message,), {
  'DESCRIPTOR' : _ACQUISITIONOUTPUTKEY,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      barcode_name:
          Only return data for the given barcode.  Special values:   -
          Specify "unclassified" for data which does not have a barcode.
          - Specify "classified" for all data which has a barcode.  If
          unspecified all barcodes are returned.
      alignment_reference:
          Only return data for the given alignment reference.  Special
          values:   - Specify "unaligned" for data which does not align
          to a reference   - Specify "aligned" for all data which aligns
          to a reference  If unspecified all alignment targets are
          returned.
      alignment_bed_file_region:
          Only return data for the given target region.  Target regions
          are defined in bed files.  The region is a string which
          identifies an entry in the bed file.  Special values:   -
          Specify "offtarget" for data which does not have a bed region.
          - Specify "ontarget" for all data which has a bed region.  If
          unspecified all alignment regions are returned.
      alignment_bed_file_region_name:
          An alias to `alignment_bed_file_region`  An optional name can
          be used to identify a target region in the bed file
      lamp_barcode_id:
          Only return data for the given lamp barcode.  Special values:
          - Specify "unclassified" for data which does not have a lamp
          barcode.   - Specify "classified" for all data which has a
          lamp barcode.  If unspecified all lamp barcodes are returned.
      lamp_target_id:
          Only return data for the given lamp target.  Special values:
          - Specify "unclassified" for data which does not have a lamp
          target.   - Specify "classified" for all data which has a lamp
          target. Using barcode terms here as lamp is part of barcoding
          pipeline  If unspecified all lamp target are returned.
      barcode_alias:
          The barcode alias corresponding to the `barcode_name` and
          `lamp_barcode_id`
      read_end_reason:
          Only return data for the given ReadEndReason.  Special values:
          - Specify `ReadEndReason::All` to return data for all read end
          reasons  If unspecified all read end reasons are returned.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.AcquisitionOutputKey)
  })
_sym_db.RegisterMessage(AcquisitionOutputKey)

AcquisitionOutputSplit = _reflection.GeneratedProtocolMessageType('AcquisitionOutputSplit', (_message.Message,), {
  'DESCRIPTOR' : _ACQUISITIONOUTPUTSPLIT,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      barcode_name:
          Split data for every individual barcode.
      alignment_reference:
          Split data for each individual alignment reference.
          References are defined in alignment references.
      alignment_bed_file_region:
          Split data for each target region.  Target regions are defined
          in bed files.
      lamp_barcode_id:
          Split data for each lamp barcode id.  Lamp barcodes are
          defined by the active lamp kit.
      lamp_target_id:
          Split data for each lamp targets id.  Lamp targets are defined
          by the active lamp kit.
      read_end_reason:
          Split returned data by read_end_reason
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.AcquisitionOutputSplit)
  })
_sym_db.RegisterMessage(AcquisitionOutputSplit)

StreamAcquisitionOutputRequest = _reflection.GeneratedProtocolMessageType('StreamAcquisitionOutputRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMACQUISITIONOUTPUTREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
      data_selection:
          The desired data selection.  The units for all values are
          `seconds since the start of the experiment`.
      filtering:
          Define filtering parameters for streamed data.
      split:
          Define how results are split for returned data.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamAcquisitionOutputRequest)
  })
_sym_db.RegisterMessage(StreamAcquisitionOutputRequest)

AcquisitionOutputSnapshot = _reflection.GeneratedProtocolMessageType('AcquisitionOutputSnapshot', (_message.Message,), {
  'DESCRIPTOR' : _ACQUISITIONOUTPUTSNAPSHOT,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """A snapshot of acquisition output data, for a given set of filtering
  criteria.
  
  Attributes:
      seconds:
          The time the snapshot was collected, in seconds.  Represents
          the number of seconds since the start of the experiment Will
          usually stream in minute chunks, so will first see 60, then
          120 etc
      yield_summary:
          The yield summary data.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.AcquisitionOutputSnapshot)
  })
_sym_db.RegisterMessage(AcquisitionOutputSnapshot)

StreamAcquisitionOutputResponse = _reflection.GeneratedProtocolMessageType('StreamAcquisitionOutputResponse', (_message.Message,), {

  'FilteredSnapshots' : _reflection.GeneratedProtocolMessageType('FilteredSnapshots', (_message.Message,), {
    'DESCRIPTOR' : _STREAMACQUISITIONOUTPUTRESPONSE_FILTEREDSNAPSHOTS,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        filtering:
            The filtering parameters which contributed to this bucket.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredSnapshots)
    })
  ,
  'DESCRIPTOR' : _STREAMACQUISITIONOUTPUTRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      snapshots:
          Snapshots split by requested filtering parameters.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamAcquisitionOutputResponse)
  })
_sym_db.RegisterMessage(StreamAcquisitionOutputResponse)
_sym_db.RegisterMessage(StreamAcquisitionOutputResponse.FilteredSnapshots)

StreamWriterOutputRequest = _reflection.GeneratedProtocolMessageType('StreamWriterOutputRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMWRITEROUTPUTREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
      data_selection:
          The desired data selection.  The units for all values are
          `seconds since the start of the experiment`.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamWriterOutputRequest)
  })
_sym_db.RegisterMessage(StreamWriterOutputRequest)

WriterOutputSnapshot = _reflection.GeneratedProtocolMessageType('WriterOutputSnapshot', (_message.Message,), {
  'DESCRIPTOR' : _WRITEROUTPUTSNAPSHOT,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """A snapshot of writer data.
  
  Attributes:
      seconds:
          The time the snapshot was collected, in seconds.  Represents
          the number of seconds since the start of the experiment Will
          usually stream in minute chunks, so will first see 60, then
          120 etc
      writer_output:
          The writer data for this bucket.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.WriterOutputSnapshot)
  })
_sym_db.RegisterMessage(WriterOutputSnapshot)

StreamWriterOutputResponse = _reflection.GeneratedProtocolMessageType('StreamWriterOutputResponse', (_message.Message,), {
  'DESCRIPTOR' : _STREAMWRITEROUTPUTRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamWriterOutputResponse)
  })
_sym_db.RegisterMessage(StreamWriterOutputResponse)

StreamEncounteredAcquisitionOutputKeysRequest = _reflection.GeneratedProtocolMessageType('StreamEncounteredAcquisitionOutputKeysRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysRequest)
  })
_sym_db.RegisterMessage(StreamEncounteredAcquisitionOutputKeysRequest)

StreamEncounteredAcquisitionOutputKeysResponse = _reflection.GeneratedProtocolMessageType('StreamEncounteredAcquisitionOutputKeysResponse', (_message.Message,), {
  'DESCRIPTOR' : _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysResponse)
  })
_sym_db.RegisterMessage(StreamEncounteredAcquisitionOutputKeysResponse)

StreamTemperatureRequest = _reflection.GeneratedProtocolMessageType('StreamTemperatureRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMTEMPERATUREREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
      data_selection:
          The desired data selection.  The units for all values are
          `seconds since the start of the experiment`.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamTemperatureRequest)
  })
_sym_db.RegisterMessage(StreamTemperatureRequest)

TemperaturePacket = _reflection.GeneratedProtocolMessageType('TemperaturePacket', (_message.Message,), {

  'Range' : _reflection.GeneratedProtocolMessageType('Range', (_message.Message,), {
    'DESCRIPTOR' : _TEMPERATUREPACKET_RANGE,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Represents a range of values.""",
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.TemperaturePacket.Range)
    })
  ,

  'MinIONTemperature' : _reflection.GeneratedProtocolMessageType('MinIONTemperature', (_message.Message,), {
    'DESCRIPTOR' : _TEMPERATUREPACKET_MINIONTEMPERATURE,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Packet of temperatures appropriate for a MinION.
    
    Attributes:
        asic_temperature:
            Temperature as measured by the probe inside the asic.
        heatsink_temperature:
            Temperature as measured by the probe in the minion heatsink.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.TemperaturePacket.MinIONTemperature)
    })
  ,

  'PromethIONTemperature' : _reflection.GeneratedProtocolMessageType('PromethIONTemperature', (_message.Message,), {
    'DESCRIPTOR' : _TEMPERATUREPACKET_PROMETHIONTEMPERATURE,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Packet of temperatures appropriate for a PromethION.
    
    Attributes:
        flowcell_temperature:
            Temperature as measured by thermistor TH2 on the P-Chip.
        chamber_temperature:
            Mean of 12 pixel-blocks temperatures measured with sensors in
            the ASIC.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.TemperaturePacket.PromethIONTemperature)
    })
  ,
  'DESCRIPTOR' : _TEMPERATUREPACKET,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      target_temperature:
          The range is based on the requested target temperature and
          tolerance.  For example, if the target temperature is 35, and
          the tolerance is 1 then target temperatures will return as
          34(min) and 36(max).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.TemperaturePacket)
  })
_sym_db.RegisterMessage(TemperaturePacket)
_sym_db.RegisterMessage(TemperaturePacket.Range)
_sym_db.RegisterMessage(TemperaturePacket.MinIONTemperature)
_sym_db.RegisterMessage(TemperaturePacket.PromethIONTemperature)

StreamTemperatureResponse = _reflection.GeneratedProtocolMessageType('StreamTemperatureResponse', (_message.Message,), {
  'DESCRIPTOR' : _STREAMTEMPERATURERESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamTemperatureResponse)
  })
_sym_db.RegisterMessage(StreamTemperatureResponse)

BiasVoltagePacket = _reflection.GeneratedProtocolMessageType('BiasVoltagePacket', (_message.Message,), {
  'DESCRIPTOR' : _BIASVOLTAGEPACKET,
  '__module__' : 'minknow_api.statistics_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.BiasVoltagePacket)
  })
_sym_db.RegisterMessage(BiasVoltagePacket)

StreamBiasVoltagesRequest = _reflection.GeneratedProtocolMessageType('StreamBiasVoltagesRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMBIASVOLTAGESREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamBiasVoltagesRequest)
  })
_sym_db.RegisterMessage(StreamBiasVoltagesRequest)

StreamBiasVoltagesResponse = _reflection.GeneratedProtocolMessageType('StreamBiasVoltagesResponse', (_message.Message,), {
  'DESCRIPTOR' : _STREAMBIASVOLTAGESRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamBiasVoltagesResponse)
  })
_sym_db.RegisterMessage(StreamBiasVoltagesResponse)

StreamBoxplotRequest = _reflection.GeneratedProtocolMessageType('StreamBoxplotRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMBOXPLOTREQUEST,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      acquisition_run_id:
          The acquisition id of the experiment.
      data_type:
          Type of boxplot data to return.
      dataset_width:
          Defines, in minutes, the width of each dataset. This is how
          much time should each dataset (boxplot) cover. Note that
          MinKNOW stores all stats at a default granularity (specified
          in the config file, i.e. 10 min in MinKNOW 3.2). This
          dataset_width HAS to be a multiple of the default granularity!
          Note: When multiple buckets are aggregated into a single
          dataset, the resulting dataset will contain the average of the
          aggregated quantiles (with the exception of min/max)! This is
          not the same as using a larger granularity in MinKNOW configs
          - the values that MinKNOW stores are the true quantiles.
          Averaging quantiles will give a rough approximation, but not a
          quantile. If the finest granularity is not required, we
          strongly suggest changing the time coverage in the config, not
          the dataset_width in the rpc.
      poll_time:
          How often to return messages in this stream, specified in
          seconds. Note that this stream will return results regardless
          of the stats updates (because it always returns all the
          datasets). poll_time should be larger than the basecalled
          stats update rate in MinKNOW - please see
          basecalled_stats_refresh_rate_seconds in the configs (set to 1
          second in MinKNOW 3.2).  If unspecified, defaults to 1 minute.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.StreamBoxplotRequest)
  })
_sym_db.RegisterMessage(StreamBoxplotRequest)

BoxplotResponse = _reflection.GeneratedProtocolMessageType('BoxplotResponse', (_message.Message,), {

  'BoxplotDataset' : _reflection.GeneratedProtocolMessageType('BoxplotDataset', (_message.Message,), {
    'DESCRIPTOR' : _BOXPLOTRESPONSE_BOXPLOTDATASET,
    '__module__' : 'minknow_api.statistics_pb2'
    ,
    '__doc__': """Attributes:
        min:
            Minimum value for any point in the dataset.
        q25:
            25th quartile value for all points in the dataset.
        q50:
            50th quartile or median value for all points in the dataset.
        q75:
            75th quartile value for all points in the dataset.
        max:
            Maximum value for any point in the dataset.
        count:
            Number of items in this box plot's stats.
        lower_full_width_half_maximum:
            Estimated lower value where there is half the data compared to
            the mode. provides some estimate on the sharpness of the mode
            peak.
        mode:
            Estimated mode for the dataset.
        upper_full_width_half_maximum:
            Estimated upper value where there is half the data compared to
            the mode. provides some estimate on the sharpness of the mode
            peak.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.statistics.BoxplotResponse.BoxplotDataset)
    })
  ,
  'DESCRIPTOR' : _BOXPLOTRESPONSE,
  '__module__' : 'minknow_api.statistics_pb2'
  ,
  '__doc__': """Attributes:
      datasets:
          Result boxplots are stored in this array. This is an overview
          of the stored data from the START of the acquisition period.
          This includes ALL the basecalled stats from MinKNOW, not just
          updates since previous calls!
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.statistics.BoxplotResponse)
  })
_sym_db.RegisterMessage(BoxplotResponse)
_sym_db.RegisterMessage(BoxplotResponse.BoxplotDataset)

_STATISTICSSERVICE = DESCRIPTOR.services_by_name['StatisticsService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.nanoporetech.minknow_api\242\002\005MKAPI'
  _STREAMDUTYTIMEREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMDUTYTIMEREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY._options = None
  _STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY._serialized_options = b'8\001'
  _STREAMREADLENGTHHISTOGRAMREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMREADLENGTHHISTOGRAMREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _GETREADLENGTHTYPESREQUEST.fields_by_name['acquisition_run_id']._options = None
  _GETREADLENGTHTYPESREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMACQUISITIONOUTPUTREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMACQUISITIONOUTPUTREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMWRITEROUTPUTREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMWRITEROUTPUTREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMTEMPERATUREREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMTEMPERATUREREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMBIASVOLTAGESREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMBIASVOLTAGESREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STREAMBOXPLOTREQUEST.fields_by_name['acquisition_run_id']._options = None
  _STREAMBOXPLOTREQUEST.fields_by_name['acquisition_run_id']._serialized_options = b'\210\265\030\001'
  _STATISTICSSERVICE.methods_by_name['stream_duty_time']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_duty_time']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_acquisition_output']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_acquisition_output']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_writer_output']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_writer_output']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_encountered_acquisition_output_keys']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_encountered_acquisition_output_keys']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_temperature']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_temperature']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_bias_voltages']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_bias_voltages']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_read_length_histogram']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_read_length_histogram']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['get_read_length_types']._options = None
  _STATISTICSSERVICE.methods_by_name['get_read_length_types']._serialized_options = b'\220\002\001'
  _STATISTICSSERVICE.methods_by_name['stream_basecall_boxplots']._options = None
  _STATISTICSSERVICE.methods_by_name['stream_basecall_boxplots']._serialized_options = b'\220\002\001'
  _READLENGTHTYPE._serialized_start=5204
  _READLENGTHTYPE._serialized_end=5280
  _BUCKETVALUETYPE._serialized_start=5282
  _BUCKETVALUETYPE._serialized_end=5332
  _READENDREASON._serialized_start=5335
  _READENDREASON._serialized_end=5495
  _DATASELECTION._serialized_start=118
  _DATASELECTION._serialized_end=175
  _STREAMDUTYTIMEREQUEST._serialized_start=177
  _STREAMDUTYTIMEREQUEST._serialized_end=297
  _STREAMDUTYTIMERESPONSE._serialized_start=300
  _STREAMDUTYTIMERESPONSE._serialized_end=701
  _STREAMDUTYTIMERESPONSE_BUCKETRANGE._serialized_start=500
  _STREAMDUTYTIMERESPONSE_BUCKETRANGE._serialized_end=541
  _STREAMDUTYTIMERESPONSE_CHANNELSTATEDATA._serialized_start=543
  _STREAMDUTYTIMERESPONSE_CHANNELSTATEDATA._serialized_end=582
  _STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY._serialized_start=584
  _STREAMDUTYTIMERESPONSE_CHANNELSTATESENTRY._serialized_end=701
  _READLENGTHHISTOGRAMKEY._serialized_start=703
  _READLENGTHHISTOGRAMKEY._serialized_end=791
  _READLENGTHHISTOGRAMSPLIT._serialized_start=793
  _READLENGTHHISTOGRAMSPLIT._serialized_end=844
  _STREAMREADLENGTHHISTOGRAMREQUEST._serialized_start=847
  _STREAMREADLENGTHHISTOGRAMREQUEST._serialized_end=1304
  _STREAMREADLENGTHHISTOGRAMRESPONSE._serialized_start=1307
  _STREAMREADLENGTHHISTOGRAMRESPONSE._serialized_end=1876
  _STREAMREADLENGTHHISTOGRAMRESPONSE_BUCKETRANGE._serialized_start=1704
  _STREAMREADLENGTHHISTOGRAMRESPONSE_BUCKETRANGE._serialized_end=1745
  _STREAMREADLENGTHHISTOGRAMRESPONSE_READLENGTHHISTOGRAMDATA._serialized_start=1748
  _STREAMREADLENGTHHISTOGRAMRESPONSE_READLENGTHHISTOGRAMDATA._serialized_end=1876
  _GETREADLENGTHTYPESREQUEST._serialized_start=1878
  _GETREADLENGTHTYPESREQUEST._serialized_end=1939
  _GETREADLENGTHTYPESRESPONSE._serialized_start=1941
  _GETREADLENGTHTYPESRESPONSE._serialized_end=2034
  _ACQUISITIONOUTPUTKEY._serialized_start=2037
  _ACQUISITIONOUTPUTKEY._serialized_end=2321
  _ACQUISITIONOUTPUTSPLIT._serialized_start=2324
  _ACQUISITIONOUTPUTSPLIT._serialized_end=2508
  _STREAMACQUISITIONOUTPUTREQUEST._serialized_start=2511
  _STREAMACQUISITIONOUTPUTREQUEST._serialized_end=2768
  _ACQUISITIONOUTPUTSNAPSHOT._serialized_start=2770
  _ACQUISITIONOUTPUTSNAPSHOT._serialized_end=2887
  _STREAMACQUISITIONOUTPUTRESPONSE._serialized_start=2890
  _STREAMACQUISITIONOUTPUTRESPONSE._serialized_end=3174
  _STREAMACQUISITIONOUTPUTRESPONSE_FILTEREDSNAPSHOTS._serialized_start=3020
  _STREAMACQUISITIONOUTPUTRESPONSE_FILTEREDSNAPSHOTS._serialized_end=3174
  _STREAMWRITEROUTPUTREQUEST._serialized_start=3176
  _STREAMWRITEROUTPUTREQUEST._serialized_end=3300
  _WRITEROUTPUTSNAPSHOT._serialized_start=3302
  _WRITEROUTPUTSNAPSHOT._serialized_end=3415
  _STREAMWRITEROUTPUTRESPONSE._serialized_start=3417
  _STREAMWRITEROUTPUTRESPONSE._serialized_end=3510
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST._serialized_start=3512
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSREQUEST._serialized_end=3593
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSRESPONSE._serialized_start=3595
  _STREAMENCOUNTEREDACQUISITIONOUTPUTKEYSRESPONSE._serialized_end=3722
  _STREAMTEMPERATUREREQUEST._serialized_start=3724
  _STREAMTEMPERATUREREQUEST._serialized_end=3847
  _TEMPERATUREPACKET._serialized_start=3850
  _TEMPERATUREPACKET._serialized_end=4331
  _TEMPERATUREPACKET_RANGE._serialized_start=4114
  _TEMPERATUREPACKET_RANGE._serialized_end=4155
  _TEMPERATUREPACKET_MINIONTEMPERATURE._serialized_start=4157
  _TEMPERATUREPACKET_MINIONTEMPERATURE._serialized_end=4232
  _TEMPERATUREPACKET_PROMETHIONTEMPERATURE._serialized_start=4234
  _TEMPERATUREPACKET_PROMETHIONTEMPERATURE._serialized_end=4316
  _STREAMTEMPERATURERESPONSE._serialized_start=4333
  _STREAMTEMPERATURERESPONSE._serialized_end=4425
  _BIASVOLTAGEPACKET._serialized_start=4427
  _BIASVOLTAGEPACKET._serialized_end=4517
  _STREAMBIASVOLTAGESREQUEST._serialized_start=4519
  _STREAMBIASVOLTAGESREQUEST._serialized_end=4580
  _STREAMBIASVOLTAGESRESPONSE._serialized_start=4582
  _STREAMBIASVOLTAGESRESPONSE._serialized_end=4676
  _STREAMBOXPLOTREQUEST._serialized_start=4679
  _STREAMBOXPLOTREQUEST._serialized_end=4917
  _STREAMBOXPLOTREQUEST_BOXPLOTTYPE._serialized_start=4856
  _STREAMBOXPLOTREQUEST_BOXPLOTTYPE._serialized_end=4917
  _BOXPLOTRESPONSE._serialized_start=4920
  _BOXPLOTRESPONSE._serialized_end=5202
  _BOXPLOTRESPONSE_BOXPLOTDATASET._serialized_start=5014
  _BOXPLOTRESPONSE_BOXPLOTDATASET._serialized_end=5202
  _STATISTICSSERVICE._serialized_start=5498
  _STATISTICSSERVICE._serialized_end=6800
# @@protoc_insertion_point(module_scope)
