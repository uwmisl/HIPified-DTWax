# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: minknow_api/protocol.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from minknow_api import acquisition_pb2 as minknow__api_dot_acquisition__pb2
from minknow_api import basecaller_pb2 as minknow__api_dot_basecaller__pb2
from minknow_api import device_pb2 as minknow__api_dot_device__pb2
from minknow_api import protocol_settings_pb2 as minknow__api_dot_protocol__settings__pb2
from minknow_api import rpc_options_pb2 as minknow__api_dot_rpc__options__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1aminknow_api/protocol.proto\x12\x14minknow_api.protocol\x1a\x1dminknow_api/acquisition.proto\x1a\x1cminknow_api/basecaller.proto\x1a\x18minknow_api/device.proto\x1a#minknow_api/protocol_settings.proto\x1a\x1dminknow_api/rpc_options.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xc3\x02\n\x0f\x42\x61rcodeUserData\x12\x14\n\x0c\x62\x61rcode_name\x18\x01 \x01(\t\x12\x1d\n\x15\x62\x61rcode_name_internal\x18\x05 \x01(\t\x12\x17\n\x0flamp_barcode_id\x18\x02 \x01(\t\x12\r\n\x05\x61lias\x18\x03 \x01(\t\x12>\n\x04type\x18\x04 \x01(\x0e\x32\x30.minknow_api.protocol.BarcodeUserData.SampleType\"\x92\x01\n\nSampleType\x12\x0f\n\x0btest_sample\x10\x00\x12\x14\n\x10positive_control\x10\x01\x12\x14\n\x10negative_control\x10\x02\x12\x17\n\x13no_template_control\x10\x03\x12\x16\n\x12positive_control_1\x10\x04\x12\x16\n\x12positive_control_2\x10\x05\"A\n\x07KitInfo\x12\x16\n\x0esequencing_kit\x18\x01 \x01(\t\x12\x1e\n\x16\x62\x61rcode_expansion_kits\x18\x02 \x03(\t\"\xf8\x02\n\x13ProtocolRunUserInfo\x12\x37\n\x11protocol_group_id\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12/\n\tsample_id\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12@\n\x11\x62\x61rcode_user_info\x18\x03 \x03(\x0b\x32%.minknow_api.protocol.BarcodeUserData\x12\x41\n\x1buser_specified_flow_cell_id\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12\x41\n\x1buser_specified_product_code\x18\x05 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12/\n\x08kit_info\x18\x06 \x01(\x0b\x32\x1d.minknow_api.protocol.KitInfo\"R\n\x13OffloadLocationInfo\x12\x1c\n\x14offload_location_ids\x18\x01 \x03(\t\x12\x1d\n\x15offload_location_path\x18\x02 \x01(\t\"\x9a\x02\n\x14StartProtocolRequest\x12\x18\n\nidentifier\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12\x0c\n\x04\x61rgs\x18\x02 \x03(\t\x12<\n\tuser_info\x18\x03 \x01(\x0b\x32).minknow_api.protocol.ProtocolRunUserInfo\x12H\n\x15offload_location_info\x18\x04 \x01(\x0b\x32).minknow_api.protocol.OffloadLocationInfo\x12R\n\x19target_run_until_criteria\x18\x05 \x01(\x0b\x32/.minknow_api.acquisition.TargetRunUntilCriteria\"\'\n\x15StartProtocolResponse\x12\x0e\n\x06run_id\x18\x01 \x01(\t\"c\n\x13StopProtocolRequest\x12L\n\x13\x64\x61ta_action_on_stop\x18\x01 \x01(\x0e\x32/.minknow_api.acquisition.StopRequest.DataAction\"\x16\n\x14StopProtocolResponse\"\x16\n\x14PauseProtocolRequest\"\x17\n\x15PauseProtocolResponse\"\x17\n\x15ResumeProtocolRequest\"\x18\n\x16ResumeProtocolResponse\"\x17\n\x15TriggerMuxScanRequest\"\x18\n\x16TriggerMuxScanResponse\",\n\x14ListProtocolsRequest\x12\x14\n\x0c\x66orce_reload\x18\x01 \x01(\x08\"\xff\x03\n\x0cProtocolInfo\x12\x12\n\nidentifier\x18\x01 \x01(\t\x12:\n\x04tags\x18\x02 \x03(\x0b\x32,.minknow_api.protocol.ProtocolInfo.TagsEntry\x12\x0c\n\x04name\x18\x03 \x01(\t\x12U\n\x15tag_extraction_result\x18\x04 \x01(\x0b\x32\x36.minknow_api.protocol.ProtocolInfo.TagExtractionResult\x1a\xa1\x01\n\x08TagValue\x12\x16\n\x0cstring_value\x18\x01 \x01(\tH\x00\x12\x14\n\nbool_value\x18\x02 \x01(\x08H\x00\x12\x13\n\tint_value\x18\x03 \x01(\x03H\x00\x12\x16\n\x0c\x64ouble_value\x18\x04 \x01(\x01H\x00\x12\x15\n\x0b\x61rray_value\x18\x05 \x01(\tH\x00\x12\x16\n\x0cobject_value\x18\x06 \x01(\tH\x00\x42\x0b\n\ttag_value\x1a<\n\x13TagExtractionResult\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x14\n\x0c\x65rror_report\x18\x02 \x01(\t\x1aX\n\tTagsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.minknow_api.protocol.ProtocolInfo.TagValue:\x02\x38\x01\"N\n\x15ListProtocolsResponse\x12\x35\n\tprotocols\x18\x01 \x03(\x0b\x32\".minknow_api.protocol.ProtocolInfo\"\xff\x01\n\x16WaitForFinishedRequest\x12\x14\n\x06run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12M\n\x05state\x18\x02 \x01(\x0e\x32>.minknow_api.protocol.WaitForFinishedRequest.NotificationState\x12\x0f\n\x07timeout\x18\x03 \x01(\x02\"o\n\x11NotificationState\x12\x19\n\x15NOTIFY_ON_TERMINATION\x10\x00\x12\x1d\n\x19NOTIFY_BEFORE_TERMINATION\x10\x01\x12 \n\x1cNOTIFY_ON_SCRIPT_TERMINATION\x10\x02\"#\n\x11GetRunInfoRequest\x12\x0e\n\x06run_id\x18\x01 \x01(\t\"2\n\x17\x45pi2meWorkflowReference\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0b\n\x03url\x18\x02 \x01(\t\"s\n AssociatedPostProcessingAnalysis\x12\x12\n\nstarted_id\x18\x01 \x01(\t\x12;\n\rstart_request\x18\x02 \x01(\x0b\x32$.minknow_api.basecaller.StartRequest\"R\n\x10PlatformQcResult\x12\x14\n\x0c\x66low_cell_id\x18\x01 \x01(\t\x12\x0e\n\x06passed\x18\x02 \x01(\x08\x12\x18\n\x10total_pore_count\x18\x03 \x01(\r\"&\n\x0f\x45xternalOffload\x12\x13\n\x0boffload_ids\x18\x01 \x03(\t\"\xf4\x07\n\x0fProtocolRunInfo\x12\x0e\n\x06run_id\x18\x01 \x01(\t\x12\x13\n\x0bprotocol_id\x18\x02 \x01(\t\x12\x0c\n\x04\x61rgs\x18\x03 \x03(\t\x12\x13\n\x0boutput_path\x18\x0b \x01(\t\x12\x32\n\x05state\x18\x04 \x01(\x0e\x32#.minknow_api.protocol.ProtocolState\x12\x32\n\x05phase\x18\x10 \x01(\x0e\x32#.minknow_api.protocol.ProtocolPhase\x12\x35\n\x11last_phase_change\x18\x11 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x11\n\tcan_pause\x18\x12 \x01(\x08\x12\x1c\n\x14\x63\x61n_trigger_mux_scan\x18\x13 \x01(\x08\x12.\n\nstart_time\x18\x05 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x33\n\x0fscript_end_time\x18\t \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12,\n\x08\x65nd_time\x18\x06 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x1b\n\x13\x61\x63quisition_run_ids\x18\x07 \x03(\t\x12<\n\tuser_info\x18\x08 \x01(\x0b\x32).minknow_api.protocol.ProtocolRunUserInfo\x12G\n\x10\x65pi2me_workflows\x18\n \x03(\x0b\x32-.minknow_api.protocol.Epi2meWorkflowReference\x12\x39\n\x06\x64\x65vice\x18\x0c \x01(\x0b\x32).minknow_api.device.GetDeviceInfoResponse\x12>\n\tflow_cell\x18\r \x01(\x0b\x32+.minknow_api.device.GetFlowCellInfoResponse\x12\x35\n\tmeta_info\x18\x0e \x01(\x0b\x32\".minknow_api.protocol.ProtocolInfo\x12\x63\n#associated_post_processing_analysis\x18\x0f \x03(\x0b\x32\x36.minknow_api.protocol.AssociatedPostProcessingAnalysis\x12:\n\npqc_result\x18\x14 \x01(\x0b\x32&.minknow_api.protocol.PlatformQcResult\x12?\n\x10\x65xternal_offload\x18\x15 \x01(\x0b\x32%.minknow_api.protocol.ExternalOffload\"\xcf\x01\n\rFilteringInfo\x12H\n\npqc_filter\x18\x01 \x01(\x0b\x32\x34.minknow_api.protocol.FilteringInfo.PlatformQcFilter\x12\x1e\n\x11protocol_group_id\x18\x02 \x01(\tH\x00\x88\x01\x01\x1a>\n\x10PlatformQcFilter\x12\x19\n\x0c\x66low_cell_id\x18\x01 \x01(\tH\x00\x88\x01\x01\x42\x0f\n\r_flow_cell_idB\x14\n\x12_protocol_group_id\"S\n\x17ListProtocolRunsRequest\x12\x38\n\x0b\x66ilter_info\x18\x01 \x01(\x0b\x32#.minknow_api.protocol.FilteringInfo\"+\n\x18ListProtocolRunsResponse\x12\x0f\n\x07run_ids\x18\x01 \x03(\t\"\x1e\n\x1cGetCurrentProtocolRunRequest\"X\n\x1dGetCurrentProtocolRunResponse\x12\x37\n\x08run_info\x18\x03 \x01(\x0b\x32%.minknow_api.protocol.ProtocolRunInfo\" \n\x1eWatchCurrentProtocolRunRequest\"\x17\n\x15GetContextInfoRequest\"\xa1\x01\n\x16GetContextInfoResponse\x12S\n\x0c\x63ontext_info\x18\x01 \x03(\x0b\x32=.minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry\x1a\x32\n\x10\x43ontextInfoEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x9f\x01\n\x15SetContextInfoRequest\x12R\n\x0c\x63ontext_info\x18\x01 \x03(\x0b\x32<.minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry\x1a\x32\n\x10\x43ontextInfoEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x18\n\x16SetContextInfoResponse\"\x1b\n\x19GetProtocolPurposeRequest\"-\n\x1aGetProtocolPurposeResponse\x12\x0f\n\x07purpose\x18\x01 \x01(\t\",\n\x19SetProtocolPurposeRequest\x12\x0f\n\x07purpose\x18\x01 \x01(\t\"\x1c\n\x1aSetProtocolPurposeResponse\"~\n\x18\x41\x64\x64\x45pi2meWorkflowRequest\x12\x14\n\x06run_id\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12L\n\x0f\x65pi2me_workflow\x18\x02 \x01(\x0b\x32-.minknow_api.protocol.Epi2meWorkflowReferenceB\x04\x88\xb5\x18\x01\"\x1b\n\x19\x41\x64\x64\x45pi2meWorkflowResponse\"\x1d\n\x1bListProtocolGroupIdsRequest\":\n\x1cListProtocolGroupIdsResponse\x12\x1a\n\x12protocol_group_ids\x18\x01 \x03(\t\"\x1b\n\x19\x42\x65ginHardwareCheckRequest\",\n\x1a\x42\x65ginHardwareCheckResponse\x12\x0e\n\x06run_id\x18\x01 \x01(\t\"\x18\n\x16\x42\x65ginPlatformQcRequest\")\n\x17\x42\x65ginPlatformQcResponse\x12\x0e\n\x06run_id\x18\x01 \x01(\t\"\xb4\x04\n\x14\x42\x65ginProtocolRequest\x12\x14\n\nidentifier\x18\x01 \x01(\tH\x00\x12Q\n\ncomponents\x18\x02 \x01(\x0b\x32;.minknow_api.protocol_settings.ProtocolIdentifierComponentsH\x00\x12<\n\tuser_info\x18\x03 \x01(\x0b\x32).minknow_api.protocol.ProtocolRunUserInfo\x12H\n\x15offload_location_info\x18\x05 \x01(\x0b\x32).minknow_api.protocol.OffloadLocationInfo\x12R\n\x19target_run_until_criteria\x18\x06 \x01(\x0b\x32/.minknow_api.acquisition.TargetRunUntilCriteria\x12J\n\x08settings\x18\x04 \x03(\x0b\x32\x38.minknow_api.protocol.BeginProtocolRequest.SettingsEntry\x1at\n\rSettingsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12R\n\x05value\x18\x02 \x01(\x0b\x32\x43.minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue:\x02\x38\x01\x42\x15\n\x13protocol_identifier\"\'\n\x15\x42\x65ginProtocolResponse\x12\x0e\n\x06run_id\x18\x01 \x01(\t\"q\n\x1aSetPlatformQcResultRequest\x12\x17\n\x0fprotocol_run_id\x18\x01 \x01(\t\x12:\n\npqc_result\x18\x02 \x01(\x0b\x32&.minknow_api.protocol.PlatformQcResult\"\x1d\n\x1bSetPlatformQcResultResponse\"u\n&AssociatePostProcessingAnalysisRequest\x12\x0e\n\x06run_id\x18\x01 \x01(\t\x12;\n\rstart_request\x18\x02 \x01(\x0b\x32$.minknow_api.basecaller.StartRequest\"5\n\'AssociatePostProcessingAnalysisResponse\x12\n\n\x02id\x18\x01 \x01(\t\"7\n\x1f\x43learProtocolHistoryDataRequest\x12\x14\n\x0cprotocol_ids\x18\x01 \x03(\t\"\"\n ClearProtocolHistoryDataResponse\"\xf2\x01\n\x1eProtocolPhaseManagementRequest\x12[\n\x10set_capabilities\x18\x01 \x01(\x0b\x32\x41.minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities\x12\x32\n\x05phase\x18\x02 \x01(\x0e\x32#.minknow_api.protocol.ProtocolPhase\x1a?\n\x0c\x43\x61pabilities\x12\x11\n\tcan_pause\x18\x01 \x01(\x08\x12\x1c\n\x14\x63\x61n_trigger_mux_scan\x18\x02 \x01(\x08\"O\n\x1fProtocolPhaseManagementResponse\x12,\n\x06\x61\x63tion\x18\x01 \x01(\x0e\x32\x1c.minknow_api.protocol.Action\"3\n\x18GenerateRunReportRequest\x12\x17\n\x0fprotocol_run_id\x18\x01 \x01(\t\"c\n\x19GenerateRunReportResponse\x12\x17\n\x0fprotocol_run_id\x18\x01 \x01(\t\x12\x13\n\x0breport_data\x18\x02 \x01(\t\x12\x18\n\x10remaining_length\x18\x03 \x01(\x05*\xbb\x03\n\rProtocolState\x12\x14\n\x10PROTOCOL_RUNNING\x10\x00\x12$\n PROTOCOL_WAITING_FOR_TEMPERATURE\x10\x04\x12$\n PROTOCOL_WAITING_FOR_ACQUISITION\x10\x05\x12\x16\n\x12PROTOCOL_COMPLETED\x10\x01\x12\x1c\n\x18PROTOCOL_STOPPED_BY_USER\x10\x02\x12 \n\x1cPROTOCOL_FINISHED_WITH_ERROR\x10\x03\x12\'\n#PROTOCOL_FINISHED_WITH_DEVICE_ERROR\x10\x06\x12.\n*PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY\x10\x07\x12,\n(PROTOCOL_FINISHED_WITH_ERROR_CALIBRATION\x10\x14\x12\x32\n.PROTOCOL_FINISHED_WITH_ERROR_BASECALL_SETTINGS\x10\x15\x12\x35\n1PROTOCOL_FINISHED_WITH_ERROR_TEMPERATURE_REQUIRED\x10\x16*\xbf\x01\n\rProtocolPhase\x12\x11\n\rPHASE_UNKNOWN\x10\x00\x12\x16\n\x12PHASE_INITIALISING\x10\x01\x12\x14\n\x10PHASE_SEQUENCING\x10\x02\x12 \n\x1cPHASE_PREPARING_FOR_MUX_SCAN\x10\x03\x12\x12\n\x0ePHASE_MUX_SCAN\x10\x04\x12\x10\n\x0cPHASE_PAUSED\x10\x05\x12\x11\n\rPHASE_PAUSING\x10\x06\x12\x12\n\x0ePHASE_RESUMING\x10\x07*[\n\x06\x41\x63tion\x12\x0f\n\x0b\x41\x43TION_NONE\x10\x00\x12\x10\n\x0c\x41\x43TION_PAUSE\x10\x01\x12\x11\n\rACTION_RESUME\x10\x02\x12\x1b\n\x17\x41\x43TION_TRIGGER_MUX_SCAN\x10\x03\x32\xa9\x18\n\x0fProtocolService\x12k\n\x0estart_protocol\x12*.minknow_api.protocol.StartProtocolRequest\x1a+.minknow_api.protocol.StartProtocolResponse\"\x00\x12h\n\rstop_protocol\x12).minknow_api.protocol.StopProtocolRequest\x1a*.minknow_api.protocol.StopProtocolResponse\"\x00\x12n\n\x0epause_protocol\x12*.minknow_api.protocol.PauseProtocolRequest\x1a+.minknow_api.protocol.PauseProtocolResponse\"\x03\x90\x02\x02\x12q\n\x0fresume_protocol\x12+.minknow_api.protocol.ResumeProtocolRequest\x1a,.minknow_api.protocol.ResumeProtocolResponse\"\x03\x90\x02\x02\x12r\n\x10trigger_mux_scan\x12+.minknow_api.protocol.TriggerMuxScanRequest\x1a,.minknow_api.protocol.TriggerMuxScanResponse\"\x03\x90\x02\x02\x12m\n\x11wait_for_finished\x12,.minknow_api.protocol.WaitForFinishedRequest\x1a%.minknow_api.protocol.ProtocolRunInfo\"\x03\x90\x02\x01\x12\x63\n\x0cget_run_info\x12\'.minknow_api.protocol.GetRunInfoRequest\x1a%.minknow_api.protocol.ProtocolRunInfo\"\x03\x90\x02\x01\x12x\n\x12list_protocol_runs\x12-.minknow_api.protocol.ListProtocolRunsRequest\x1a..minknow_api.protocol.ListProtocolRunsResponse\"\x03\x90\x02\x01\x12z\n\x18get_current_protocol_run\x12\x32.minknow_api.protocol.GetCurrentProtocolRunRequest\x1a%.minknow_api.protocol.ProtocolRunInfo\"\x03\x90\x02\x01\x12\x80\x01\n\x1awatch_current_protocol_run\x12\x34.minknow_api.protocol.WatchCurrentProtocolRunRequest\x1a%.minknow_api.protocol.ProtocolRunInfo\"\x03\x90\x02\x01\x30\x01\x12n\n\x0elist_protocols\x12*.minknow_api.protocol.ListProtocolsRequest\x1a+.minknow_api.protocol.ListProtocolsResponse\"\x03\x90\x02\x02\x12r\n\x10get_context_info\x12+.minknow_api.protocol.GetContextInfoRequest\x1a,.minknow_api.protocol.GetContextInfoResponse\"\x03\x90\x02\x01\x12r\n\x10set_context_info\x12+.minknow_api.protocol.SetContextInfoRequest\x1a,.minknow_api.protocol.SetContextInfoResponse\"\x03\x90\x02\x02\x12~\n\x14get_protocol_purpose\x12/.minknow_api.protocol.GetProtocolPurposeRequest\x1a\x30.minknow_api.protocol.GetProtocolPurposeResponse\"\x03\x90\x02\x01\x12~\n\x14set_protocol_purpose\x12/.minknow_api.protocol.SetProtocolPurposeRequest\x1a\x30.minknow_api.protocol.SetProtocolPurposeResponse\"\x03\x90\x02\x02\x12x\n\x13\x61\x64\x64_epi2me_workflow\x12..minknow_api.protocol.AddEpi2meWorkflowRequest\x1a/.minknow_api.protocol.AddEpi2meWorkflowResponse\"\x00\x12\x85\x01\n\x17list_protocol_group_ids\x12\x31.minknow_api.protocol.ListProtocolGroupIdsRequest\x1a\x32.minknow_api.protocol.ListProtocolGroupIdsResponse\"\x03\x90\x02\x01\x12\x7f\n\x14\x62\x65gin_hardware_check\x12/.minknow_api.protocol.BeginHardwareCheckRequest\x1a\x30.minknow_api.protocol.BeginHardwareCheckResponse\"\x04\x98\xb5\x18\x01\x12v\n\x11\x62\x65gin_platform_qc\x12,.minknow_api.protocol.BeginPlatformQcRequest\x1a-.minknow_api.protocol.BeginPlatformQcResponse\"\x04\x98\xb5\x18\x01\x12o\n\x0e\x62\x65gin_protocol\x12*.minknow_api.protocol.BeginProtocolRequest\x1a+.minknow_api.protocol.BeginProtocolResponse\"\x04\x98\xb5\x18\x01\x12\x82\x01\n\x16set_platform_qc_result\x12\x30.minknow_api.protocol.SetPlatformQcResultRequest\x1a\x31.minknow_api.protocol.SetPlatformQcResultResponse\"\x03\x90\x02\x02\x12\xb0\x01\n/associate_post_processing_analysis_for_protocol\x12<.minknow_api.protocol.AssociatePostProcessingAnalysisRequest\x1a=.minknow_api.protocol.AssociatePostProcessingAnalysisResponse\"\x00\x12\x8e\x01\n\x1b\x63lear_protocol_history_data\x12\x35.minknow_api.protocol.ClearProtocolHistoryDataRequest\x1a\x36.minknow_api.protocol.ClearProtocolHistoryDataResponse\"\x00\x12\x8e\x01\n\x19protocol_phase_management\x12\x34.minknow_api.protocol.ProtocolPhaseManagementRequest\x1a\x35.minknow_api.protocol.ProtocolPhaseManagementResponse\"\x00(\x01\x30\x01\x12}\n\x13generate_run_report\x12..minknow_api.protocol.GenerateRunReportRequest\x1a/.minknow_api.protocol.GenerateRunReportResponse\"\x03\x90\x02\x02\x30\x01\x42&\n\x1c\x63om.nanoporetech.minknow_api\xa2\x02\x05MKAPIb\x06proto3')

_PROTOCOLSTATE = DESCRIPTOR.enum_types_by_name['ProtocolState']
ProtocolState = enum_type_wrapper.EnumTypeWrapper(_PROTOCOLSTATE)
_PROTOCOLPHASE = DESCRIPTOR.enum_types_by_name['ProtocolPhase']
ProtocolPhase = enum_type_wrapper.EnumTypeWrapper(_PROTOCOLPHASE)
_ACTION = DESCRIPTOR.enum_types_by_name['Action']
Action = enum_type_wrapper.EnumTypeWrapper(_ACTION)
PROTOCOL_RUNNING = 0
PROTOCOL_WAITING_FOR_TEMPERATURE = 4
PROTOCOL_WAITING_FOR_ACQUISITION = 5
PROTOCOL_COMPLETED = 1
PROTOCOL_STOPPED_BY_USER = 2
PROTOCOL_FINISHED_WITH_ERROR = 3
PROTOCOL_FINISHED_WITH_DEVICE_ERROR = 6
PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY = 7
PROTOCOL_FINISHED_WITH_ERROR_CALIBRATION = 20
PROTOCOL_FINISHED_WITH_ERROR_BASECALL_SETTINGS = 21
PROTOCOL_FINISHED_WITH_ERROR_TEMPERATURE_REQUIRED = 22
PHASE_UNKNOWN = 0
PHASE_INITIALISING = 1
PHASE_SEQUENCING = 2
PHASE_PREPARING_FOR_MUX_SCAN = 3
PHASE_MUX_SCAN = 4
PHASE_PAUSED = 5
PHASE_PAUSING = 6
PHASE_RESUMING = 7
ACTION_NONE = 0
ACTION_PAUSE = 1
ACTION_RESUME = 2
ACTION_TRIGGER_MUX_SCAN = 3


_BARCODEUSERDATA = DESCRIPTOR.message_types_by_name['BarcodeUserData']
_KITINFO = DESCRIPTOR.message_types_by_name['KitInfo']
_PROTOCOLRUNUSERINFO = DESCRIPTOR.message_types_by_name['ProtocolRunUserInfo']
_OFFLOADLOCATIONINFO = DESCRIPTOR.message_types_by_name['OffloadLocationInfo']
_STARTPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['StartProtocolRequest']
_STARTPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['StartProtocolResponse']
_STOPPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['StopProtocolRequest']
_STOPPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['StopProtocolResponse']
_PAUSEPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['PauseProtocolRequest']
_PAUSEPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['PauseProtocolResponse']
_RESUMEPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['ResumeProtocolRequest']
_RESUMEPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['ResumeProtocolResponse']
_TRIGGERMUXSCANREQUEST = DESCRIPTOR.message_types_by_name['TriggerMuxScanRequest']
_TRIGGERMUXSCANRESPONSE = DESCRIPTOR.message_types_by_name['TriggerMuxScanResponse']
_LISTPROTOCOLSREQUEST = DESCRIPTOR.message_types_by_name['ListProtocolsRequest']
_PROTOCOLINFO = DESCRIPTOR.message_types_by_name['ProtocolInfo']
_PROTOCOLINFO_TAGVALUE = _PROTOCOLINFO.nested_types_by_name['TagValue']
_PROTOCOLINFO_TAGEXTRACTIONRESULT = _PROTOCOLINFO.nested_types_by_name['TagExtractionResult']
_PROTOCOLINFO_TAGSENTRY = _PROTOCOLINFO.nested_types_by_name['TagsEntry']
_LISTPROTOCOLSRESPONSE = DESCRIPTOR.message_types_by_name['ListProtocolsResponse']
_WAITFORFINISHEDREQUEST = DESCRIPTOR.message_types_by_name['WaitForFinishedRequest']
_GETRUNINFOREQUEST = DESCRIPTOR.message_types_by_name['GetRunInfoRequest']
_EPI2MEWORKFLOWREFERENCE = DESCRIPTOR.message_types_by_name['Epi2meWorkflowReference']
_ASSOCIATEDPOSTPROCESSINGANALYSIS = DESCRIPTOR.message_types_by_name['AssociatedPostProcessingAnalysis']
_PLATFORMQCRESULT = DESCRIPTOR.message_types_by_name['PlatformQcResult']
_EXTERNALOFFLOAD = DESCRIPTOR.message_types_by_name['ExternalOffload']
_PROTOCOLRUNINFO = DESCRIPTOR.message_types_by_name['ProtocolRunInfo']
_FILTERINGINFO = DESCRIPTOR.message_types_by_name['FilteringInfo']
_FILTERINGINFO_PLATFORMQCFILTER = _FILTERINGINFO.nested_types_by_name['PlatformQcFilter']
_LISTPROTOCOLRUNSREQUEST = DESCRIPTOR.message_types_by_name['ListProtocolRunsRequest']
_LISTPROTOCOLRUNSRESPONSE = DESCRIPTOR.message_types_by_name['ListProtocolRunsResponse']
_GETCURRENTPROTOCOLRUNREQUEST = DESCRIPTOR.message_types_by_name['GetCurrentProtocolRunRequest']
_GETCURRENTPROTOCOLRUNRESPONSE = DESCRIPTOR.message_types_by_name['GetCurrentProtocolRunResponse']
_WATCHCURRENTPROTOCOLRUNREQUEST = DESCRIPTOR.message_types_by_name['WatchCurrentProtocolRunRequest']
_GETCONTEXTINFOREQUEST = DESCRIPTOR.message_types_by_name['GetContextInfoRequest']
_GETCONTEXTINFORESPONSE = DESCRIPTOR.message_types_by_name['GetContextInfoResponse']
_GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY = _GETCONTEXTINFORESPONSE.nested_types_by_name['ContextInfoEntry']
_SETCONTEXTINFOREQUEST = DESCRIPTOR.message_types_by_name['SetContextInfoRequest']
_SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY = _SETCONTEXTINFOREQUEST.nested_types_by_name['ContextInfoEntry']
_SETCONTEXTINFORESPONSE = DESCRIPTOR.message_types_by_name['SetContextInfoResponse']
_GETPROTOCOLPURPOSEREQUEST = DESCRIPTOR.message_types_by_name['GetProtocolPurposeRequest']
_GETPROTOCOLPURPOSERESPONSE = DESCRIPTOR.message_types_by_name['GetProtocolPurposeResponse']
_SETPROTOCOLPURPOSEREQUEST = DESCRIPTOR.message_types_by_name['SetProtocolPurposeRequest']
_SETPROTOCOLPURPOSERESPONSE = DESCRIPTOR.message_types_by_name['SetProtocolPurposeResponse']
_ADDEPI2MEWORKFLOWREQUEST = DESCRIPTOR.message_types_by_name['AddEpi2meWorkflowRequest']
_ADDEPI2MEWORKFLOWRESPONSE = DESCRIPTOR.message_types_by_name['AddEpi2meWorkflowResponse']
_LISTPROTOCOLGROUPIDSREQUEST = DESCRIPTOR.message_types_by_name['ListProtocolGroupIdsRequest']
_LISTPROTOCOLGROUPIDSRESPONSE = DESCRIPTOR.message_types_by_name['ListProtocolGroupIdsResponse']
_BEGINHARDWARECHECKREQUEST = DESCRIPTOR.message_types_by_name['BeginHardwareCheckRequest']
_BEGINHARDWARECHECKRESPONSE = DESCRIPTOR.message_types_by_name['BeginHardwareCheckResponse']
_BEGINPLATFORMQCREQUEST = DESCRIPTOR.message_types_by_name['BeginPlatformQcRequest']
_BEGINPLATFORMQCRESPONSE = DESCRIPTOR.message_types_by_name['BeginPlatformQcResponse']
_BEGINPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['BeginProtocolRequest']
_BEGINPROTOCOLREQUEST_SETTINGSENTRY = _BEGINPROTOCOLREQUEST.nested_types_by_name['SettingsEntry']
_BEGINPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['BeginProtocolResponse']
_SETPLATFORMQCRESULTREQUEST = DESCRIPTOR.message_types_by_name['SetPlatformQcResultRequest']
_SETPLATFORMQCRESULTRESPONSE = DESCRIPTOR.message_types_by_name['SetPlatformQcResultResponse']
_ASSOCIATEPOSTPROCESSINGANALYSISREQUEST = DESCRIPTOR.message_types_by_name['AssociatePostProcessingAnalysisRequest']
_ASSOCIATEPOSTPROCESSINGANALYSISRESPONSE = DESCRIPTOR.message_types_by_name['AssociatePostProcessingAnalysisResponse']
_CLEARPROTOCOLHISTORYDATAREQUEST = DESCRIPTOR.message_types_by_name['ClearProtocolHistoryDataRequest']
_CLEARPROTOCOLHISTORYDATARESPONSE = DESCRIPTOR.message_types_by_name['ClearProtocolHistoryDataResponse']
_PROTOCOLPHASEMANAGEMENTREQUEST = DESCRIPTOR.message_types_by_name['ProtocolPhaseManagementRequest']
_PROTOCOLPHASEMANAGEMENTREQUEST_CAPABILITIES = _PROTOCOLPHASEMANAGEMENTREQUEST.nested_types_by_name['Capabilities']
_PROTOCOLPHASEMANAGEMENTRESPONSE = DESCRIPTOR.message_types_by_name['ProtocolPhaseManagementResponse']
_GENERATERUNREPORTREQUEST = DESCRIPTOR.message_types_by_name['GenerateRunReportRequest']
_GENERATERUNREPORTRESPONSE = DESCRIPTOR.message_types_by_name['GenerateRunReportResponse']
_BARCODEUSERDATA_SAMPLETYPE = _BARCODEUSERDATA.enum_types_by_name['SampleType']
_WAITFORFINISHEDREQUEST_NOTIFICATIONSTATE = _WAITFORFINISHEDREQUEST.enum_types_by_name['NotificationState']
BarcodeUserData = _reflection.GeneratedProtocolMessageType('BarcodeUserData', (_message.Message,), {
  'DESCRIPTOR' : _BARCODEUSERDATA,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      barcode_name:
          Barcode name the user data applies to, eg: "barcode02".   Acts
          as the external barcode name `barcode_name_internal` is  also
          set for dual barcoding   Acts as the rapid barcode name in
          lampore barcoding if `lamp_barcode_id` is set
      barcode_name_internal:
          The internal barcode name if using dual barcode
      lamp_barcode_id:
          Lamp barcode id the user data applies to, eg: "FIP04"
      alias:
          User defined string alias for the barcode.
      type:
          Sample type grouping for the barcode.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BarcodeUserData)
  })
_sym_db.RegisterMessage(BarcodeUserData)

KitInfo = _reflection.GeneratedProtocolMessageType('KitInfo', (_message.Message,), {
  'DESCRIPTOR' : _KITINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      sequencing_kit:
          The sequencing kit used to select the protocol e.g. "SQK-
          LSK108"
      barcode_expansion_kits:
          The expansion barcoding kits that the protocol supports e.g.
          "EXP-NBD104"
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.KitInfo)
  })
_sym_db.RegisterMessage(KitInfo)

ProtocolRunUserInfo = _reflection.GeneratedProtocolMessageType('ProtocolRunUserInfo', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOLRUNUSERINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      protocol_group_id:
          The group which the experiment should be held in.  note: This
          value could be unset if a user did not specify a group_id when
          starting the protocol.
      sample_id:
          sample_id created by the user
      barcode_user_info:
          User supplied info for barcodes
      user_specified_flow_cell_id:
          user_specified_flow_cell_id created by the user
      user_specified_product_code:
          user_specified_product_code created by the user
      kit_info:
          Kit information the user requested
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolRunUserInfo)
  })
_sym_db.RegisterMessage(ProtocolRunUserInfo)

OffloadLocationInfo = _reflection.GeneratedProtocolMessageType('OffloadLocationInfo', (_message.Message,), {
  'DESCRIPTOR' : _OFFLOADLOCATIONINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      offload_location_ids:
          Data offload locations to use to store protocol data,
          specified using their `location_id`.  Valid `location_id`s can
          be retrieved using
          mooneye.offload_manager.list_offload_locations()  If any
          `offload_location_ids` are specified, then:   - Data is not
          stored locally   - `offload_location_path` must NOT be set (or
          must be set to an empty value)      - The
          `offload_location_ids` indicate that data should be offloaded,
          rather than        stored locally; the `offload_location_path`
          is used to set a local storage location.      - If both are
          set, an error is returned  This requires a running instance of
          Mooneye  Since 5.0.
      offload_location_path:
          Local, e.g., internal / external drive, paths to where the
          protocol output will be stored.  This setting overrides the
          default output locations (as set through configuration files
          and/or the instance service).  If `offload_location_path` is
          set to a non-empty value, then:  -  `offload_location_ids`
          MUST be empty      - The `offload_location_ids` indicate that
          data should be offloaded, rather than        stored locally;
          the `offload_location_path` is used to set a local storage
          location.      - If both are set, an error is returned  This
          does not require a running instance of Mooneye  Since 5.0
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.OffloadLocationInfo)
  })
_sym_db.RegisterMessage(OffloadLocationInfo)

StartProtocolRequest = _reflection.GeneratedProtocolMessageType('StartProtocolRequest', (_message.Message,), {
  'DESCRIPTOR' : _STARTPROTOCOLREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      identifier:
          The identifier of the protocol, as provided by
          list_protocols().
      args:
          The arguments to pass to the protocol.
      user_info:
          User input describing the protocol.
      offload_location_info:
          Information about data offload locations to use to store data
          Since 5.0.
      target_run_until_criteria:
          Initial Target Run-Until Criteria to use when starting an
          acquisition for this protocol. These can be updated during the
          acquisition using the Run-Until API.  Since 5.3
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.StartProtocolRequest)
  })
_sym_db.RegisterMessage(StartProtocolRequest)

StartProtocolResponse = _reflection.GeneratedProtocolMessageType('StartProtocolResponse', (_message.Message,), {
  'DESCRIPTOR' : _STARTPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          UUID generated when the protocol is started, to uniquely
          represent this protocol instance
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.StartProtocolResponse)
  })
_sym_db.RegisterMessage(StartProtocolResponse)

StopProtocolRequest = _reflection.GeneratedProtocolMessageType('StopProtocolRequest', (_message.Message,), {
  'DESCRIPTOR' : _STOPPROTOCOLREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      data_action_on_stop:
          Specify how any running acquisition should be handled when
          stopping the protocol.  Protocol state will enter
          PROTOCOL_WAITING_FOR_ACQUISITION whilst any running
          acquisition is finished.  If a script ends on its own any
          analysis that was started is stopped, and it is allowed to
          catchup. If the caller wants to end catchup they can call
          stop_protocol to end catchup.  Since 1.15
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.StopProtocolRequest)
  })
_sym_db.RegisterMessage(StopProtocolRequest)

StopProtocolResponse = _reflection.GeneratedProtocolMessageType('StopProtocolResponse', (_message.Message,), {
  'DESCRIPTOR' : _STOPPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.StopProtocolResponse)
  })
_sym_db.RegisterMessage(StopProtocolResponse)

PauseProtocolRequest = _reflection.GeneratedProtocolMessageType('PauseProtocolRequest', (_message.Message,), {
  'DESCRIPTOR' : _PAUSEPROTOCOLREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.PauseProtocolRequest)
  })
_sym_db.RegisterMessage(PauseProtocolRequest)

PauseProtocolResponse = _reflection.GeneratedProtocolMessageType('PauseProtocolResponse', (_message.Message,), {
  'DESCRIPTOR' : _PAUSEPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.PauseProtocolResponse)
  })
_sym_db.RegisterMessage(PauseProtocolResponse)

ResumeProtocolRequest = _reflection.GeneratedProtocolMessageType('ResumeProtocolRequest', (_message.Message,), {
  'DESCRIPTOR' : _RESUMEPROTOCOLREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ResumeProtocolRequest)
  })
_sym_db.RegisterMessage(ResumeProtocolRequest)

ResumeProtocolResponse = _reflection.GeneratedProtocolMessageType('ResumeProtocolResponse', (_message.Message,), {
  'DESCRIPTOR' : _RESUMEPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ResumeProtocolResponse)
  })
_sym_db.RegisterMessage(ResumeProtocolResponse)

TriggerMuxScanRequest = _reflection.GeneratedProtocolMessageType('TriggerMuxScanRequest', (_message.Message,), {
  'DESCRIPTOR' : _TRIGGERMUXSCANREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.TriggerMuxScanRequest)
  })
_sym_db.RegisterMessage(TriggerMuxScanRequest)

TriggerMuxScanResponse = _reflection.GeneratedProtocolMessageType('TriggerMuxScanResponse', (_message.Message,), {
  'DESCRIPTOR' : _TRIGGERMUXSCANRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.TriggerMuxScanResponse)
  })
_sym_db.RegisterMessage(TriggerMuxScanResponse)

ListProtocolsRequest = _reflection.GeneratedProtocolMessageType('ListProtocolsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLSREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      force_reload:
          If this is false, then will try to use the cached value of the
          protocol list where possible (still subject to changes in flow
          cell). If this is true, then will force a reload of the
          protocol list  Defaults to false
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolsRequest)
  })
_sym_db.RegisterMessage(ListProtocolsRequest)

ProtocolInfo = _reflection.GeneratedProtocolMessageType('ProtocolInfo', (_message.Message,), {

  'TagValue' : _reflection.GeneratedProtocolMessageType('TagValue', (_message.Message,), {
    'DESCRIPTOR' : _PROTOCOLINFO_TAGVALUE,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo.TagValue)
    })
  ,

  'TagExtractionResult' : _reflection.GeneratedProtocolMessageType('TagExtractionResult', (_message.Message,), {
    'DESCRIPTOR' : _PROTOCOLINFO_TAGEXTRACTIONRESULT,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
    })
  ,

  'TagsEntry' : _reflection.GeneratedProtocolMessageType('TagsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PROTOCOLINFO_TAGSENTRY,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo.TagsEntry)
    })
  ,
  'DESCRIPTOR' : _PROTOCOLINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo)
  })
_sym_db.RegisterMessage(ProtocolInfo)
_sym_db.RegisterMessage(ProtocolInfo.TagValue)
_sym_db.RegisterMessage(ProtocolInfo.TagExtractionResult)
_sym_db.RegisterMessage(ProtocolInfo.TagsEntry)

ListProtocolsResponse = _reflection.GeneratedProtocolMessageType('ListProtocolsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLSRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolsResponse)
  })
_sym_db.RegisterMessage(ListProtocolsResponse)

WaitForFinishedRequest = _reflection.GeneratedProtocolMessageType('WaitForFinishedRequest', (_message.Message,), {
  'DESCRIPTOR' : _WAITFORFINISHEDREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          Only consider a specific protocol run.
      state:
          Control what to wait for.  Specifying
          NOTIFY_BEFORE_TERMINATION allows a caller to be notified the
          script will be ended _soon_, and do final work to end cleanly.
          Since 1.11
      timeout:
          Timeout to wait for finished, if the timeout expires before
          the protocol is complete (in the state requested) then the
          response returns.  By default the timeout will wait forever.
          Since 1.15
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.WaitForFinishedRequest)
  })
_sym_db.RegisterMessage(WaitForFinishedRequest)

GetRunInfoRequest = _reflection.GeneratedProtocolMessageType('GetRunInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETRUNINFOREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          The protocol run to get information about.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetRunInfoRequest)
  })
_sym_db.RegisterMessage(GetRunInfoRequest)

Epi2meWorkflowReference = _reflection.GeneratedProtocolMessageType('Epi2meWorkflowReference', (_message.Message,), {
  'DESCRIPTOR' : _EPI2MEWORKFLOWREFERENCE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      id:
          The unique identifier for a workflow ( unique to a specific
          instance of epi2me )
      url:
          URL that links to the workflow report. Syntax for a local
          workflow: file:// otherwise: http(s)://
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.Epi2meWorkflowReference)
  })
_sym_db.RegisterMessage(Epi2meWorkflowReference)

AssociatedPostProcessingAnalysis = _reflection.GeneratedProtocolMessageType('AssociatedPostProcessingAnalysis', (_message.Message,), {
  'DESCRIPTOR' : _ASSOCIATEDPOSTPROCESSINGANALYSIS,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      started_id:
          Id of analysis if this has been triggered (otherwise empty).
      start_request:
          Start request for analysis
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  })
_sym_db.RegisterMessage(AssociatedPostProcessingAnalysis)

PlatformQcResult = _reflection.GeneratedProtocolMessageType('PlatformQcResult', (_message.Message,), {
  'DESCRIPTOR' : _PLATFORMQCRESULT,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      flow_cell_id:
          The flow cell id that the pqc was performed for
      passed:
          Whether the flow cell passed the platform qc check
      total_pore_count:
          Total number of pores that were found on the flow cell, across
          all muxes.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.PlatformQcResult)
  })
_sym_db.RegisterMessage(PlatformQcResult)

ExternalOffload = _reflection.GeneratedProtocolMessageType('ExternalOffload', (_message.Message,), {
  'DESCRIPTOR' : _EXTERNALOFFLOAD,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      offload_ids:
          The `id`s associated with active external data offloads
          associated with the protocol The offload status can be queried
          using `mooneye.offload_manager.watch_offloads()``
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ExternalOffload)
  })
_sym_db.RegisterMessage(ExternalOffload)

ProtocolRunInfo = _reflection.GeneratedProtocolMessageType('ProtocolRunInfo', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOLRUNINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          The unique identifier assigned to this run.  This is
          guaranteed to be made of ASCII characters, and at most 40
          characters. It is globally unique across all protocols runs on
          all MinKNOW instances.
      protocol_id:
          The identifier of the protocol, as passed to start_protocol().
      args:
          The arguments passed to start_protocol().
      output_path:
          Output location for protocol data (eg. reads).  Since 1.16.
      state:
          Indicates the current state of the protocol run.
      phase:
          The phase of the protocol.  This is the state reported by the
          protocol. If the protocol has not reported any state, it will
          be PHASE_UNKNOWN. Completed protocols also report
          PHASE_UNKNOWN.  Note that clients should handle unexpected
          values of this field gracefully. This can happen if new phases
          are added but the client is still using an older version of
          the API specification.  Since 4.4.
      last_phase_change:
          The last time the phase changed.  This can be used to
          determine how long the protocol has been in the current phase.
          NB: This will not be set if the phase is PHASE_UNKNOWN.  Since
          4.4.
      can_pause:
          Whether the protocol can be paused.  Not all protocols can be
          paused, and cannot be paused in all phases.  Note that if this
          is true and the phase is PHASE_PAUSING or PHASE_PAUSED,
          pausing will not actually do anything.  Since 4.4.
      can_trigger_mux_scan:
          Whether a mux scan can be triggered for the protocol.  Since
          4.4.
      start_time:
          When the protocol was started (UTC).
      script_end_time:
          When the protocol script terminated (UTC).  Unset if the
          protocol script is still running.  Note that the protocol may
          still run until final acquisiton completes.
      end_time:
          When the protocol terminated (UTC), indicating both the
          protocol script and the final acquisition were completed.
          Unset if the protocol is still running.
      acquisition_run_ids:
          A list of acquisition periods started whilst this protocol was
          running.
      user_info:
          User specified information associated with the protocol at
          start time.  Since 1.11.
      epi2me_workflows:
          List of workflows from epi2me associated with this protocol
          Since 1.15.
      device:
          Information about the device a protocol was started with
          Since 3.4
      flow_cell:
          Information about the flow cell a protocol was started with
          Since 3.4
      meta_info:
          Meta-info about the protocol  Since 3.8
      associated_post_processing_analysis:
          List of scheduled post processing analysis tasks
      pqc_result:
          Platform QC result. Set by bream by calling
          `set_platform_qc_result()`.  Possible to not be set (e.g. not
          a pqc run)
      external_offload:
          Contains information about external data offloads associated
          with this protocol  Since 5.0
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolRunInfo)
  })
_sym_db.RegisterMessage(ProtocolRunInfo)

FilteringInfo = _reflection.GeneratedProtocolMessageType('FilteringInfo', (_message.Message,), {

  'PlatformQcFilter' : _reflection.GeneratedProtocolMessageType('PlatformQcFilter', (_message.Message,), {
    'DESCRIPTOR' : _FILTERINGINFO_PLATFORMQCFILTER,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
    })
  ,
  'DESCRIPTOR' : _FILTERINGINFO,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      pqc_filter:
          Filter by runs that have platform QC results  Just
          initialising this message is enough to filter out runs with
          platform QC results from ones that don't  Further filtering on
          the platform QC results can be applied by using the fields
          within PlatformQcFilter
      protocol_group_id:
          Filter runs by a specific protocol_group_id
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.FilteringInfo)
  })
_sym_db.RegisterMessage(FilteringInfo)
_sym_db.RegisterMessage(FilteringInfo.PlatformQcFilter)

ListProtocolRunsRequest = _reflection.GeneratedProtocolMessageType('ListProtocolRunsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLRUNSREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolRunsRequest)
  })
_sym_db.RegisterMessage(ListProtocolRunsRequest)

ListProtocolRunsResponse = _reflection.GeneratedProtocolMessageType('ListProtocolRunsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLRUNSRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolRunsResponse)
  })
_sym_db.RegisterMessage(ListProtocolRunsResponse)

GetCurrentProtocolRunRequest = _reflection.GeneratedProtocolMessageType('GetCurrentProtocolRunRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETCURRENTPROTOCOLRUNREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetCurrentProtocolRunRequest)
  })
_sym_db.RegisterMessage(GetCurrentProtocolRunRequest)

GetCurrentProtocolRunResponse = _reflection.GeneratedProtocolMessageType('GetCurrentProtocolRunResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETCURRENTPROTOCOLRUNRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetCurrentProtocolRunResponse)
  })
_sym_db.RegisterMessage(GetCurrentProtocolRunResponse)

WatchCurrentProtocolRunRequest = _reflection.GeneratedProtocolMessageType('WatchCurrentProtocolRunRequest', (_message.Message,), {
  'DESCRIPTOR' : _WATCHCURRENTPROTOCOLRUNREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.WatchCurrentProtocolRunRequest)
  })
_sym_db.RegisterMessage(WatchCurrentProtocolRunRequest)

GetContextInfoRequest = _reflection.GeneratedProtocolMessageType('GetContextInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETCONTEXTINFOREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetContextInfoRequest)
  })
_sym_db.RegisterMessage(GetContextInfoRequest)

GetContextInfoResponse = _reflection.GeneratedProtocolMessageType('GetContextInfoResponse', (_message.Message,), {

  'ContextInfoEntry' : _reflection.GeneratedProtocolMessageType('ContextInfoEntry', (_message.Message,), {
    'DESCRIPTOR' : _GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry)
    })
  ,
  'DESCRIPTOR' : _GETCONTEXTINFORESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetContextInfoResponse)
  })
_sym_db.RegisterMessage(GetContextInfoResponse)
_sym_db.RegisterMessage(GetContextInfoResponse.ContextInfoEntry)

SetContextInfoRequest = _reflection.GeneratedProtocolMessageType('SetContextInfoRequest', (_message.Message,), {

  'ContextInfoEntry' : _reflection.GeneratedProtocolMessageType('ContextInfoEntry', (_message.Message,), {
    'DESCRIPTOR' : _SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry)
    })
  ,
  'DESCRIPTOR' : _SETCONTEXTINFOREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetContextInfoRequest)
  })
_sym_db.RegisterMessage(SetContextInfoRequest)
_sym_db.RegisterMessage(SetContextInfoRequest.ContextInfoEntry)

SetContextInfoResponse = _reflection.GeneratedProtocolMessageType('SetContextInfoResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETCONTEXTINFORESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetContextInfoResponse)
  })
_sym_db.RegisterMessage(SetContextInfoResponse)

GetProtocolPurposeRequest = _reflection.GeneratedProtocolMessageType('GetProtocolPurposeRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETPROTOCOLPURPOSEREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetProtocolPurposeRequest)
  })
_sym_db.RegisterMessage(GetProtocolPurposeRequest)

GetProtocolPurposeResponse = _reflection.GeneratedProtocolMessageType('GetProtocolPurposeResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETPROTOCOLPURPOSERESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GetProtocolPurposeResponse)
  })
_sym_db.RegisterMessage(GetProtocolPurposeResponse)

SetProtocolPurposeRequest = _reflection.GeneratedProtocolMessageType('SetProtocolPurposeRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETPROTOCOLPURPOSEREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetProtocolPurposeRequest)
  })
_sym_db.RegisterMessage(SetProtocolPurposeRequest)

SetProtocolPurposeResponse = _reflection.GeneratedProtocolMessageType('SetProtocolPurposeResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETPROTOCOLPURPOSERESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetProtocolPurposeResponse)
  })
_sym_db.RegisterMessage(SetProtocolPurposeResponse)

AddEpi2meWorkflowRequest = _reflection.GeneratedProtocolMessageType('AddEpi2meWorkflowRequest', (_message.Message,), {
  'DESCRIPTOR' : _ADDEPI2MEWORKFLOWREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.AddEpi2meWorkflowRequest)
  })
_sym_db.RegisterMessage(AddEpi2meWorkflowRequest)

AddEpi2meWorkflowResponse = _reflection.GeneratedProtocolMessageType('AddEpi2meWorkflowResponse', (_message.Message,), {
  'DESCRIPTOR' : _ADDEPI2MEWORKFLOWRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.AddEpi2meWorkflowResponse)
  })
_sym_db.RegisterMessage(AddEpi2meWorkflowResponse)

ListProtocolGroupIdsRequest = _reflection.GeneratedProtocolMessageType('ListProtocolGroupIdsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLGROUPIDSREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolGroupIdsRequest)
  })
_sym_db.RegisterMessage(ListProtocolGroupIdsRequest)

ListProtocolGroupIdsResponse = _reflection.GeneratedProtocolMessageType('ListProtocolGroupIdsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLGROUPIDSRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      protocol_group_ids:
          A list of protocol group ids used in any protocol started on
          this instance of minknow.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolGroupIdsResponse)
  })
_sym_db.RegisterMessage(ListProtocolGroupIdsResponse)

BeginHardwareCheckRequest = _reflection.GeneratedProtocolMessageType('BeginHardwareCheckRequest', (_message.Message,), {
  'DESCRIPTOR' : _BEGINHARDWARECHECKREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginHardwareCheckRequest)
  })
_sym_db.RegisterMessage(BeginHardwareCheckRequest)

BeginHardwareCheckResponse = _reflection.GeneratedProtocolMessageType('BeginHardwareCheckResponse', (_message.Message,), {
  'DESCRIPTOR' : _BEGINHARDWARECHECKRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          UUID generated when the protocol is started, to uniquely
          represent this protocol instance
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginHardwareCheckResponse)
  })
_sym_db.RegisterMessage(BeginHardwareCheckResponse)

BeginPlatformQcRequest = _reflection.GeneratedProtocolMessageType('BeginPlatformQcRequest', (_message.Message,), {
  'DESCRIPTOR' : _BEGINPLATFORMQCREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginPlatformQcRequest)
  })
_sym_db.RegisterMessage(BeginPlatformQcRequest)

BeginPlatformQcResponse = _reflection.GeneratedProtocolMessageType('BeginPlatformQcResponse', (_message.Message,), {
  'DESCRIPTOR' : _BEGINPLATFORMQCRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          UUID generated when the protocol is started, to uniquely
          represent this protocol instance
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginPlatformQcResponse)
  })
_sym_db.RegisterMessage(BeginPlatformQcResponse)

BeginProtocolRequest = _reflection.GeneratedProtocolMessageType('BeginProtocolRequest', (_message.Message,), {

  'SettingsEntry' : _reflection.GeneratedProtocolMessageType('SettingsEntry', (_message.Message,), {
    'DESCRIPTOR' : _BEGINPROTOCOLREQUEST_SETTINGSENTRY,
    '__module__' : 'minknow_api.protocol_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginProtocolRequest.SettingsEntry)
    })
  ,
  'DESCRIPTOR' : _BEGINPROTOCOLREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      identifier:
          Specify the protocol with a string containing all the
          protocol's identifying components, eg:
          "sequencing/sequencing_MIN106_DNA:FLO-MIN106:SQK-RPB004"
      components:
          Specify the protocol providing the identifying components
          individually, all components are optional. Exactly one
          protocol should match the given components otherwise and error
          will be returned
      user_info:
          User info options for the protocol
      offload_location_info:
          Information about data offload locations to use to store data
          Since 5.0.
      target_run_until_criteria:
          Initial Target Run-Until Criteria to use when starting an
          acquisition for this protocol. These can be updated during the
          acquisition using the Run-Until API.  Since 5.3
      settings:
          Any settings changed from the defaults specified in the
          protocol's .toml file.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginProtocolRequest)
  })
_sym_db.RegisterMessage(BeginProtocolRequest)
_sym_db.RegisterMessage(BeginProtocolRequest.SettingsEntry)

BeginProtocolResponse = _reflection.GeneratedProtocolMessageType('BeginProtocolResponse', (_message.Message,), {
  'DESCRIPTOR' : _BEGINPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          UUID generated when the protocol is started, to uniquely
          represent this protocol instance
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginProtocolResponse)
  })
_sym_db.RegisterMessage(BeginProtocolResponse)

SetPlatformQcResultRequest = _reflection.GeneratedProtocolMessageType('SetPlatformQcResultRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETPLATFORMQCRESULTREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      protocol_run_id:
          The protocol_run_id that was given when the pqc run was
          started
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetPlatformQcResultRequest)
  })
_sym_db.RegisterMessage(SetPlatformQcResultRequest)

SetPlatformQcResultResponse = _reflection.GeneratedProtocolMessageType('SetPlatformQcResultResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETPLATFORMQCRESULTRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.SetPlatformQcResultResponse)
  })
_sym_db.RegisterMessage(SetPlatformQcResultResponse)

AssociatePostProcessingAnalysisRequest = _reflection.GeneratedProtocolMessageType('AssociatePostProcessingAnalysisRequest', (_message.Message,), {
  'DESCRIPTOR' : _ASSOCIATEPOSTPROCESSINGANALYSISREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      run_id:
          Protocol id to associate analysis with:
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  })
_sym_db.RegisterMessage(AssociatePostProcessingAnalysisRequest)

AssociatePostProcessingAnalysisResponse = _reflection.GeneratedProtocolMessageType('AssociatePostProcessingAnalysisResponse', (_message.Message,), {
  'DESCRIPTOR' : _ASSOCIATEPOSTPROCESSINGANALYSISRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      id:
          Id of the basecaller.proto post processing task that was
          triggered, if the post processing analysis was executed
          immediately (protocol was finished).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  })
_sym_db.RegisterMessage(AssociatePostProcessingAnalysisResponse)

ClearProtocolHistoryDataRequest = _reflection.GeneratedProtocolMessageType('ClearProtocolHistoryDataRequest', (_message.Message,), {
  'DESCRIPTOR' : _CLEARPROTOCOLHISTORYDATAREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  })
_sym_db.RegisterMessage(ClearProtocolHistoryDataRequest)

ClearProtocolHistoryDataResponse = _reflection.GeneratedProtocolMessageType('ClearProtocolHistoryDataResponse', (_message.Message,), {
  'DESCRIPTOR' : _CLEARPROTOCOLHISTORYDATARESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ClearProtocolHistoryDataResponse)
  })
_sym_db.RegisterMessage(ClearProtocolHistoryDataResponse)

ProtocolPhaseManagementRequest = _reflection.GeneratedProtocolMessageType('ProtocolPhaseManagementRequest', (_message.Message,), {

  'Capabilities' : _reflection.GeneratedProtocolMessageType('Capabilities', (_message.Message,), {
    'DESCRIPTOR' : _PROTOCOLPHASEMANAGEMENTREQUEST_CAPABILITIES,
    '__module__' : 'minknow_api.protocol_pb2'
    ,
    '__doc__': """Attributes:
        can_pause:
            Indicate that the protocol will respond to pause and resume
            requests.
        can_trigger_mux_scan:
            Indicate that the protocol will respond to mux scan requests.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
    })
  ,
  'DESCRIPTOR' : _PROTOCOLPHASEMANAGEMENTREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      set_capabilities:
          Update the set of capabilities (messages that will be
          responded to by the protocol).
      phase:
          Update the protocol phase.  Leave empty (ie: PHASE_UNKNOWN) to
          keep the previous phase.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementRequest)
  })
_sym_db.RegisterMessage(ProtocolPhaseManagementRequest)
_sym_db.RegisterMessage(ProtocolPhaseManagementRequest.Capabilities)

ProtocolPhaseManagementResponse = _reflection.GeneratedProtocolMessageType('ProtocolPhaseManagementResponse', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOLPHASEMANAGEMENTRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      action:
          Requests that the protocol changes phase.  The client should
          never receive an action type (other than possibly ACTION_NONE)
          that it has not explicitly opted into via the
          `ProtocolPhaseManagementRequest.set_capabilities` field.  If
          this is set to ACTION_NONE, the message should be ignored
          (this is for future compatibility).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementResponse)
  })
_sym_db.RegisterMessage(ProtocolPhaseManagementResponse)

GenerateRunReportRequest = _reflection.GeneratedProtocolMessageType('GenerateRunReportRequest', (_message.Message,), {
  'DESCRIPTOR' : _GENERATERUNREPORTREQUEST,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      protocol_run_id:
          The protocol_run_id to generate a report for.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GenerateRunReportRequest)
  })
_sym_db.RegisterMessage(GenerateRunReportRequest)

GenerateRunReportResponse = _reflection.GeneratedProtocolMessageType('GenerateRunReportResponse', (_message.Message,), {
  'DESCRIPTOR' : _GENERATERUNREPORTRESPONSE,
  '__module__' : 'minknow_api.protocol_pb2'
  ,
  '__doc__': """Attributes:
      protocol_run_id:
          Protocol ID the run report is for.
      report_data:
          A section of the run report data (note the api to return this
          data may stream back several sections).
      remaining_length:
          How many further characters of data remain after this message
          (excluding of this message).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.protocol.GenerateRunReportResponse)
  })
_sym_db.RegisterMessage(GenerateRunReportResponse)

_PROTOCOLSERVICE = DESCRIPTOR.services_by_name['ProtocolService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.nanoporetech.minknow_api\242\002\005MKAPI'
  _STARTPROTOCOLREQUEST.fields_by_name['identifier']._options = None
  _STARTPROTOCOLREQUEST.fields_by_name['identifier']._serialized_options = b'\210\265\030\001'
  _PROTOCOLINFO_TAGSENTRY._options = None
  _PROTOCOLINFO_TAGSENTRY._serialized_options = b'8\001'
  _WAITFORFINISHEDREQUEST.fields_by_name['run_id']._options = None
  _WAITFORFINISHEDREQUEST.fields_by_name['run_id']._serialized_options = b'\210\265\030\001'
  _GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY._options = None
  _GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY._serialized_options = b'8\001'
  _SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY._options = None
  _SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY._serialized_options = b'8\001'
  _ADDEPI2MEWORKFLOWREQUEST.fields_by_name['run_id']._options = None
  _ADDEPI2MEWORKFLOWREQUEST.fields_by_name['run_id']._serialized_options = b'\210\265\030\001'
  _ADDEPI2MEWORKFLOWREQUEST.fields_by_name['epi2me_workflow']._options = None
  _ADDEPI2MEWORKFLOWREQUEST.fields_by_name['epi2me_workflow']._serialized_options = b'\210\265\030\001'
  _BEGINPROTOCOLREQUEST_SETTINGSENTRY._options = None
  _BEGINPROTOCOLREQUEST_SETTINGSENTRY._serialized_options = b'8\001'
  _PROTOCOLSERVICE.methods_by_name['pause_protocol']._options = None
  _PROTOCOLSERVICE.methods_by_name['pause_protocol']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['resume_protocol']._options = None
  _PROTOCOLSERVICE.methods_by_name['resume_protocol']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['trigger_mux_scan']._options = None
  _PROTOCOLSERVICE.methods_by_name['trigger_mux_scan']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['wait_for_finished']._options = None
  _PROTOCOLSERVICE.methods_by_name['wait_for_finished']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['get_run_info']._options = None
  _PROTOCOLSERVICE.methods_by_name['get_run_info']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['list_protocol_runs']._options = None
  _PROTOCOLSERVICE.methods_by_name['list_protocol_runs']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['get_current_protocol_run']._options = None
  _PROTOCOLSERVICE.methods_by_name['get_current_protocol_run']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['watch_current_protocol_run']._options = None
  _PROTOCOLSERVICE.methods_by_name['watch_current_protocol_run']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['list_protocols']._options = None
  _PROTOCOLSERVICE.methods_by_name['list_protocols']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['get_context_info']._options = None
  _PROTOCOLSERVICE.methods_by_name['get_context_info']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['set_context_info']._options = None
  _PROTOCOLSERVICE.methods_by_name['set_context_info']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['get_protocol_purpose']._options = None
  _PROTOCOLSERVICE.methods_by_name['get_protocol_purpose']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['set_protocol_purpose']._options = None
  _PROTOCOLSERVICE.methods_by_name['set_protocol_purpose']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['list_protocol_group_ids']._options = None
  _PROTOCOLSERVICE.methods_by_name['list_protocol_group_ids']._serialized_options = b'\220\002\001'
  _PROTOCOLSERVICE.methods_by_name['begin_hardware_check']._options = None
  _PROTOCOLSERVICE.methods_by_name['begin_hardware_check']._serialized_options = b'\230\265\030\001'
  _PROTOCOLSERVICE.methods_by_name['begin_platform_qc']._options = None
  _PROTOCOLSERVICE.methods_by_name['begin_platform_qc']._serialized_options = b'\230\265\030\001'
  _PROTOCOLSERVICE.methods_by_name['begin_protocol']._options = None
  _PROTOCOLSERVICE.methods_by_name['begin_protocol']._serialized_options = b'\230\265\030\001'
  _PROTOCOLSERVICE.methods_by_name['set_platform_qc_result']._options = None
  _PROTOCOLSERVICE.methods_by_name['set_platform_qc_result']._serialized_options = b'\220\002\002'
  _PROTOCOLSERVICE.methods_by_name['generate_run_report']._options = None
  _PROTOCOLSERVICE.methods_by_name['generate_run_report']._serialized_options = b'\220\002\002'
  _PROTOCOLSTATE._serialized_start=6892
  _PROTOCOLSTATE._serialized_end=7335
  _PROTOCOLPHASE._serialized_start=7338
  _PROTOCOLPHASE._serialized_end=7529
  _ACTION._serialized_start=7531
  _ACTION._serialized_end=7622
  _BARCODEUSERDATA._serialized_start=273
  _BARCODEUSERDATA._serialized_end=596
  _BARCODEUSERDATA_SAMPLETYPE._serialized_start=450
  _BARCODEUSERDATA_SAMPLETYPE._serialized_end=596
  _KITINFO._serialized_start=598
  _KITINFO._serialized_end=663
  _PROTOCOLRUNUSERINFO._serialized_start=666
  _PROTOCOLRUNUSERINFO._serialized_end=1042
  _OFFLOADLOCATIONINFO._serialized_start=1044
  _OFFLOADLOCATIONINFO._serialized_end=1126
  _STARTPROTOCOLREQUEST._serialized_start=1129
  _STARTPROTOCOLREQUEST._serialized_end=1411
  _STARTPROTOCOLRESPONSE._serialized_start=1413
  _STARTPROTOCOLRESPONSE._serialized_end=1452
  _STOPPROTOCOLREQUEST._serialized_start=1454
  _STOPPROTOCOLREQUEST._serialized_end=1553
  _STOPPROTOCOLRESPONSE._serialized_start=1555
  _STOPPROTOCOLRESPONSE._serialized_end=1577
  _PAUSEPROTOCOLREQUEST._serialized_start=1579
  _PAUSEPROTOCOLREQUEST._serialized_end=1601
  _PAUSEPROTOCOLRESPONSE._serialized_start=1603
  _PAUSEPROTOCOLRESPONSE._serialized_end=1626
  _RESUMEPROTOCOLREQUEST._serialized_start=1628
  _RESUMEPROTOCOLREQUEST._serialized_end=1651
  _RESUMEPROTOCOLRESPONSE._serialized_start=1653
  _RESUMEPROTOCOLRESPONSE._serialized_end=1677
  _TRIGGERMUXSCANREQUEST._serialized_start=1679
  _TRIGGERMUXSCANREQUEST._serialized_end=1702
  _TRIGGERMUXSCANRESPONSE._serialized_start=1704
  _TRIGGERMUXSCANRESPONSE._serialized_end=1728
  _LISTPROTOCOLSREQUEST._serialized_start=1730
  _LISTPROTOCOLSREQUEST._serialized_end=1774
  _PROTOCOLINFO._serialized_start=1777
  _PROTOCOLINFO._serialized_end=2288
  _PROTOCOLINFO_TAGVALUE._serialized_start=1975
  _PROTOCOLINFO_TAGVALUE._serialized_end=2136
  _PROTOCOLINFO_TAGEXTRACTIONRESULT._serialized_start=2138
  _PROTOCOLINFO_TAGEXTRACTIONRESULT._serialized_end=2198
  _PROTOCOLINFO_TAGSENTRY._serialized_start=2200
  _PROTOCOLINFO_TAGSENTRY._serialized_end=2288
  _LISTPROTOCOLSRESPONSE._serialized_start=2290
  _LISTPROTOCOLSRESPONSE._serialized_end=2368
  _WAITFORFINISHEDREQUEST._serialized_start=2371
  _WAITFORFINISHEDREQUEST._serialized_end=2626
  _WAITFORFINISHEDREQUEST_NOTIFICATIONSTATE._serialized_start=2515
  _WAITFORFINISHEDREQUEST_NOTIFICATIONSTATE._serialized_end=2626
  _GETRUNINFOREQUEST._serialized_start=2628
  _GETRUNINFOREQUEST._serialized_end=2663
  _EPI2MEWORKFLOWREFERENCE._serialized_start=2665
  _EPI2MEWORKFLOWREFERENCE._serialized_end=2715
  _ASSOCIATEDPOSTPROCESSINGANALYSIS._serialized_start=2717
  _ASSOCIATEDPOSTPROCESSINGANALYSIS._serialized_end=2832
  _PLATFORMQCRESULT._serialized_start=2834
  _PLATFORMQCRESULT._serialized_end=2916
  _EXTERNALOFFLOAD._serialized_start=2918
  _EXTERNALOFFLOAD._serialized_end=2956
  _PROTOCOLRUNINFO._serialized_start=2959
  _PROTOCOLRUNINFO._serialized_end=3971
  _FILTERINGINFO._serialized_start=3974
  _FILTERINGINFO._serialized_end=4181
  _FILTERINGINFO_PLATFORMQCFILTER._serialized_start=4097
  _FILTERINGINFO_PLATFORMQCFILTER._serialized_end=4159
  _LISTPROTOCOLRUNSREQUEST._serialized_start=4183
  _LISTPROTOCOLRUNSREQUEST._serialized_end=4266
  _LISTPROTOCOLRUNSRESPONSE._serialized_start=4268
  _LISTPROTOCOLRUNSRESPONSE._serialized_end=4311
  _GETCURRENTPROTOCOLRUNREQUEST._serialized_start=4313
  _GETCURRENTPROTOCOLRUNREQUEST._serialized_end=4343
  _GETCURRENTPROTOCOLRUNRESPONSE._serialized_start=4345
  _GETCURRENTPROTOCOLRUNRESPONSE._serialized_end=4433
  _WATCHCURRENTPROTOCOLRUNREQUEST._serialized_start=4435
  _WATCHCURRENTPROTOCOLRUNREQUEST._serialized_end=4467
  _GETCONTEXTINFOREQUEST._serialized_start=4469
  _GETCONTEXTINFOREQUEST._serialized_end=4492
  _GETCONTEXTINFORESPONSE._serialized_start=4495
  _GETCONTEXTINFORESPONSE._serialized_end=4656
  _GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY._serialized_start=4606
  _GETCONTEXTINFORESPONSE_CONTEXTINFOENTRY._serialized_end=4656
  _SETCONTEXTINFOREQUEST._serialized_start=4659
  _SETCONTEXTINFOREQUEST._serialized_end=4818
  _SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY._serialized_start=4606
  _SETCONTEXTINFOREQUEST_CONTEXTINFOENTRY._serialized_end=4656
  _SETCONTEXTINFORESPONSE._serialized_start=4820
  _SETCONTEXTINFORESPONSE._serialized_end=4844
  _GETPROTOCOLPURPOSEREQUEST._serialized_start=4846
  _GETPROTOCOLPURPOSEREQUEST._serialized_end=4873
  _GETPROTOCOLPURPOSERESPONSE._serialized_start=4875
  _GETPROTOCOLPURPOSERESPONSE._serialized_end=4920
  _SETPROTOCOLPURPOSEREQUEST._serialized_start=4922
  _SETPROTOCOLPURPOSEREQUEST._serialized_end=4966
  _SETPROTOCOLPURPOSERESPONSE._serialized_start=4968
  _SETPROTOCOLPURPOSERESPONSE._serialized_end=4996
  _ADDEPI2MEWORKFLOWREQUEST._serialized_start=4998
  _ADDEPI2MEWORKFLOWREQUEST._serialized_end=5124
  _ADDEPI2MEWORKFLOWRESPONSE._serialized_start=5126
  _ADDEPI2MEWORKFLOWRESPONSE._serialized_end=5153
  _LISTPROTOCOLGROUPIDSREQUEST._serialized_start=5155
  _LISTPROTOCOLGROUPIDSREQUEST._serialized_end=5184
  _LISTPROTOCOLGROUPIDSRESPONSE._serialized_start=5186
  _LISTPROTOCOLGROUPIDSRESPONSE._serialized_end=5244
  _BEGINHARDWARECHECKREQUEST._serialized_start=5246
  _BEGINHARDWARECHECKREQUEST._serialized_end=5273
  _BEGINHARDWARECHECKRESPONSE._serialized_start=5275
  _BEGINHARDWARECHECKRESPONSE._serialized_end=5319
  _BEGINPLATFORMQCREQUEST._serialized_start=5321
  _BEGINPLATFORMQCREQUEST._serialized_end=5345
  _BEGINPLATFORMQCRESPONSE._serialized_start=5347
  _BEGINPLATFORMQCRESPONSE._serialized_end=5388
  _BEGINPROTOCOLREQUEST._serialized_start=5391
  _BEGINPROTOCOLREQUEST._serialized_end=5955
  _BEGINPROTOCOLREQUEST_SETTINGSENTRY._serialized_start=5816
  _BEGINPROTOCOLREQUEST_SETTINGSENTRY._serialized_end=5932
  _BEGINPROTOCOLRESPONSE._serialized_start=5957
  _BEGINPROTOCOLRESPONSE._serialized_end=5996
  _SETPLATFORMQCRESULTREQUEST._serialized_start=5998
  _SETPLATFORMQCRESULTREQUEST._serialized_end=6111
  _SETPLATFORMQCRESULTRESPONSE._serialized_start=6113
  _SETPLATFORMQCRESULTRESPONSE._serialized_end=6142
  _ASSOCIATEPOSTPROCESSINGANALYSISREQUEST._serialized_start=6144
  _ASSOCIATEPOSTPROCESSINGANALYSISREQUEST._serialized_end=6261
  _ASSOCIATEPOSTPROCESSINGANALYSISRESPONSE._serialized_start=6263
  _ASSOCIATEPOSTPROCESSINGANALYSISRESPONSE._serialized_end=6316
  _CLEARPROTOCOLHISTORYDATAREQUEST._serialized_start=6318
  _CLEARPROTOCOLHISTORYDATAREQUEST._serialized_end=6373
  _CLEARPROTOCOLHISTORYDATARESPONSE._serialized_start=6375
  _CLEARPROTOCOLHISTORYDATARESPONSE._serialized_end=6409
  _PROTOCOLPHASEMANAGEMENTREQUEST._serialized_start=6412
  _PROTOCOLPHASEMANAGEMENTREQUEST._serialized_end=6654
  _PROTOCOLPHASEMANAGEMENTREQUEST_CAPABILITIES._serialized_start=6591
  _PROTOCOLPHASEMANAGEMENTREQUEST_CAPABILITIES._serialized_end=6654
  _PROTOCOLPHASEMANAGEMENTRESPONSE._serialized_start=6656
  _PROTOCOLPHASEMANAGEMENTRESPONSE._serialized_end=6735
  _GENERATERUNREPORTREQUEST._serialized_start=6737
  _GENERATERUNREPORTREQUEST._serialized_end=6788
  _GENERATERUNREPORTRESPONSE._serialized_start=6790
  _GENERATERUNREPORTRESPONSE._serialized_end=6889
  _PROTOCOLSERVICE._serialized_start=7625
  _PROTOCOLSERVICE._serialized_end=10738
# @@protoc_insertion_point(module_scope)
