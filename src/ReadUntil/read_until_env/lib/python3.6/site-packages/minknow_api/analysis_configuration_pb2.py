# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: minknow_api/analysis_configuration.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
from minknow_api import rpc_options_pb2 as minknow__api_dot_rpc__options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n(minknow_api/analysis_configuration.proto\x12\"minknow_api.analysis_configuration\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dminknow_api/rpc_options.proto\"\xca\x01\n\x0e\x45ventDetection\x12\x13\n\x0bwindow_size\x18\x03 \x01(\r\x12\x11\n\tthreshold\x18\x05 \x01(\x01\x12\x13\n\x0bpeak_height\x18\t \x01(\x01\x12:\n\x14\x65vents_to_base_ratio\x18\x10 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x1c\n\x14\x62reak_on_mux_changes\x18\x11 \x01(\x08\x12!\n\x19max_mux_change_back_shift\x18\x12 \x01(\r\"\xf0\x04\n\x13ReadDetectionParams\x12W\n\x04mode\x18\x01 \x01(\x0e\x32I.minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode\x12\x1a\n\x12minimum_delta_mean\x18\x02 \x01(\x01\x12\x11\n\tlook_back\x18\x03 \x01(\r\x12>\n\x18\x62reak_reads_after_events\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12?\n\x19\x62reak_reads_after_seconds\x18\x05 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\"\n\x1a\x62reak_reads_on_mux_changes\x18\x06 \x01(\x08\x12\x33\n\ropen_pore_min\x18\x07 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x33\n\ropen_pore_max\x18\x08 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x37\n\x11open_pore_default\x18\t \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12@\n\x1aopen_pore_seconds_required\x18\n \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\"G\n\x11ReadDetectionMode\x12\x08\n\x04none\x10\x00\x12\x0e\n\ntransition\x10\x01\x12\x0c\n\x08lookback\x10\x02\x12\n\n\x06minmax\x10\x03\"q\n\x0bReadFilters\x12\x17\n\x0fread_length_min\x18\x01 \x01(\r\x12\x17\n\x0fread_length_max\x18\x02 \x01(\r\x12\x17\n\x0f\x65vent_count_min\x18\x03 \x01(\r\x12\x17\n\x0f\x65vent_count_max\x18\x04 \x01(\r\"\xc9\x04\n\x18ReadClassificationParams\x12Z\n\rscheme_module\x18\x01 \x01(\x0e\x32\x43.minknow_api.analysis_configuration.ReadClassificationParams.Scheme\x12\x35\n\x0fmax_sample_size\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12 \n\x18selected_classifications\x18\x03 \x03(\t\x12!\n\x19open_pore_classifications\x18\x06 \x03(\t\x12;\n\x15open_pore_ewma_weight\x18\x07 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12J\n$open_pore_ignore_after_reset_seconds\x18\x08 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x1f\n\x17\x63lassification_strategy\x18\x04 \x01(\t\x12[\n\nparameters\x18\x05 \x01(\x0b\x32G.minknow_api.analysis_configuration.ReadClassificationParams.Parameters\x1a.\n\nParameters\x12 \n\x18rules_in_execution_order\x18\x02 \x03(\t\"\x1e\n\x06Scheme\x12\x08\n\x04none\x10\x00\x12\n\n\x06parsed\x10\x01\"\xdd\x07\n\rChannelStates\x12\x46\n\x05group\x18\x02 \x01(\x0b\x32\x37.minknow_api.analysis_configuration.ChannelStates.Group\x12\x13\n\x0b\x64\x65scription\x18\x05 \x01(\t\x12\x46\n\x05logic\x18\x03 \x01(\x0b\x32\x37.minknow_api.analysis_configuration.ChannelStates.Logic\x12\x46\n\x05style\x18\x04 \x01(\x0b\x32\x37.minknow_api.analysis_configuration.ChannelStates.Style\x1a\xaa\x04\n\x05Logic\x12\x10\n\x08\x63riteria\x18\x01 \x01(\t\x12\x0c\n\x04rank\x18\x03 \x01(\x05\x12\x0f\n\x07pattern\x18\x04 \x01(\t\x12\x16\n\x0e\x63lassification\x18\x05 \x01(\t\x12N\n\x06ranges\x18\x06 \x01(\x0b\x32>.minknow_api.analysis_configuration.ChannelStates.Logic.Ranges\x12T\n\tbehaviour\x18\x07 \x01(\x0b\x32\x41.minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour\x1a\xa4\x01\n\tBehaviour\x12\x1b\n\x13reset_on_mux_change\x18\x01 \x01(\x05\x12\x1c\n\x14reset_on_well_change\x18\x02 \x01(\x05\x12\r\n\x05latch\x18\x03 \x01(\x05\x12%\n\x1dreset_on_effective_mux_change\x18\x04 \x01(\x05\x12&\n\x1ereset_on_effective_well_change\x18\x05 \x01(\x05\x1a\x8a\x01\n\x06Ranges\x12S\n\x05range\x18\x01 \x01(\x0b\x32\x44.minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range\x1a+\n\x05Range\x12\x10\n\x08lower_pa\x18\x01 \x01(\x05\x12\x10\n\x08upper_pa\x18\x02 \x01(\x05\x1aS\n\x05Style\x12+\n\x05order\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12\r\n\x05label\x18\x02 \x01(\t\x12\x0e\n\x06\x63olour\x18\x03 \x01(\t\x1a]\n\x05Group\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x46\n\x05style\x18\x02 \x01(\x0b\x32\x37.minknow_api.analysis_configuration.ChannelStates.Style\"!\n\x1fGetAnalysisConfigurationRequest\"\x91\x03\n\x11ReadScalingParams\x12\x1a\n\x12quantile_locations\x18\x03 \x03(\x02\x12\x1e\n\x16quantile_weights_shift\x18\x01 \x03(\x02\x12\x1e\n\x16quantile_weights_scale\x18\x02 \x03(\x02\x12\x16\n\x0etracking_alpha\x18\x04 \x01(\x02\x12$\n\x1c\x61lpha_number_estimates_decay\x18\x05 \x01(\x02\x12\x18\n\x10quantile_maxdiff\x18\n \x01(\x02\x12\x1c\n\x14trust_limit_fraction\x18\x06 \x01(\x02\x12\x16\n\x0e\x64iff_threshold\x18\x07 \x01(\x02\x12\x1a\n\x12\x65mission_threshold\x18\x08 \x01(\x02\x12\x17\n\x0f\x64\x61\x63s_breakpoint\x18\t \x01(\x02\x12 \n\x18\x63onductance_factor_scale\x18\x0b \x01(\x02\x12 \n\x18\x63onductance_factor_shift\x18\x0c \x01(\x02\x12\x19\n\x11q90_q10_to_normal\x18\r \x01(\x02\"\xac\x04\n\x15\x41nalysisConfiguration\x12K\n\x0f\x65vent_detection\x18\x01 \x01(\x0b\x32\x32.minknow_api.analysis_configuration.EventDetection\x12O\n\x0eread_detection\x18\x02 \x01(\x0b\x32\x37.minknow_api.analysis_configuration.ReadDetectionParams\x12Y\n\x13read_classification\x18\x04 \x01(\x0b\x32<.minknow_api.analysis_configuration.ReadClassificationParams\x12\x64\n\x0e\x63hannel_states\x18\x07 \x03(\x0b\x32L.minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry\x12K\n\x0cread_scaling\x18\x08 \x01(\x0b\x32\x35.minknow_api.analysis_configuration.ReadScalingParams\x1ag\n\x12\x43hannelStatesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12@\n\x05value\x18\x02 \x01(\x0b\x32\x31.minknow_api.analysis_configuration.ChannelStates:\x02\x38\x01\"\"\n SetAnalysisConfigurationResponse\"#\n!ResetAnalysisConfigurationRequest\"$\n\"ResetAnalysisConfigurationResponse\"6\n\x1eSetAnalysisEnabledStateRequest\x12\x14\n\x06\x65nable\x18\x01 \x01(\x08\x42\x04\x88\xb5\x18\x01\"!\n\x1fSetAnalysisEnabledStateResponse\"\x1d\n\x1bGetChannelStatesDescRequest\"\x99\x04\n\x1cGetChannelStatesDescResponse\x12V\n\x06groups\x18\x01 \x03(\x0b\x32\x46.minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group\x1a;\n\x05Style\x12\r\n\x05label\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x0e\n\x06\x63olour\x18\x03 \x01(\t\x1a\x95\x01\n\x0c\x43hannelState\x12\n\n\x02id\x18\x01 \x01(\r\x12\x0c\n\x04name\x18\x02 \x01(\t\x12U\n\x05style\x18\x03 \x01(\x0b\x32\x46.minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style\x12\x14\n\x0cglobal_order\x18\x04 \x01(\r\x1a\xcb\x01\n\x05Group\x12\x0c\n\x04name\x18\x01 \x01(\t\x12U\n\x05style\x18\x02 \x01(\x0b\x32\x46.minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style\x12]\n\x06states\x18\x03 \x03(\x0b\x32M.minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState\"\x13\n\x11GetSummaryRequest\"K\n\x12GetSummaryResponse\x12\x18\n\x10\x61nalysis_enabled\x18\x01 \x01(\x08\x12\x1b\n\x13\x62\x61secalling_enabled\x18\x02 \x01(\x08\"\xdd\x02\n\x16\x42\x61rcodingConfiguration\x12\x16\n\x0e\x62\x61rcoding_kits\x18\x01 \x03(\t\x12\x15\n\rtrim_barcodes\x18\x02 \x01(\x08\x12\"\n\x1arequire_barcodes_both_ends\x18\x03 \x01(\x08\x12\"\n\x1a\x64\x65tect_mid_strand_barcodes\x18\x04 \x01(\x08\x12.\n\tmin_score\x18\x05 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x33\n\x0emin_score_rear\x18\x06 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x32\n\rmin_score_mid\x18\x07 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x33\n\x0emin_score_mask\x18\x08 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\"\xae\x01\n\x16\x41lignmentConfiguration\x12\x17\n\x0freference_files\x18\x01 \x03(\t\x12\x10\n\x08\x62\x65\x64_file\x18\x02 \x01(\t\x12\x35\n\x10minimum_coverage\x18\x03 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x32\n*aggregate_statistics_for_multiple_bed_hits\x18\x04 \x01(\x08\"\xcc\x01\n\x11LampConfiguration\x12\x10\n\x08lamp_kit\x18\x01 \x01(\t\x12\x37\n\x12min_score_barcodes\x18\x02 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x34\n\x0fmin_score_masks\x18\x03 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x12\x36\n\x11min_score_targets\x18\x04 \x01(\x0b\x32\x1b.google.protobuf.FloatValue\"\xfa\x08\n\x17\x42\x61secallerConfiguration\x12\x0e\n\x06\x65nable\x18\x02 \x01(\x08\x12\x17\n\x0f\x63onfig_filename\x18\x01 \x01(\t\x12\x14\n\x0c\x61lign_filter\x18\n \x01(\x08\x12\x61\n\x0eread_filtering\x18\x03 \x01(\x0b\x32I.minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering\x12[\n\x17\x62\x61rcoding_configuration\x18\x04 \x01(\x0b\x32:.minknow_api.analysis_configuration.BarcodingConfiguration\x12\x65\n\x10target_filtering\x18\x05 \x01(\x0b\x32K.minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering\x12[\n\x17\x61lignment_configuration\x18\x06 \x01(\x0b\x32:.minknow_api.analysis_configuration.AlignmentConfiguration\x12Q\n\x12lamp_configuration\x18\x07 \x01(\x0b\x32\x35.minknow_api.analysis_configuration.LampConfiguration\x12\x1d\n\x15\x65nable_read_splitting\x18\x08 \x01(\x08\x12=\n\x18min_score_read_splitting\x18\t \x01(\x0b\x32\x1b.google.protobuf.FloatValue\x1a\xc2\x02\n\rReadFiltering\x12\x30\n\nmin_qscore\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x31\n\x0bmin_samples\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12\x31\n\x0bmax_samples\x18\x03 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12/\n\tmin_bases\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12/\n\tmax_bases\x18\x05 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12\x37\n\x11max_failed_chunks\x18\x06 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x1a\xa5\x01\n\x0fTargetFiltering\x12\x30\n\nmin_qscore\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12/\n\tmin_bases\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\x12/\n\tmax_bases\x18\x03 \x01(\x0b\x32\x1c.google.protobuf.UInt64Value\"w\n!SetBasecallerConfigurationRequest\x12R\n\x07\x63onfigs\x18\x01 \x01(\x0b\x32;.minknow_api.analysis_configuration.BasecallerConfigurationB\x04\x90\xb5\x18\x01\"$\n\"SetBasecallerConfigurationResponse\"#\n!GetBasecallerConfigurationRequest\"!\n\x1fGetPoreTypeConfigurationRequest\"\xab\x05\n\x15PoreTypeConfiguration\x12\x1a\n\x10global_pore_type\x18\x01 \x01(\tH\x00\x12~\n\x17\x63hannel_well_pore_types\x18\x02 \x01(\x0b\x32[.minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurationsH\x00\x1a,\n\x0b\x43hannelWell\x12\x0f\n\x07\x63hannel\x18\x01 \x01(\r\x12\x0c\n\x04well\x18\x02 \x01(\r\x1a\xb3\x03\n!ChannelWellPoreTypeConfigurations\x12~\n\npore_types\x18\x01 \x03(\x0b\x32j.minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry\x1an\n\x0f\x43hannelWellList\x12[\n\x0c\x63hannel_well\x18\x01 \x03(\x0b\x32\x45.minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell\x1a\x9d\x01\n\x0ePoreTypesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12z\n\x05value\x18\x02 \x01(\x0b\x32k.minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList:\x02\x38\x01\x42\x12\n\x10pore_type_config\"\"\n SetPoreTypeConfigurationResponse\"\x83#\n\x13WriterConfiguration\x12\x62\n\nread_fast5\x18\x02 \x01(\x0b\x32N.minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration\x12\x62\n\nread_fastq\x18\x03 \x01(\x0b\x32N.minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration\x12^\n\x08read_bam\x18\x08 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration\x12`\n\tread_pod5\x18\n \x01(\x0b\x32M.minknow_api.analysis_configuration.WriterConfiguration.ReadPod5Configuration\x12h\n\rread_protobuf\x18\x04 \x01(\x0b\x32Q.minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration\x12r\n\x12sequencing_summary\x18\x05 \x01(\x0b\x32V.minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration\x12W\n\x04\x62ulk\x18\x06 \x01(\x0b\x32I.minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration\x12[\n\x06report\x18\x07 \x01(\x0b\x32K.minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration\x12\x45\n\x0cread_filters\x18\t \x01(\x0b\x32/.minknow_api.analysis_configuration.ReadFilters\x1a\xff\x03\n\x14\x43hannelConfiguration\x12\x16\n\x0c\x61ll_channels\x18\x01 \x01(\x08H\x00\x12u\n\x11specific_channels\x18\x02 \x01(\x0b\x32X.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelListH\x00\x12t\n\x0e\x63hannel_ranges\x18\x03 \x01(\x0b\x32Z.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRangesH\x00\x1a\x1f\n\x0b\x43hannelList\x12\x10\n\x08\x63hannels\x18\x01 \x03(\x05\x1a\xb4\x01\n\rChannelRanges\x12w\n\x06ranges\x18\x01 \x03(\x0b\x32g.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange\x1a*\n\x0c\x43hannelRange\x12\r\n\x05start\x18\x01 \x01(\x05\x12\x0b\n\x03\x65nd\x18\x02 \x01(\x05\x42\n\n\x08\x63hannels\x1a\xc0\x06\n\x16ReadFast5Configuration\x12\x19\n\x11\x63ompression_level\x18\x01 \x01(\x05\x12\x61\n\x10\x63ompression_type\x18\x0e \x01(\x0e\x32G.minknow_api.analysis_configuration.WriterConfiguration.CompressionType\x12Y\n\x03raw\x18\x02 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12[\n\x05\x66\x61stq\x18\x03 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x61\n\x0btrace_table\x18\x0b \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12`\n\nmove_table\x18\x0c \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12i\n\x13modifications_table\x18\r \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12$\n\x1c\x64isable_writing_passed_reads\x18\x05 \x01(\x08\x12$\n\x1c\x64isable_writing_failed_reads\x18\x06 \x01(\x08\x12+\n#disable_writing_force_skipped_reads\x18\x07 \x01(\x08\x12\x14\n\x0c\x66ile_pattern\x18\x08 \x01(\t\x12\x1c\n\x14\x66\x61stq_header_pattern\x18\t \x01(\t\x12\x13\n\x0b\x62\x61tch_count\x18\n \x01(\r\x1a\xce\x01\n\x16ReadFastqConfiguration\x12\\\n\x06\x65nable\x18\x01 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x14\n\x0c\x66ile_pattern\x18\x02 \x01(\t\x12\x16\n\x0eheader_pattern\x18\x03 \x01(\t\x12\x13\n\x0b\x62\x61tch_count\x18\x04 \x01(\r\x12\x13\n\x0b\x63ompression\x18\x05 \x01(\x08\x1a\xcc\x01\n\x14ReadBamConfiguration\x12\\\n\x06\x65nable\x18\x01 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x14\n\x0c\x66ile_pattern\x18\x02 \x01(\t\x12\x13\n\x0b\x62\x61tch_count\x18\x03 \x01(\r\x12+\n#disable_writing_multiple_alignments\x18\x04 \x01(\x08\x1a\x99\x02\n\x15ReadPod5Configuration\x12\\\n\x06\x65nable\x18\x01 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x14\n\x0c\x66ile_pattern\x18\x02 \x01(\t\x12\x13\n\x0b\x62\x61tch_count\x18\x03 \x01(\r\x12$\n\x1c\x64isable_writing_passed_reads\x18\x04 \x01(\x08\x12$\n\x1c\x64isable_writing_failed_reads\x18\x05 \x01(\x08\x12+\n#disable_writing_force_skipped_reads\x18\x06 \x01(\x08\x1a\xa4\x01\n\x19ReadProtobufConfiguration\x12\\\n\x06\x65nable\x18\x01 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x14\n\x0c\x66ile_pattern\x18\x02 \x01(\t\x12\x13\n\x0b\x62\x61tch_count\x18\x03 \x01(\r\x1a\x94\x01\n\x1eSequencingSummaryConfiguration\x12\\\n\x06\x65nable\x18\x01 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x14\n\x0c\x66ile_pattern\x18\x02 \x01(\t\x1a\xd7\x05\n\x11\x42ulkConfiguration\x12\x19\n\x11\x63ompression_level\x18\x02 \x01(\x05\x12\x61\n\x10\x63ompression_type\x18\r \x01(\x0e\x32G.minknow_api.analysis_configuration.WriterConfiguration.CompressionType\x12\x14\n\x0c\x66ile_pattern\x18\x0e \x01(\t\x12Y\n\x03raw\x18\x03 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\\\n\x06\x65vents\x18\x04 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12[\n\x05reads\x18\x05 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12_\n\tmultiplex\x18\x06 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x64\n\x0e\x63hannel_states\x18\x07 \x01(\x0b\x32L.minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration\x12\x17\n\x0f\x64\x65vice_metadata\x18\x0b \x01(\x08\x12\x17\n\x0f\x64\x65vice_commands\x18\x0c \x01(\x08\x12\x1f\n\x17\x64ynamic_analysis_config\x18\x0f \x01(\x08\x1a\x99\x03\n\x13ReportConfiguration\x12\x1f\n\x17pdf_report_file_pattern\x18\x01 \x01(\t\x12 \n\x18json_report_file_pattern\x18\x02 \x01(\t\x12 \n\x18html_report_file_pattern\x18\t \x01(\t\x12$\n\x1cmarkdown_report_file_pattern\x18\x08 \x01(\t\x12%\n\x1d\x64uty_time_report_file_pattern\x18\x03 \x01(\t\x12&\n\x1ethroughput_report_file_pattern\x18\x04 \x01(\t\x12)\n!final_summary_report_file_pattern\x18\x05 \x01(\t\x12-\n%barcode_alignment_report_file_pattern\x18\x06 \x01(\t\x12(\n sample_sheet_report_file_pattern\x18\n \x01(\t\x12$\n\x1c\x63ustom_report_suffix_pattern\x18\x07 \x01(\t\"R\n\x0f\x43ompressionType\x12\x16\n\x12\x44\x65\x66\x61ultCompression\x10\x00\x12\x13\n\x0fZlibCompression\x10\x01\x12\x12\n\x0eVbzCompression\x10\x02\" \n\x1eSetWriterConfigurationResponse\"\x1f\n\x1dGetWriterConfigurationRequest\"\x1f\n\x1dGetReadClassificationsRequest\"\xd7\x01\n\x1eGetReadClassificationsResponse\x12y\n\x14read_classifications\x18\x01 \x03(\x0b\x32[.minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry\x1a:\n\x18ReadClassificationsEntry\x12\x0b\n\x03key\x18\x01 \x01(\x05\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xfc\x02\n\x1c\x44ynamicAnalysisConfiguration\x12o\n\x13read_scale_tracking\x18\x01 \x01(\x0b\x32R.minknow_api.analysis_configuration.DynamicAnalysisConfiguration.ReadScaleTracking\x1a\xea\x01\n\x11ReadScaleTracking\x12 \n\x18\x63onductance_scan_voltage\x18\x01 \x01(\x02\x12\x82\x01\n\x13\x63hannel_conductance\x18\x02 \x03(\x0b\x32\x65.minknow_api.analysis_configuration.DynamicAnalysisConfiguration.ReadScaleTracking.ChannelConductance\x1a.\n\x12\x43hannelConductance\x12\x18\n\x10well_conductance\x18\x01 \x03(\x02\"(\n&GetDynamicAnalysisConfigurationRequest\")\n\'SetDynamicAnalysisConfigurationResponse2\xac\x15\n\x1c\x41nalysisConfigurationService\x12\xa1\x01\n\x1aget_analysis_configuration\x12\x43.minknow_api.analysis_configuration.GetAnalysisConfigurationRequest\x1a\x39.minknow_api.analysis_configuration.AnalysisConfiguration\"\x03\x90\x02\x01\x12\xa2\x01\n\x1aset_analysis_configuration\x12\x39.minknow_api.analysis_configuration.AnalysisConfiguration\x1a\x44.minknow_api.analysis_configuration.SetAnalysisConfigurationResponse\"\x03\x90\x02\x02\x12\xb2\x01\n\x1creset_analysis_configuration\x12\x45.minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest\x1a\x46.minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse\"\x03\x90\x02\x02\x12\xaa\x01\n\x1aset_analysis_enabled_state\x12\x42.minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest\x1a\x43.minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse\"\x03\x90\x02\x02\x12\xa1\x01\n\x17get_channel_states_desc\x12?.minknow_api.analysis_configuration.GetChannelStatesDescRequest\x1a@.minknow_api.analysis_configuration.GetChannelStatesDescResponse\"\x03\x90\x02\x01\x12\x81\x01\n\x0bget_summary\x12\x35.minknow_api.analysis_configuration.GetSummaryRequest\x1a\x36.minknow_api.analysis_configuration.GetSummaryResponse\"\x03\x90\x02\x01\x12\xb2\x01\n\x1cset_basecaller_configuration\x12\x45.minknow_api.analysis_configuration.SetBasecallerConfigurationRequest\x1a\x46.minknow_api.analysis_configuration.SetBasecallerConfigurationResponse\"\x03\x90\x02\x02\x12\xb6\x01\n preload_basecaller_configuration\x12\x45.minknow_api.analysis_configuration.SetBasecallerConfigurationRequest\x1a\x46.minknow_api.analysis_configuration.SetBasecallerConfigurationResponse\"\x03\x90\x02\x02\x12\xa7\x01\n\x1cget_basecaller_configuration\x12\x45.minknow_api.analysis_configuration.GetBasecallerConfigurationRequest\x1a;.minknow_api.analysis_configuration.BasecallerConfiguration\"\x03\x90\x02\x01\x12\xa2\x01\n\x1bget_pore_type_configuration\x12\x43.minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest\x1a\x39.minknow_api.analysis_configuration.PoreTypeConfiguration\"\x03\x90\x02\x01\x12\xa3\x01\n\x1bset_pore_type_configuration\x12\x39.minknow_api.analysis_configuration.PoreTypeConfiguration\x1a\x44.minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse\"\x03\x90\x02\x02\x12\x9c\x01\n\x18set_writer_configuration\x12\x37.minknow_api.analysis_configuration.WriterConfiguration\x1a\x42.minknow_api.analysis_configuration.SetWriterConfigurationResponse\"\x03\x90\x02\x02\x12\x9b\x01\n\x18get_writer_configuration\x12\x41.minknow_api.analysis_configuration.GetWriterConfigurationRequest\x1a\x37.minknow_api.analysis_configuration.WriterConfiguration\"\x03\x90\x02\x01\x12\xa6\x01\n\x18get_read_classifications\x12\x41.minknow_api.analysis_configuration.GetReadClassificationsRequest\x1a\x42.minknow_api.analysis_configuration.GetReadClassificationsResponse\"\x03\x90\x02\x01\x12\xb7\x01\n\"get_dynamic_analysis_configuration\x12J.minknow_api.analysis_configuration.GetDynamicAnalysisConfigurationRequest\x1a@.minknow_api.analysis_configuration.DynamicAnalysisConfiguration\"\x03\x90\x02\x01\x12\xb5\x01\n\"set_dynamic_analysis_configuration\x12@.minknow_api.analysis_configuration.DynamicAnalysisConfiguration\x1aK.minknow_api.analysis_configuration.SetDynamicAnalysisConfigurationResponse\"\x00\x42&\n\x1c\x63om.nanoporetech.minknow_api\xa2\x02\x05MKAPIb\x06proto3')



_EVENTDETECTION = DESCRIPTOR.message_types_by_name['EventDetection']
_READDETECTIONPARAMS = DESCRIPTOR.message_types_by_name['ReadDetectionParams']
_READFILTERS = DESCRIPTOR.message_types_by_name['ReadFilters']
_READCLASSIFICATIONPARAMS = DESCRIPTOR.message_types_by_name['ReadClassificationParams']
_READCLASSIFICATIONPARAMS_PARAMETERS = _READCLASSIFICATIONPARAMS.nested_types_by_name['Parameters']
_CHANNELSTATES = DESCRIPTOR.message_types_by_name['ChannelStates']
_CHANNELSTATES_LOGIC = _CHANNELSTATES.nested_types_by_name['Logic']
_CHANNELSTATES_LOGIC_BEHAVIOUR = _CHANNELSTATES_LOGIC.nested_types_by_name['Behaviour']
_CHANNELSTATES_LOGIC_RANGES = _CHANNELSTATES_LOGIC.nested_types_by_name['Ranges']
_CHANNELSTATES_LOGIC_RANGES_RANGE = _CHANNELSTATES_LOGIC_RANGES.nested_types_by_name['Range']
_CHANNELSTATES_STYLE = _CHANNELSTATES.nested_types_by_name['Style']
_CHANNELSTATES_GROUP = _CHANNELSTATES.nested_types_by_name['Group']
_GETANALYSISCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['GetAnalysisConfigurationRequest']
_READSCALINGPARAMS = DESCRIPTOR.message_types_by_name['ReadScalingParams']
_ANALYSISCONFIGURATION = DESCRIPTOR.message_types_by_name['AnalysisConfiguration']
_ANALYSISCONFIGURATION_CHANNELSTATESENTRY = _ANALYSISCONFIGURATION.nested_types_by_name['ChannelStatesEntry']
_SETANALYSISCONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['SetAnalysisConfigurationResponse']
_RESETANALYSISCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['ResetAnalysisConfigurationRequest']
_RESETANALYSISCONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['ResetAnalysisConfigurationResponse']
_SETANALYSISENABLEDSTATEREQUEST = DESCRIPTOR.message_types_by_name['SetAnalysisEnabledStateRequest']
_SETANALYSISENABLEDSTATERESPONSE = DESCRIPTOR.message_types_by_name['SetAnalysisEnabledStateResponse']
_GETCHANNELSTATESDESCREQUEST = DESCRIPTOR.message_types_by_name['GetChannelStatesDescRequest']
_GETCHANNELSTATESDESCRESPONSE = DESCRIPTOR.message_types_by_name['GetChannelStatesDescResponse']
_GETCHANNELSTATESDESCRESPONSE_STYLE = _GETCHANNELSTATESDESCRESPONSE.nested_types_by_name['Style']
_GETCHANNELSTATESDESCRESPONSE_CHANNELSTATE = _GETCHANNELSTATESDESCRESPONSE.nested_types_by_name['ChannelState']
_GETCHANNELSTATESDESCRESPONSE_GROUP = _GETCHANNELSTATESDESCRESPONSE.nested_types_by_name['Group']
_GETSUMMARYREQUEST = DESCRIPTOR.message_types_by_name['GetSummaryRequest']
_GETSUMMARYRESPONSE = DESCRIPTOR.message_types_by_name['GetSummaryResponse']
_BARCODINGCONFIGURATION = DESCRIPTOR.message_types_by_name['BarcodingConfiguration']
_ALIGNMENTCONFIGURATION = DESCRIPTOR.message_types_by_name['AlignmentConfiguration']
_LAMPCONFIGURATION = DESCRIPTOR.message_types_by_name['LampConfiguration']
_BASECALLERCONFIGURATION = DESCRIPTOR.message_types_by_name['BasecallerConfiguration']
_BASECALLERCONFIGURATION_READFILTERING = _BASECALLERCONFIGURATION.nested_types_by_name['ReadFiltering']
_BASECALLERCONFIGURATION_TARGETFILTERING = _BASECALLERCONFIGURATION.nested_types_by_name['TargetFiltering']
_SETBASECALLERCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['SetBasecallerConfigurationRequest']
_SETBASECALLERCONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['SetBasecallerConfigurationResponse']
_GETBASECALLERCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['GetBasecallerConfigurationRequest']
_GETPORETYPECONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['GetPoreTypeConfigurationRequest']
_PORETYPECONFIGURATION = DESCRIPTOR.message_types_by_name['PoreTypeConfiguration']
_PORETYPECONFIGURATION_CHANNELWELL = _PORETYPECONFIGURATION.nested_types_by_name['ChannelWell']
_PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS = _PORETYPECONFIGURATION.nested_types_by_name['ChannelWellPoreTypeConfigurations']
_PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_CHANNELWELLLIST = _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS.nested_types_by_name['ChannelWellList']
_PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY = _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS.nested_types_by_name['PoreTypesEntry']
_SETPORETYPECONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['SetPoreTypeConfigurationResponse']
_WRITERCONFIGURATION = DESCRIPTOR.message_types_by_name['WriterConfiguration']
_WRITERCONFIGURATION_CHANNELCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ChannelConfiguration']
_WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELLIST = _WRITERCONFIGURATION_CHANNELCONFIGURATION.nested_types_by_name['ChannelList']
_WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES = _WRITERCONFIGURATION_CHANNELCONFIGURATION.nested_types_by_name['ChannelRanges']
_WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES_CHANNELRANGE = _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES.nested_types_by_name['ChannelRange']
_WRITERCONFIGURATION_READFAST5CONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReadFast5Configuration']
_WRITERCONFIGURATION_READFASTQCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReadFastqConfiguration']
_WRITERCONFIGURATION_READBAMCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReadBamConfiguration']
_WRITERCONFIGURATION_READPOD5CONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReadPod5Configuration']
_WRITERCONFIGURATION_READPROTOBUFCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReadProtobufConfiguration']
_WRITERCONFIGURATION_SEQUENCINGSUMMARYCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['SequencingSummaryConfiguration']
_WRITERCONFIGURATION_BULKCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['BulkConfiguration']
_WRITERCONFIGURATION_REPORTCONFIGURATION = _WRITERCONFIGURATION.nested_types_by_name['ReportConfiguration']
_SETWRITERCONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['SetWriterConfigurationResponse']
_GETWRITERCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['GetWriterConfigurationRequest']
_GETREADCLASSIFICATIONSREQUEST = DESCRIPTOR.message_types_by_name['GetReadClassificationsRequest']
_GETREADCLASSIFICATIONSRESPONSE = DESCRIPTOR.message_types_by_name['GetReadClassificationsResponse']
_GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY = _GETREADCLASSIFICATIONSRESPONSE.nested_types_by_name['ReadClassificationsEntry']
_DYNAMICANALYSISCONFIGURATION = DESCRIPTOR.message_types_by_name['DynamicAnalysisConfiguration']
_DYNAMICANALYSISCONFIGURATION_READSCALETRACKING = _DYNAMICANALYSISCONFIGURATION.nested_types_by_name['ReadScaleTracking']
_DYNAMICANALYSISCONFIGURATION_READSCALETRACKING_CHANNELCONDUCTANCE = _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING.nested_types_by_name['ChannelConductance']
_GETDYNAMICANALYSISCONFIGURATIONREQUEST = DESCRIPTOR.message_types_by_name['GetDynamicAnalysisConfigurationRequest']
_SETDYNAMICANALYSISCONFIGURATIONRESPONSE = DESCRIPTOR.message_types_by_name['SetDynamicAnalysisConfigurationResponse']
_READDETECTIONPARAMS_READDETECTIONMODE = _READDETECTIONPARAMS.enum_types_by_name['ReadDetectionMode']
_READCLASSIFICATIONPARAMS_SCHEME = _READCLASSIFICATIONPARAMS.enum_types_by_name['Scheme']
_WRITERCONFIGURATION_COMPRESSIONTYPE = _WRITERCONFIGURATION.enum_types_by_name['CompressionType']
EventDetection = _reflection.GeneratedProtocolMessageType('EventDetection', (_message.Message,), {
  'DESCRIPTOR' : _EVENTDETECTION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      window_size:
          The window size that the tstats are calculated from
      threshold:
          The peak detection must be above this threshold at a minimum
          for it to be detected as an event.
      peak_height:
          When analysing the tstat peaks, if the jump between one value
          and another is higher than than 'peak_height', then it will
          "arm" the peak detector and move onto the next phase.  And
          what goes up must come down. Once it has detected a peak going
          up, it will also have to go down by 'peak_height' in order for
          the peak to be classified as a found event
      events_to_base_ratio:
          Conversion factor used to convert from events to bases.  This
          is used to estimate bases for various rpc feeds from minknow.
      break_on_mux_changes:
          Whether to break events on mux changes.  This will eliminate
          "mux_uncertain" events and reads. Note that this will cause
          starting or stopping unblocking to break events as well (even
          though the mux does not normally change in this case).
      max_mux_change_back_shift:
          Control the number of samples MinKNOW will shift mux changes
          back by in order to align mux changes with event boundaries.
          When break on mux changes is enabled its possible that mux
          changes recorded from the device and signal deltas caused by
          the config changes will not align exactly (the signal delta
          happen prior to the mux change due to the recorded sample
          indicating the command is fully applied). Setting this value
          to > 0 will allow minknow to record the mux change as active
          up to this number of samples _before_ the device recorded the
          change as active. Mux changes are never shifted forwards.  A
          value of 0 will disable shifting of mux changes.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.EventDetection)
  })
_sym_db.RegisterMessage(EventDetection)

ReadDetectionParams = _reflection.GeneratedProtocolMessageType('ReadDetectionParams', (_message.Message,), {
  'DESCRIPTOR' : _READDETECTIONPARAMS,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      open_pore_min:
          The minimum level which is considered open pore (this value is
          relative to open_pore_default or the tracked open_pore
          section, if tracking is being used.)  This value must be <=
          0.0 if tracking is being used.
      open_pore_max:
          The maximum level which is considered open pore (this value is
          relative to open_pore_default or the tracked open_pore
          section, if tracking is being used.)  This value must be >=
          0.0 if tracking is being used.
      open_pore_default:
          The default value to use for open pore, either when tracking
          isn't being used, or when open pore tracking has no value
          currently.
      open_pore_seconds_required:
          Minimum number of seconds events must lie within the range of
          open pore in order to allow a read to break.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadDetectionParams)
  })
_sym_db.RegisterMessage(ReadDetectionParams)

ReadFilters = _reflection.GeneratedProtocolMessageType('ReadFilters', (_message.Message,), {
  'DESCRIPTOR' : _READFILTERS,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Parameters for filtering out reads from being written.  The tests are
  combined using a logical AND: if any given test fails, the read will
  not be written. Only reads that pass all (non-zero) tests will be
  written out.  Currently, it is only possible to filter on read length.
  This can be given in samples or MinKNOW events.
  
  Attributes:
      read_length_min:
          Only write reads that contain at least this many samples.  The
          default zero value will not exclude any reads.
      read_length_max:
          Only write reads that contain at most this many samples.  If
          set to zero (the default), this test is not applied (as though
          it had been set to a value longer than any possible read).
      event_count_min:
          Only write reads that contain at least this many MinKNOW
          events.  The default zero value will not exclude any reads.
      event_count_max:
          Only write reads that contain at most this many MinKNOW
          events.  If set to zero (the default), this test is not
          applied (as though it had been set to a value longer than any
          possible read).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadFilters)
  })
_sym_db.RegisterMessage(ReadFilters)

ReadClassificationParams = _reflection.GeneratedProtocolMessageType('ReadClassificationParams', (_message.Message,), {

  'Parameters' : _reflection.GeneratedProtocolMessageType('Parameters', (_message.Message,), {
    'DESCRIPTOR' : _READCLASSIFICATIONPARAMS_PARAMETERS,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        rules_in_execution_order:
            An execution rule has the following format:  "pore =
            (median,gt,185)&(median,lt,260)&(median_sd,lt,40)"  "median"
            and "median_sd" are apart of a small subset of variable values
            describing a read or read chunk, that are exposed to execution
            rules. The full list of variable values and their descriptions
            are documented here:
            https://minknow.git.oxfordnanolabs.local/minknow-
            core/analysis/reads.html  "gt" and "lt" describe how data can
            be compared: gt: greater than lt: less than eq: equal ne: not
            equal  Constant values like "185" or "260" can also be
            specified. These can be real numbers also.  Note that
            variables dont always have to be on the left and const values
            on the right. The following sub rules are also valid:
            (200,lt,median_sd) (median_before,gt,median) (5,lt,10)
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
    })
  ,
  'DESCRIPTOR' : _READCLASSIFICATIONPARAMS,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      max_sample_size:
          This tells minknow the maximum number of means to store in
          memory before using a different strategy to calculate medians.
          If the number of means goes over this size then the strategy
          used may be less accurate, but will not use as much memory in
          minknow
      selected_classifications:
          A list of classifications that are deemed interesting, and
          will be marked to be written out to file
      open_pore_classifications:
          A set of classifications whose level should be tracked as the
          level of open pore (fed back into read detection analysis).
          Read chunks selected by this filter will be aggregated for use
          in read detection.
      open_pore_ewma_weight:
          A weighting figure for the exponentially weighted moving
          average given to the newest data. eg. 0.7 would weight new
          data with 0.3 and all previous data with 0.7.  By default 0.5
          is used.
      open_pore_ignore_after_reset_seconds:
          A number of seconds to ignore new chunks for after a reset
          occurs on a channel this allows analysis to ignore spikes or
          bad data on the channel for a small section of time.  By
          default 0.0 is used - and chunks are accepted immediately.
      classification_strategy:
          Determine how to classify a whole read based on the strategy
          'ultimate':      Chooses the last (ultimate) read chunk's
          classification 'penultimate':   Chooses the second-to-last
          read chunk's clasification 'modal':         Chooses the most
          common classification out of the all read chunks
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadClassificationParams)
  })
_sym_db.RegisterMessage(ReadClassificationParams)
_sym_db.RegisterMessage(ReadClassificationParams.Parameters)

ChannelStates = _reflection.GeneratedProtocolMessageType('ChannelStates', (_message.Message,), {

  'Logic' : _reflection.GeneratedProtocolMessageType('Logic', (_message.Message,), {

    'Behaviour' : _reflection.GeneratedProtocolMessageType('Behaviour', (_message.Message,), {
      'DESCRIPTOR' : _CHANNELSTATES_LOGIC_BEHAVIOUR,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      ,
      '__doc__': """Attributes:
          reset_on_mux_change:
              TODO: MinKNOW 5: replace int32 with bool for these options
              these are ints but act like bools
          latch:
              If the latch value is set to true, then when the criteria for
              this channel state is active, then the latch will keep it
              active until the channel state is reset.
          reset_on_effective_mux_change:
              An 'effective mux change' is any mux change apart from the one
              triggered with the purpose of disconnecting a channel (turning
              a channel off). For example, if a channel is in pore, and the
              user changes the channel configuration to 'disconnected', that
              mux change will not be an effective mux change. Any other mux
              change is considered an 'effective mux change'. So if a
              channel saturates, the mux change to disconnected is an
              effective mux change. Similarly, a change from disconnected to
              a pore is an effective mux change.  Use this reset mode to
              make the channel state persist on non-effective mux changes.
              For example, if a channel state is in 'multiple' and the user
              triggers a channel configuration change to 'disconnected', the
              state will remain in multiple if it has this option on. The
              multiple state will be reset at all other mux changes (i.e.
              effective mux changes).
          reset_on_effective_well_change:
              An 'effective well change' is any well change apart from the
              one triggered with the purpose of disconnecting a channel
              (turning a channel off). For example, if a channel is in
              well_1, and the user changes the channel configuration to
              'unblock_1', that change will not be an effective well change.
              A change to disconnected is also not considered an effective
              well change.  Use this reset mode to make the channel state
              persist on non-effective well changes. For example, if a
              channel state is in 'multiple' and the user triggers a channel
              configuration change to 'disconnected', the state will remain
              in multiple if it has this option on. The multiple state will
              be reset then when the mux is set to a different setting.
      """,
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
      })
    ,

    'Ranges' : _reflection.GeneratedProtocolMessageType('Ranges', (_message.Message,), {

      'Range' : _reflection.GeneratedProtocolMessageType('Range', (_message.Message,), {
        'DESCRIPTOR' : _CHANNELSTATES_LOGIC_RANGES_RANGE,
        '__module__' : 'minknow_api.analysis_configuration_pb2'
        # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
        })
      ,
      'DESCRIPTOR' : _CHANNELSTATES_LOGIC_RANGES,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      ,
      '__doc__': """Dont really like this way of doing it, but it has to match the old
      way...""",
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
      })
    ,
    'DESCRIPTOR' : _CHANNELSTATES_LOGIC,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        rank:
            Specifies the order in which channel state criteria will be
            evaluated; the smaller the number, the earlier it will be
            evaluated. The first criteria to match will be selected
        pattern:
            Note that this is a regex based pattern for describing a read
            classification sequence. For example you can specify:
            "unavailableunavailable" or:      "(unavailable)(unavailable)"
            to recognise two consecutive read chunks classified as
            unavailable.  You can also use "?" at the end of one of the
            classifications in the sequence to indicate that it may or may
            not be present at that point. For example:
            "(pore)(transition)?(event)"  This will match both of the
            sequences:      pore, transition, event      pore, event  The
            technical documentation has more information on the range of
            regex patterns you can apply.
            https://minknow.git.oxfordnanolabs.local/minknow-
            core/analysis/channel-states.html
        ranges:
            Range is [lower_pa, upper_pa)
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic)
    })
  ,

  'Style' : _reflection.GeneratedProtocolMessageType('Style', (_message.Message,), {
    'DESCRIPTOR' : _CHANNELSTATES_STYLE,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Style)
    })
  ,

  'Group' : _reflection.GeneratedProtocolMessageType('Group', (_message.Message,), {
    'DESCRIPTOR' : _CHANNELSTATES_GROUP,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Group)
    })
  ,
  'DESCRIPTOR' : _CHANNELSTATES,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates)
  })
_sym_db.RegisterMessage(ChannelStates)
_sym_db.RegisterMessage(ChannelStates.Logic)
_sym_db.RegisterMessage(ChannelStates.Logic.Behaviour)
_sym_db.RegisterMessage(ChannelStates.Logic.Ranges)
_sym_db.RegisterMessage(ChannelStates.Logic.Ranges.Range)
_sym_db.RegisterMessage(ChannelStates.Style)
_sym_db.RegisterMessage(ChannelStates.Group)

GetAnalysisConfigurationRequest = _reflection.GeneratedProtocolMessageType('GetAnalysisConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETANALYSISCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetAnalysisConfigurationRequest)
  })
_sym_db.RegisterMessage(GetAnalysisConfigurationRequest)

ReadScalingParams = _reflection.GeneratedProtocolMessageType('ReadScalingParams', (_message.Message,), {
  'DESCRIPTOR' : _READSCALINGPARAMS,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Since 5.3  Quantile Information:
  
  Attributes:
      quantile_locations:
          Position of quantiles in scaling data to use when computing
          scale parameters.
      quantile_weights_shift:
          If present, must be the same length as quantile_locations.
          Represents the coefficients that shall be multiplied with
          measured quantiles to give a predicted_shift
      quantile_weights_scale:
          If present, must be the same length as quantile_locations.
          Represents the coefficients that shall be multiplied with
          measured quantiles to give a predicted_scale
      tracking_alpha:
          Alpha value to use in ewma calculation for scale and shift
          tracking. 1 updates instantly. 0 does not update.
      alpha_number_estimates_decay:
          Alpha decay value to use. Higher values cause a more rapid
          decay in greater trust of earlier numbers.
      quantile_maxdiff:
          Maximum difference in event quantiles which will be added into
          trackers.  This is used to filter away cases where pore signal
          is included in the read and thus cannot be trusted.
      trust_limit_fraction:
          Maximum fraction change between one tracked value and the next
          which will be trusted. Higher values are not trusted.
      diff_threshold:
          The minimum difference between an event and the next to
          include it in the subsampling
      emission_threshold:
          After how many cumulative pA is a new event emitted in the
          subsampling
      dacs_breakpoint:
          Cumulative pA sum required to compute scaling. Any events
          after this sum are not considered in scaling.
      conductance_factor_scale:
          Scale factor applied to conductance to produce a basic scale
          estimate, also combined with q90_q10_to_normal.
      conductance_factor_shift:
          Scale factor applied to conductance to produce a basic shift
          estimate.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadScalingParams)
  })
_sym_db.RegisterMessage(ReadScalingParams)

AnalysisConfiguration = _reflection.GeneratedProtocolMessageType('AnalysisConfiguration', (_message.Message,), {

  'ChannelStatesEntry' : _reflection.GeneratedProtocolMessageType('ChannelStatesEntry', (_message.Message,), {
    'DESCRIPTOR' : _ANALYSISCONFIGURATION_CHANNELSTATESENTRY,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry)
    })
  ,
  'DESCRIPTOR' : _ANALYSISCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      read_scaling:
          Add read scale tracking to the pipeline. If this message is
          unspecified, read scaling is not enabled.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.AnalysisConfiguration)
  })
_sym_db.RegisterMessage(AnalysisConfiguration)
_sym_db.RegisterMessage(AnalysisConfiguration.ChannelStatesEntry)

SetAnalysisConfigurationResponse = _reflection.GeneratedProtocolMessageType('SetAnalysisConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETANALYSISCONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisConfigurationResponse)
  })
_sym_db.RegisterMessage(SetAnalysisConfigurationResponse)

ResetAnalysisConfigurationRequest = _reflection.GeneratedProtocolMessageType('ResetAnalysisConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _RESETANALYSISCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest)
  })
_sym_db.RegisterMessage(ResetAnalysisConfigurationRequest)

ResetAnalysisConfigurationResponse = _reflection.GeneratedProtocolMessageType('ResetAnalysisConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _RESETANALYSISCONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse)
  })
_sym_db.RegisterMessage(ResetAnalysisConfigurationResponse)

SetAnalysisEnabledStateRequest = _reflection.GeneratedProtocolMessageType('SetAnalysisEnabledStateRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETANALYSISENABLEDSTATEREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  })
_sym_db.RegisterMessage(SetAnalysisEnabledStateRequest)

SetAnalysisEnabledStateResponse = _reflection.GeneratedProtocolMessageType('SetAnalysisEnabledStateResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETANALYSISENABLEDSTATERESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse)
  })
_sym_db.RegisterMessage(SetAnalysisEnabledStateResponse)

GetChannelStatesDescRequest = _reflection.GeneratedProtocolMessageType('GetChannelStatesDescRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETCHANNELSTATESDESCREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescRequest)
  })
_sym_db.RegisterMessage(GetChannelStatesDescRequest)

GetChannelStatesDescResponse = _reflection.GeneratedProtocolMessageType('GetChannelStatesDescResponse', (_message.Message,), {

  'Style' : _reflection.GeneratedProtocolMessageType('Style', (_message.Message,), {
    'DESCRIPTOR' : _GETCHANNELSTATESDESCRESPONSE_STYLE,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        label:
            The human-readable name to display when rendering this channel
            state or group.
        description:
            A sentence describing the meaning of the channel state or
            group.  This can be used as a tooltip, for example.
        colour:
            The colour to use when rendering this channel state or group.
            This is a six-digit hex string describing an RGB colour (eg:
            "ff00ff" for purple).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
    })
  ,

  'ChannelState' : _reflection.GeneratedProtocolMessageType('ChannelState', (_message.Message,), {
    'DESCRIPTOR' : _GETCHANNELSTATESDESCRESPONSE_CHANNELSTATE,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        id:
            The numeric identifier of the state.  This is what is reported
            in any other APIs that return a channel state ID.
        name:
            The internal name of the state.  This is what is reported in
            any other APIs that return a channel state name.
        style:
            How to render the channel state in a graphical user interface.
            Note that the style may be missing from some channel states
            (such as the ones that are built in to MinKNOW).
        global_order:
            An order ranking for the channel states when they are
            ungrouped.  This can be used to order the channel states after
            merging the groups.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
    })
  ,

  'Group' : _reflection.GeneratedProtocolMessageType('Group', (_message.Message,), {
    'DESCRIPTOR' : _GETCHANNELSTATESDESCRESPONSE_GROUP,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        name:
            The name of the group.
        style:
            How to render the group in a graphical user interface.  Note
            that the style may be missing from some groups (such as the
            ones that are built in to MinKNOW).
        states:
            The channel states contained in the group.  The groups are
            ordered according to the "order" attribute of the channel
            state style in the channel states configuration.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
    })
  ,
  'DESCRIPTOR' : _GETCHANNELSTATESDESCRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      groups:
          The groups of channel states.  The groups are ordered
          according to the "order" attribute of the group style in the
          channel states configuration.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  })
_sym_db.RegisterMessage(GetChannelStatesDescResponse)
_sym_db.RegisterMessage(GetChannelStatesDescResponse.Style)
_sym_db.RegisterMessage(GetChannelStatesDescResponse.ChannelState)
_sym_db.RegisterMessage(GetChannelStatesDescResponse.Group)

GetSummaryRequest = _reflection.GeneratedProtocolMessageType('GetSummaryRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETSUMMARYREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetSummaryRequest)
  })
_sym_db.RegisterMessage(GetSummaryRequest)

GetSummaryResponse = _reflection.GeneratedProtocolMessageType('GetSummaryResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETSUMMARYRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      analysis_enabled:
          Whether any analysis is enabled.  If this is false, everything
          else will be false as well.
      basecalling_enabled:
          Whether basecalling is enabled.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetSummaryResponse)
  })
_sym_db.RegisterMessage(GetSummaryResponse)

BarcodingConfiguration = _reflection.GeneratedProtocolMessageType('BarcodingConfiguration', (_message.Message,), {
  'DESCRIPTOR' : _BARCODINGCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Since 3.5
  
  Attributes:
      barcoding_kits:
          The barcoding kits in use One entry per kit If no barcoding
          kits are supplied, barcoding is disabled.
      trim_barcodes:
          Whether Guppy should trim barcodes If not specified, this
          value defaults to false (not triming barcodes) If barcoding is
          not enabled (e.g., because no barcoding kits are specified),
          this parameter has no effect.
      require_barcodes_both_ends:
          Barcode is only classified if a barcode above `min_score` is
          present at both ends of the basecalled read.
      detect_mid_strand_barcodes:
          Search for barcodes through the entire length of the read.  If
          a barcode is found in the middle of a read the read is marked
          as unclassified.
      min_score:
          Minimum alignment score to consider a valid barcode.  Maximum
          value is 100, defaults to 60.
      min_score_rear:
          Minimum score to consider a valid barcode (overrides min_score
          for rear barcodes).  Maximum value is 100, defaults to
          min_score if not specified.
      min_score_mid:
          Minimum score to consider a valid mid barcode (only valid if
          detect_mid_strand_barcodes is specified).  Maximum value is
          100, defaults to 60.
      min_score_mask:
          The minimum score required for the barcode mask to be
          detected.  Maximum value is 100, defaults to 40.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BarcodingConfiguration)
  })
_sym_db.RegisterMessage(BarcodingConfiguration)

AlignmentConfiguration = _reflection.GeneratedProtocolMessageType('AlignmentConfiguration', (_message.Message,), {
  'DESCRIPTOR' : _ALIGNMENTCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Since 4.0
  
  Attributes:
      reference_files:
          Provide an index to align reads against once basecalled.  Any
          acceptable reference format to guppy can be passed here:   -
          fasta reference file   - minimap index file
      bed_file:
          Provide a bed file for use indicating areas of interest in
          alignment results.  Note: alignment_index must be provided for
          this argument to be valid.
      minimum_coverage:
          Minimum coverage for guppy to accept an alignment.  If not
          specified a default value is used.  Note: this option cannot
          be used during live basecalling.
      aggregate_statistics_for_multiple_bed_hits:
          Control how statistics for bed results are aggregated.  If set
          to false only the bed hit with the highest overlap is used
          when computing heatmap/throughput graphs with bed hits.  If
          set to true each bed hit is considered and bases for all hits
          are counted. This may give more honest representation of
          individual bed hit results but will skew read count statistics
          - as each hit will be counted for every bed hit.  Note: this
          option has no effect in offline basecalling.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.AlignmentConfiguration)
  })
_sym_db.RegisterMessage(AlignmentConfiguration)

LampConfiguration = _reflection.GeneratedProtocolMessageType('LampConfiguration', (_message.Message,), {
  'DESCRIPTOR' : _LAMPCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Since 4.1
  
  Attributes:
      lamp_kit:
          Set the lamp kit being used.
      min_score_barcodes:
          Optionally specify a min score to detect a valid lamp barcode.
      min_score_masks:
          Optionally set the minimimum valid score for a lamp mask.
      min_score_targets:
          Optionally specify a minimum score for lamp targets.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.LampConfiguration)
  })
_sym_db.RegisterMessage(LampConfiguration)

BasecallerConfiguration = _reflection.GeneratedProtocolMessageType('BasecallerConfiguration', (_message.Message,), {

  'ReadFiltering' : _reflection.GeneratedProtocolMessageType('ReadFiltering', (_message.Message,), {
    'DESCRIPTOR' : _BASECALLERCONFIGURATION_READFILTERING,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
    })
  ,

  'TargetFiltering' : _reflection.GeneratedProtocolMessageType('TargetFiltering', (_message.Message,), {
    'DESCRIPTOR' : _BASECALLERCONFIGURATION_TARGETFILTERING,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Since 3.7""",
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
    })
  ,
  'DESCRIPTOR' : _BASECALLERCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Since 3.0
  
  Attributes:
      enable:
          Choose if guppy is enabled or disabled.  If set to false then
          no basecalling will take place, and the rest of the config is
          ignored.
      config_filename:
          The Guppy cfg file with all the settings.  Filename can be
          absolute, or a basename (eg dna_r9.4_450bps.cfg) which guppy
          should locate (see guppy application config entry:
          "data_path")
      align_filter:
          Enable or disable pass/fail filtering based on alignment.
          When enabled, reads which do not align to any references will
          be marked as "failed", and written to the folder specified in
          MinKNOW configuration for failed reads.    The setting applies
          to both regular read filtering and target filtering; if it is
          enabled, then a read will not be marked as a target read if it
          does not align to a reference.  Default setting is false, i.e.
          disabled.  Since 5.4
      read_filtering:
          Control how read filtering is applied to output of basecaller.
          These settings determine whether a read is marked as "passed"
          or "failed".  Reads are written to different folders based on
          the result of this filtering.  Those folders are specified in
          MinKNOW configuration.  If no filtering parameters are
          provided then reads will not be filtered.
      barcoding_configuration:
          Control the barcoding configuration. If no barcoding
          configuration is supplied, barcoding is disabled.  Since 3.5
      target_filtering:
          Control how target filtering is applied to output of
          basecaller. Reads which pass these filtering criteria will be
          marked as "target" reads, and will be written to a separate
          folder; this  folder is specified in MinKNOW configuration.
          Reads which do  not pass these criteria will have the regular
          read filtering applied to them, as specified by the `read-
          filtering` settings above.  If no filtering parameters are
          provided then reads will not be target-filtered.  Since 3.7
      alignment_configuration:
          Alignment configuration parameters. If no configuration is
          specified alignment is disabled.  Since 4.0
      lamp_configuration:
          Lamp configuration parameters. If no configuration is
          specified lamp is disabled.  Since 4.1
      enable_read_splitting:
          Enable read splitting in guppy.  Since 4.5
      min_score_read_splitting:
          Override score to use for guppy read splitting. If not
          specified a default value is used from guppy.  Since 4.5
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration)
  })
_sym_db.RegisterMessage(BasecallerConfiguration)
_sym_db.RegisterMessage(BasecallerConfiguration.ReadFiltering)
_sym_db.RegisterMessage(BasecallerConfiguration.TargetFiltering)

SetBasecallerConfigurationRequest = _reflection.GeneratedProtocolMessageType('SetBasecallerConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETBASECALLERCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  })
_sym_db.RegisterMessage(SetBasecallerConfigurationRequest)

SetBasecallerConfigurationResponse = _reflection.GeneratedProtocolMessageType('SetBasecallerConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETBASECALLERCONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetBasecallerConfigurationResponse)
  })
_sym_db.RegisterMessage(SetBasecallerConfigurationResponse)

GetBasecallerConfigurationRequest = _reflection.GeneratedProtocolMessageType('GetBasecallerConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETBASECALLERCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetBasecallerConfigurationRequest)
  })
_sym_db.RegisterMessage(GetBasecallerConfigurationRequest)

GetPoreTypeConfigurationRequest = _reflection.GeneratedProtocolMessageType('GetPoreTypeConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETPORETYPECONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest)
  })
_sym_db.RegisterMessage(GetPoreTypeConfigurationRequest)

PoreTypeConfiguration = _reflection.GeneratedProtocolMessageType('PoreTypeConfiguration', (_message.Message,), {

  'ChannelWell' : _reflection.GeneratedProtocolMessageType('ChannelWell', (_message.Message,), {
    'DESCRIPTOR' : _PORETYPECONFIGURATION_CHANNELWELL,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        channel:
            Channel number to control pore type for.  Must be less than
            channel count for the current platform
        well:
            Well to control pore type for.  Wells outside the available
            wells on the flowcell are ignored.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
    })
  ,

  'ChannelWellPoreTypeConfigurations' : _reflection.GeneratedProtocolMessageType('ChannelWellPoreTypeConfigurations', (_message.Message,), {

    'ChannelWellList' : _reflection.GeneratedProtocolMessageType('ChannelWellList', (_message.Message,), {
      'DESCRIPTOR' : _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_CHANNELWELLLIST,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
      })
    ,

    'PoreTypesEntry' : _reflection.GeneratedProtocolMessageType('PoreTypesEntry', (_message.Message,), {
      'DESCRIPTOR' : _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry)
      })
    ,
    'DESCRIPTOR' : _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        pore_types:
            Map with pore type as key, mapped to the list of wells to set
            for.  It is undefined what will happen if one call sets the
            pore type of a channel and well to two pore types.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
    })
  ,
  'DESCRIPTOR' : _PORETYPECONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """The pore type configuration  The ways of specifying a configuration
  are as follows: - global_pore_type: all wells have a pore type of
  global_pore_type. - channel_well_pore_types: channels are allowed
  different values per channel/well   (allows a subset of channels to be
  set).
  
  Attributes:
      global_pore_type:
          Set all channel/wells to one pore type.
      channel_well_pore_types:
          Set channel/wells to different pore types.  Pore types can be
          created without being used by adding an empty entry.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration)
  })
_sym_db.RegisterMessage(PoreTypeConfiguration)
_sym_db.RegisterMessage(PoreTypeConfiguration.ChannelWell)
_sym_db.RegisterMessage(PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
_sym_db.RegisterMessage(PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
_sym_db.RegisterMessage(PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry)

SetPoreTypeConfigurationResponse = _reflection.GeneratedProtocolMessageType('SetPoreTypeConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETPORETYPECONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse)
  })
_sym_db.RegisterMessage(SetPoreTypeConfigurationResponse)

WriterConfiguration = _reflection.GeneratedProtocolMessageType('WriterConfiguration', (_message.Message,), {

  'ChannelConfiguration' : _reflection.GeneratedProtocolMessageType('ChannelConfiguration', (_message.Message,), {

    'ChannelList' : _reflection.GeneratedProtocolMessageType('ChannelList', (_message.Message,), {
      'DESCRIPTOR' : _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELLIST,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      ,
      '__doc__': """Attributes:
          channels:
              List of channel names (one based) which should be enabled for
              writing.
      """,
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
      })
    ,

    'ChannelRanges' : _reflection.GeneratedProtocolMessageType('ChannelRanges', (_message.Message,), {

      'ChannelRange' : _reflection.GeneratedProtocolMessageType('ChannelRange', (_message.Message,), {
        'DESCRIPTOR' : _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES_CHANNELRANGE,
        '__module__' : 'minknow_api.analysis_configuration_pb2'
        # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
        })
      ,
      'DESCRIPTOR' : _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      ,
      '__doc__': """Attributes:
          ranges:
              List of start/end paired channel numbers which should be
              enabled for writing.  All channels in inclusive ranges should
              be enabled.
      """,
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
      })
    ,
    'DESCRIPTOR' : _WRITERCONFIGURATION_CHANNELCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Used to control which channels for a specific data type emit data
    
    Attributes:
        channels:
            Control the way channels are enabled for this data type.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
    })
  ,

  'ReadFast5Configuration' : _reflection.GeneratedProtocolMessageType('ReadFast5Configuration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_READFAST5CONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        compression_level:
            Control the level of compression applied to read data.  0:
            No compression will be applied to data. 1-9: Passed to zlib
            compression, 1 is the fastest      compression, 9 is the
            smallest possible output.
        compression_type:
            Control the type of compression applied to the read data.  By
            default the vbz compressor is used (except in the single read
            case).
        raw:
            Raw data, stored with calibration data, and read attributes.
            Stored under /Raw/Reads_*/Signal
        fastq:
            Fastq data, stored as a string.  Stored under
            /Analyses/Basecall_1D_*/BaseCalled_(template|complement)/Fastq
        trace_table:
            Trace table received from Guppy  Stored under
            /Analyses/Basecall_1D_*/BaseCalled_template/Trace
        move_table:
            Move table received from Guppy  Stored under
            /Analyses/Basecall_1D_*/BaseCalled_template/Move
        modifications_table:
            Base modification probability table  Store under
            /Analyses/Basecall_1D_*/BaseCalled_template/ModBaseProbs
        disable_writing_passed_reads:
            Prevent reads which have successfully basecalled being written
            to fast5.
        disable_writing_failed_reads:
            Prevent reads which have failed basecalling being written to
            fast5.
        disable_writing_force_skipped_reads:
            disable writing reads which have been force skipped by the
            basecaller.
        file_pattern:
            The pattern used to find a fast5 files name.  default: fast5{b
            asecall_status}/{flow_cell_id}_{run_id}_{batch_number}.fast5
            Where each {xxx} section is replaced with an attribute from
            the minknow state when the file is written.  See file pattern
            attributes above.
        fastq_header_pattern:
            The pattern used to find a fastq header.  default: {read_id}
            runid={run_id} read={read_number} ch={channel_name}
            start_time={read_start_time} Where each {xxx} section is
            replaced with an attribute from the minknow state when the
            fastq is generated.
        batch_count:
            How many reads are placed in each file (after batch_count
            files {batch_number} is increased in the filename).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
    })
  ,

  'ReadFastqConfiguration' : _reflection.GeneratedProtocolMessageType('ReadFastqConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_READFASTQCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        enable:
            Control if a fastq file should be generated per channel.
        file_pattern:
            The pattern used to find a fastq files name.  default: fastq{b
            asecall_status}/{flow_cell_id}_{run_id}_{batch_number}.fastq
            Where each {xxx} section is replaced with an attribute from
            the minknow state when the file is written.  See file pattern
            attributes above.
        header_pattern:
            The pattern used to find a fastq header.  default: {read_id}
            runid={run_id} read={read_number} ch={channel_name}
            start_time={read_start_time} Where each {xxx} section is
            replaced with an attribute from the minknow state when the
            fastq is generated.
        batch_count:
            How many files are placed in each batch (after batch_count
            files {batch_number} is increased in the filename).
        compression:
            Compress fastq files with gzip compression. default: false
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
    })
  ,

  'ReadBamConfiguration' : _reflection.GeneratedProtocolMessageType('ReadBamConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_READBAMCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        enable:
            Control if a BAM file should be generated per channel.
        file_pattern:
            The pattern used to find a BAM files name.  default: bam{basec
            all_status}/{flow_cell_id}_{run_id}_{batch_number}.bam Where
            each {xxx} section is replaced with an attribute from the
            minknow state when the file is written.  See file pattern
            attributes above.
        batch_count:
            How many files are placed in each batch (after batch_count
            files {batch_number} is increased in the filename).
        disable_writing_multiple_alignments:
            If true minknow will only write the primary alignment for each
            read.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
    })
  ,

  'ReadPod5Configuration' : _reflection.GeneratedProtocolMessageType('ReadPod5Configuration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_READPOD5CONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        enable:
            Control if a POD5 file should be generated per channel.
        file_pattern:
            The pattern used to find a POD5 files name.  default: pod5{bas
            ecall_status}/{flow_cell_id}_{run_id}_{batch_number}.pod5
            Where each {xxx} section is replaced with an attribute from
            the minknow state when the file is written.  See file pattern
            attributes above.
        batch_count:
            How many files are placed in each batch (after batch_count
            files {batch_number} is increased in the filename).  Set to
            zero to disable batching.
        disable_writing_passed_reads:
            Prevent reads which have successfully basecalled being written
            to pod5.
        disable_writing_failed_reads:
            Prevent reads which have failed basecalling being written to
            pod5.
        disable_writing_force_skipped_reads:
            disable writing reads which have been force skipped by the
            basecaller.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadPod5Configuration)
    })
  ,

  'ReadProtobufConfiguration' : _reflection.GeneratedProtocolMessageType('ReadProtobufConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_READPROTOBUFCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        enable:
            Control if a protobuf file should be generated per channel.
        file_pattern:
            The pattern used to find a protobuf files name.  default: pbre
            ad{basecall_status}/{batch_number}/{flow_cell_id}_{run_id}_ch_
            {channel_name}_read_{read_number}.pbread Where each {xxx}
            section is replaced with an attribute from the minknow state
            when the file is written.  See file pattern attributes above.
        batch_count:
            How many files are placed in each batch (after batch_count
            files {batch_number} is increased in the filename).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
    })
  ,

  'SequencingSummaryConfiguration' : _reflection.GeneratedProtocolMessageType('SequencingSummaryConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_SEQUENCINGSUMMARYCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        enable:
            Should a sequencing summary file be generated
        file_pattern:
            The pattern used to find a summary files name.  default:
            sequencing_summary_{flow_cell_id}_{short_run_id}.txt Where
            each {xxx} section is replaced with an attribute from the
            minknow state when the file is written.  See file pattern
            attributes above.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
    })
  ,

  'BulkConfiguration' : _reflection.GeneratedProtocolMessageType('BulkConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_BULKCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Control settings for the bulk writer
    
    Attributes:
        compression_level:
            Control the level of compression applied to read data.  0:
            No compression will be applied to data. 1-9: Passed to zlib
            compression, 1 is the fastest      compression, 9 is the
            smallest possible output.
        compression_type:
            Control the type of compression applied to the read data.  By
            default the vbz compressor is used (except in the single read
            case).
        file_pattern:
            The pattern used to find a bulk files name. If left empty but
            output is enabled a default pattern is used.  default:
            {data_set}.fast5 Where each {xxx} section is replaced with an
            attribute from the minknow state when the file is written.
            See file pattern attributes above.
        raw:
            Raw data, stored with channel calibration data  Stored under
            /Raw/Channel_*/Signal
        events:
            Minknow event data  Stored under
            /IntermediateData/Channel_*/Events
        reads:
            Minknow read data  Stored under
            /IntermediateData/Channel_*/Reads
        multiplex:
            Device multiplex data  Stored under
            /MultiplexData/Channel_*/Multiplex
        channel_states:
            Channel state data  Stored under /StateData/Channel_*/States
        device_metadata:
            Device metadata (bias and temperature information)  Stored in
            a per frame sequence in /Device/MetaData
        device_commands:
            Device commands  Stored with the frame commands take effect
            sequence in /Device/AsicCommands
        dynamic_analysis_config:
            Dynamic analysis configuration  Stored with the frame config
            took effect in /Meta/User/DynamicAnalysisConfiguration
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
    })
  ,

  'ReportConfiguration' : _reflection.GeneratedProtocolMessageType('ReportConfiguration', (_message.Message,), {
    'DESCRIPTOR' : _WRITERCONFIGURATION_REPORTCONFIGURATION,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Control settings for the report writer
    
    Attributes:
        pdf_report_file_pattern:
            DEPRECATED 6.0: As of 5.1 a pdf report is not generated at
            all. This field will be removed in 6.0  The pattern used to
            find the pdf report filename. If left empty but output is
            enabled a default pattern is used.  default: report_{flow_cell
            _id}_{daq_start_time}_{short_protocol_run_id}.pdf Where each
            {xxx} section is replaced with an attribute from the minknow
            state when the file is written.  See file pattern attributes
            above.
        json_report_file_pattern:
            The pattern used to find the json report filename. If left
            empty but output is enabled a default pattern is used.
            default: report_{flow_cell_id}_{daq_start_time}_{short_protoco
            l_run_id}.json Where each {xxx} section is replaced with an
            attribute from the minknow state when the file is written.
            See file pattern attributes above.
        html_report_file_pattern:
            The pattern used to find the html report filename. If left
            empty but output is enabled a default pattern is used.
            default: report_{flow_cell_id}_{daq_start_time}_{short_protoco
            l_run_id}.html Where each {xxx} section is replaced with an
            attribute from the minknow state when the file is written.
            See file pattern attributes above.
        markdown_report_file_pattern:
            The pattern used to find the markdown report filename. If left
            empty but output is enabled a default pattern is used.
            default: report_{flow_cell_id}_{daq_start_time}_{short_protoco
            l_run_id}.md Where each {xxx} section is replaced with an
            attribute from the minknow state when the file is written.
            See file pattern attributes above.
        duty_time_report_file_pattern:
            The pattern used to find the duty time csv report. If left
            empty but output is enabled a default pattern is used.
            default: duty_time_{flow_cell_id}_{short_run_id}.csv Where
            each {xxx} section is replaced with an attribute from the
            minknow state when the file is written.  See file pattern
            attributes above.
        throughput_report_file_pattern:
            The pattern used to find the throughput csv report. If left
            empty but output is enabled a default pattern is used.
            default: throughput_{flow_cell_id}_{short_run_id}.csv Where
            each {xxx} section is replaced with an attribute from the
            minknow state when the file is written.  See file pattern
            attributes above.
        final_summary_report_file_pattern:
            The pattern used to find the final summary report. If left
            empty but output is enabled a default pattern is used.
            default: final_summary_{flow_cell_id}_{short_run_id}.txt Where
            each {xxx} section is replaced with an attribute from the
            minknow state when the file is written.  See file pattern
            attributes above.
        barcode_alignment_report_file_pattern:
            The pattern used to name the barcode-alignment report. If left
            empty but output is enabled a default pattern is used.
            default: barcode_alignment_{flow_cell_id}_{short_run_id}.tsv
            Where each {xxx} section is replaced with an attribute from
            the minknow state when the file is written.  See file pattern
            attributes above.
        sample_sheet_report_file_pattern:
            The pattern used to name the sample sheet report. If left
            empty but output is enabled a default pattern is used.
            default: sample_sheet_{flow_cell_id}_{daq_start_time}_{short_p
            rotocol_run_id}.csv Where each {xxx} section is replaced with
            an attribute from the minknow state when the file is written.
            See file pattern attributes above.
        custom_report_suffix_pattern:
            The pattern used to suffix custom reports.  default:
            "_{flow_cell_id}_{short_run_id}" Where each {xxx} section is
            replaced with an attribute from the minknow state when the
            file is written.  Custom reports use this to build filenames:
            - "custom_report{suffix}.txt"  See file pattern attributes
            above.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
    })
  ,
  'DESCRIPTOR' : _WRITERCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Configuration for the output writers for MinKNOWs analysis pipeline.
  Each writer has its own section in this message, where individual data
  elements can be enabled or disabled.  File pattern attributes
  ----------------------- Writers have a 'file_pattern' field which
  controls where individual files will be written to. The pattern is
  expanded for each individual read, and then the read placed in the
  required file. The tokens used to expand depend on the file type:
  Read centric files (fastq, (multi-)fast5, protobuf):  -
  read_classification:  The classification applied to the completed read
  (eg. strand).  - batch_number:         The batch number of this read,
  evaluated based on the destination file.  - read_id:
  Unique read id for each read, formatted as a hash.  - read_number:
  The read number (unique per channel, incrementing number assigned to
  each read by MinKNOW).  - channel_name:         The name of the
  channel which produced the read.  - read_start_time:      Read start
  time formatted in rfc3339 format.  - basecall_status:      Basecalling
  output status (derived from WriterDefaults section in analysis
  config).  - pore_type:            Type of pore (as specified by
  #set_pore_type_configuration).  General attributes:  - daq_start_time:
  Data acquisition start time formatted as YYYYMMDD_hhmm.  -
  protocol_start_time:  Time the current protocol was started.  -
  run_id:               Acquisition run id formatted as hash.  -
  short_run_id:         Shortened version of acquisition run id
  formatted as hash.  - protocol_run_id:      Protocol run id formatted
  as hash.  - short_protocol_run_id: Shortened protocol run id formatted
  as hash.  - asic_id:              Integer id assigned to the asic in
  the connected flow cell.  - flow_cell_id:         Flow cell integer as
  read from eeprom.  - machine_id:           Name of the machine
  (hostname or machine identifier depending on the sequencer type).  -
  device_id:            Name of the connected sequencing device (eg.
  MN12345).  - sample_id:            Sample id entered by the user when
  starting a protocol.  - version_string:       Version string of the
  running MinKNOW instance  - protocol_group_id:    Protocol group
  entered by user when starting a protocol.  - protocol_purpose:
  Prupose of protocol (see protocol.set_protocol_purpose())
  
  Attributes:
      read_fast5:
          Configuration for the fast5 writer.  If not specified, no
          multi fast5 outputs are generated.
      read_fastq:
          Configuration for the fastq writer.  If not specified, no
          fastq outputs are generated.
      read_bam:
          Configuration for the BAM writer.  If not specified, no BAM
          outputs are generated.
      read_pod5:
          Configuration for the POD5 writer.  If not specified no POD5
          outputs are generated.
      read_protobuf:
          Configuration for the protobuf writer.  If not specified, no
          protobuf outputs are generated.
      sequencing_summary:
          Configuration for Sequencing Summary file  If not specified,
          no summary file is generated.
      bulk:
          Configuration for the bulk writer.  If not specified, a basic
          bulk output is generated.
      report:
          Configuration for the report writer  If
          acquisition.StartRequest.generate_report is set for the
          acquisition period, and empty paths (or no report config) are
          supplied for reports default paths are used.
      read_filters:
          Parameters for filtering reads for writing.  If not present,
          then no filtering will be applied, so no reads will be
          excluded.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration)
  })
_sym_db.RegisterMessage(WriterConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.ChannelConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.ChannelConfiguration.ChannelList)
_sym_db.RegisterMessage(WriterConfiguration.ChannelConfiguration.ChannelRanges)
_sym_db.RegisterMessage(WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
_sym_db.RegisterMessage(WriterConfiguration.ReadFast5Configuration)
_sym_db.RegisterMessage(WriterConfiguration.ReadFastqConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.ReadBamConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.ReadPod5Configuration)
_sym_db.RegisterMessage(WriterConfiguration.ReadProtobufConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.SequencingSummaryConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.BulkConfiguration)
_sym_db.RegisterMessage(WriterConfiguration.ReportConfiguration)

SetWriterConfigurationResponse = _reflection.GeneratedProtocolMessageType('SetWriterConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETWRITERCONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetWriterConfigurationResponse)
  })
_sym_db.RegisterMessage(SetWriterConfigurationResponse)

GetWriterConfigurationRequest = _reflection.GeneratedProtocolMessageType('GetWriterConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETWRITERCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetWriterConfigurationRequest)
  })
_sym_db.RegisterMessage(GetWriterConfigurationRequest)

GetReadClassificationsRequest = _reflection.GeneratedProtocolMessageType('GetReadClassificationsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETREADCLASSIFICATIONSREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetReadClassificationsRequest)
  })
_sym_db.RegisterMessage(GetReadClassificationsRequest)

GetReadClassificationsResponse = _reflection.GeneratedProtocolMessageType('GetReadClassificationsResponse', (_message.Message,), {

  'ReadClassificationsEntry' : _reflection.GeneratedProtocolMessageType('ReadClassificationsEntry', (_message.Message,), {
    'DESCRIPTOR' : _GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry)
    })
  ,
  'DESCRIPTOR' : _GETREADCLASSIFICATIONSRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  })
_sym_db.RegisterMessage(GetReadClassificationsResponse)
_sym_db.RegisterMessage(GetReadClassificationsResponse.ReadClassificationsEntry)

DynamicAnalysisConfiguration = _reflection.GeneratedProtocolMessageType('DynamicAnalysisConfiguration', (_message.Message,), {

  'ReadScaleTracking' : _reflection.GeneratedProtocolMessageType('ReadScaleTracking', (_message.Message,), {

    'ChannelConductance' : _reflection.GeneratedProtocolMessageType('ChannelConductance', (_message.Message,), {
      'DESCRIPTOR' : _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING_CHANNELCONDUCTANCE,
      '__module__' : 'minknow_api.analysis_configuration_pb2'
      ,
      '__doc__': """Attributes:
          well_conductance:
              Per well conductance values.
      """,
      # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.DynamicAnalysisConfiguration.ReadScaleTracking.ChannelConductance)
      })
    ,
    'DESCRIPTOR' : _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING,
    '__module__' : 'minknow_api.analysis_configuration_pb2'
    ,
    '__doc__': """Attributes:
        conductance_scan_voltage:
            Set the voltage the most recent conductance scan occured at.
        channel_conductance:
            Per channel/well conductance values
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.DynamicAnalysisConfiguration.ReadScaleTracking)
    })
  ,
  'DESCRIPTOR' : _DYNAMICANALYSISCONFIGURATION,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  ,
  '__doc__': """Attributes:
      read_scale_tracking:
          Parameters for read scale tracking:
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.DynamicAnalysisConfiguration)
  })
_sym_db.RegisterMessage(DynamicAnalysisConfiguration)
_sym_db.RegisterMessage(DynamicAnalysisConfiguration.ReadScaleTracking)
_sym_db.RegisterMessage(DynamicAnalysisConfiguration.ReadScaleTracking.ChannelConductance)

GetDynamicAnalysisConfigurationRequest = _reflection.GeneratedProtocolMessageType('GetDynamicAnalysisConfigurationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETDYNAMICANALYSISCONFIGURATIONREQUEST,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetDynamicAnalysisConfigurationRequest)
  })
_sym_db.RegisterMessage(GetDynamicAnalysisConfigurationRequest)

SetDynamicAnalysisConfigurationResponse = _reflection.GeneratedProtocolMessageType('SetDynamicAnalysisConfigurationResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETDYNAMICANALYSISCONFIGURATIONRESPONSE,
  '__module__' : 'minknow_api.analysis_configuration_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetDynamicAnalysisConfigurationResponse)
  })
_sym_db.RegisterMessage(SetDynamicAnalysisConfigurationResponse)

_ANALYSISCONFIGURATIONSERVICE = DESCRIPTOR.services_by_name['AnalysisConfigurationService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.nanoporetech.minknow_api\242\002\005MKAPI'
  _ANALYSISCONFIGURATION_CHANNELSTATESENTRY._options = None
  _ANALYSISCONFIGURATION_CHANNELSTATESENTRY._serialized_options = b'8\001'
  _SETANALYSISENABLEDSTATEREQUEST.fields_by_name['enable']._options = None
  _SETANALYSISENABLEDSTATEREQUEST.fields_by_name['enable']._serialized_options = b'\210\265\030\001'
  _SETBASECALLERCONFIGURATIONREQUEST.fields_by_name['configs']._options = None
  _SETBASECALLERCONFIGURATIONREQUEST.fields_by_name['configs']._serialized_options = b'\220\265\030\001'
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY._options = None
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY._serialized_options = b'8\001'
  _GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY._options = None
  _GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY._serialized_options = b'8\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_analysis_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_analysis_configuration']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_analysis_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_analysis_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['reset_analysis_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['reset_analysis_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_analysis_enabled_state']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_analysis_enabled_state']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_channel_states_desc']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_channel_states_desc']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_summary']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_summary']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_basecaller_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_basecaller_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['preload_basecaller_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['preload_basecaller_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_basecaller_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_basecaller_configuration']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_pore_type_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_pore_type_configuration']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_pore_type_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_pore_type_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_writer_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['set_writer_configuration']._serialized_options = b'\220\002\002'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_writer_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_writer_configuration']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_read_classifications']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_read_classifications']._serialized_options = b'\220\002\001'
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_dynamic_analysis_configuration']._options = None
  _ANALYSISCONFIGURATIONSERVICE.methods_by_name['get_dynamic_analysis_configuration']._serialized_options = b'\220\002\001'
  _EVENTDETECTION._serialized_start=144
  _EVENTDETECTION._serialized_end=346
  _READDETECTIONPARAMS._serialized_start=349
  _READDETECTIONPARAMS._serialized_end=973
  _READDETECTIONPARAMS_READDETECTIONMODE._serialized_start=902
  _READDETECTIONPARAMS_READDETECTIONMODE._serialized_end=973
  _READFILTERS._serialized_start=975
  _READFILTERS._serialized_end=1088
  _READCLASSIFICATIONPARAMS._serialized_start=1091
  _READCLASSIFICATIONPARAMS._serialized_end=1676
  _READCLASSIFICATIONPARAMS_PARAMETERS._serialized_start=1598
  _READCLASSIFICATIONPARAMS_PARAMETERS._serialized_end=1644
  _READCLASSIFICATIONPARAMS_SCHEME._serialized_start=1646
  _READCLASSIFICATIONPARAMS_SCHEME._serialized_end=1676
  _CHANNELSTATES._serialized_start=1679
  _CHANNELSTATES._serialized_end=2668
  _CHANNELSTATES_LOGIC._serialized_start=1934
  _CHANNELSTATES_LOGIC._serialized_end=2488
  _CHANNELSTATES_LOGIC_BEHAVIOUR._serialized_start=2183
  _CHANNELSTATES_LOGIC_BEHAVIOUR._serialized_end=2347
  _CHANNELSTATES_LOGIC_RANGES._serialized_start=2350
  _CHANNELSTATES_LOGIC_RANGES._serialized_end=2488
  _CHANNELSTATES_LOGIC_RANGES_RANGE._serialized_start=2445
  _CHANNELSTATES_LOGIC_RANGES_RANGE._serialized_end=2488
  _CHANNELSTATES_STYLE._serialized_start=2490
  _CHANNELSTATES_STYLE._serialized_end=2573
  _CHANNELSTATES_GROUP._serialized_start=2575
  _CHANNELSTATES_GROUP._serialized_end=2668
  _GETANALYSISCONFIGURATIONREQUEST._serialized_start=2670
  _GETANALYSISCONFIGURATIONREQUEST._serialized_end=2703
  _READSCALINGPARAMS._serialized_start=2706
  _READSCALINGPARAMS._serialized_end=3107
  _ANALYSISCONFIGURATION._serialized_start=3110
  _ANALYSISCONFIGURATION._serialized_end=3666
  _ANALYSISCONFIGURATION_CHANNELSTATESENTRY._serialized_start=3563
  _ANALYSISCONFIGURATION_CHANNELSTATESENTRY._serialized_end=3666
  _SETANALYSISCONFIGURATIONRESPONSE._serialized_start=3668
  _SETANALYSISCONFIGURATIONRESPONSE._serialized_end=3702
  _RESETANALYSISCONFIGURATIONREQUEST._serialized_start=3704
  _RESETANALYSISCONFIGURATIONREQUEST._serialized_end=3739
  _RESETANALYSISCONFIGURATIONRESPONSE._serialized_start=3741
  _RESETANALYSISCONFIGURATIONRESPONSE._serialized_end=3777
  _SETANALYSISENABLEDSTATEREQUEST._serialized_start=3779
  _SETANALYSISENABLEDSTATEREQUEST._serialized_end=3833
  _SETANALYSISENABLEDSTATERESPONSE._serialized_start=3835
  _SETANALYSISENABLEDSTATERESPONSE._serialized_end=3868
  _GETCHANNELSTATESDESCREQUEST._serialized_start=3870
  _GETCHANNELSTATESDESCREQUEST._serialized_end=3899
  _GETCHANNELSTATESDESCRESPONSE._serialized_start=3902
  _GETCHANNELSTATESDESCRESPONSE._serialized_end=4439
  _GETCHANNELSTATESDESCRESPONSE_STYLE._serialized_start=4022
  _GETCHANNELSTATESDESCRESPONSE_STYLE._serialized_end=4081
  _GETCHANNELSTATESDESCRESPONSE_CHANNELSTATE._serialized_start=4084
  _GETCHANNELSTATESDESCRESPONSE_CHANNELSTATE._serialized_end=4233
  _GETCHANNELSTATESDESCRESPONSE_GROUP._serialized_start=4236
  _GETCHANNELSTATESDESCRESPONSE_GROUP._serialized_end=4439
  _GETSUMMARYREQUEST._serialized_start=4441
  _GETSUMMARYREQUEST._serialized_end=4460
  _GETSUMMARYRESPONSE._serialized_start=4462
  _GETSUMMARYRESPONSE._serialized_end=4537
  _BARCODINGCONFIGURATION._serialized_start=4540
  _BARCODINGCONFIGURATION._serialized_end=4889
  _ALIGNMENTCONFIGURATION._serialized_start=4892
  _ALIGNMENTCONFIGURATION._serialized_end=5066
  _LAMPCONFIGURATION._serialized_start=5069
  _LAMPCONFIGURATION._serialized_end=5273
  _BASECALLERCONFIGURATION._serialized_start=5276
  _BASECALLERCONFIGURATION._serialized_end=6422
  _BASECALLERCONFIGURATION_READFILTERING._serialized_start=5932
  _BASECALLERCONFIGURATION_READFILTERING._serialized_end=6254
  _BASECALLERCONFIGURATION_TARGETFILTERING._serialized_start=6257
  _BASECALLERCONFIGURATION_TARGETFILTERING._serialized_end=6422
  _SETBASECALLERCONFIGURATIONREQUEST._serialized_start=6424
  _SETBASECALLERCONFIGURATIONREQUEST._serialized_end=6543
  _SETBASECALLERCONFIGURATIONRESPONSE._serialized_start=6545
  _SETBASECALLERCONFIGURATIONRESPONSE._serialized_end=6581
  _GETBASECALLERCONFIGURATIONREQUEST._serialized_start=6583
  _GETBASECALLERCONFIGURATIONREQUEST._serialized_end=6618
  _GETPORETYPECONFIGURATIONREQUEST._serialized_start=6620
  _GETPORETYPECONFIGURATIONREQUEST._serialized_end=6653
  _PORETYPECONFIGURATION._serialized_start=6656
  _PORETYPECONFIGURATION._serialized_end=7339
  _PORETYPECONFIGURATION_CHANNELWELL._serialized_start=6837
  _PORETYPECONFIGURATION_CHANNELWELL._serialized_end=6881
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS._serialized_start=6884
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS._serialized_end=7319
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_CHANNELWELLLIST._serialized_start=7049
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_CHANNELWELLLIST._serialized_end=7159
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY._serialized_start=7162
  _PORETYPECONFIGURATION_CHANNELWELLPORETYPECONFIGURATIONS_PORETYPESENTRY._serialized_end=7319
  _SETPORETYPECONFIGURATIONRESPONSE._serialized_start=7341
  _SETPORETYPECONFIGURATIONRESPONSE._serialized_end=7375
  _WRITERCONFIGURATION._serialized_start=7378
  _WRITERCONFIGURATION._serialized_end=11861
  _WRITERCONFIGURATION_CHANNELCONFIGURATION._serialized_start=8271
  _WRITERCONFIGURATION_CHANNELCONFIGURATION._serialized_end=8782
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELLIST._serialized_start=8556
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELLIST._serialized_end=8587
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES._serialized_start=8590
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES._serialized_end=8770
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES_CHANNELRANGE._serialized_start=8728
  _WRITERCONFIGURATION_CHANNELCONFIGURATION_CHANNELRANGES_CHANNELRANGE._serialized_end=8770
  _WRITERCONFIGURATION_READFAST5CONFIGURATION._serialized_start=8785
  _WRITERCONFIGURATION_READFAST5CONFIGURATION._serialized_end=9617
  _WRITERCONFIGURATION_READFASTQCONFIGURATION._serialized_start=9620
  _WRITERCONFIGURATION_READFASTQCONFIGURATION._serialized_end=9826
  _WRITERCONFIGURATION_READBAMCONFIGURATION._serialized_start=9829
  _WRITERCONFIGURATION_READBAMCONFIGURATION._serialized_end=10033
  _WRITERCONFIGURATION_READPOD5CONFIGURATION._serialized_start=10036
  _WRITERCONFIGURATION_READPOD5CONFIGURATION._serialized_end=10317
  _WRITERCONFIGURATION_READPROTOBUFCONFIGURATION._serialized_start=10320
  _WRITERCONFIGURATION_READPROTOBUFCONFIGURATION._serialized_end=10484
  _WRITERCONFIGURATION_SEQUENCINGSUMMARYCONFIGURATION._serialized_start=10487
  _WRITERCONFIGURATION_SEQUENCINGSUMMARYCONFIGURATION._serialized_end=10635
  _WRITERCONFIGURATION_BULKCONFIGURATION._serialized_start=10638
  _WRITERCONFIGURATION_BULKCONFIGURATION._serialized_end=11365
  _WRITERCONFIGURATION_REPORTCONFIGURATION._serialized_start=11368
  _WRITERCONFIGURATION_REPORTCONFIGURATION._serialized_end=11777
  _WRITERCONFIGURATION_COMPRESSIONTYPE._serialized_start=11779
  _WRITERCONFIGURATION_COMPRESSIONTYPE._serialized_end=11861
  _SETWRITERCONFIGURATIONRESPONSE._serialized_start=11863
  _SETWRITERCONFIGURATIONRESPONSE._serialized_end=11895
  _GETWRITERCONFIGURATIONREQUEST._serialized_start=11897
  _GETWRITERCONFIGURATIONREQUEST._serialized_end=11928
  _GETREADCLASSIFICATIONSREQUEST._serialized_start=11930
  _GETREADCLASSIFICATIONSREQUEST._serialized_end=11961
  _GETREADCLASSIFICATIONSRESPONSE._serialized_start=11964
  _GETREADCLASSIFICATIONSRESPONSE._serialized_end=12179
  _GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY._serialized_start=12121
  _GETREADCLASSIFICATIONSRESPONSE_READCLASSIFICATIONSENTRY._serialized_end=12179
  _DYNAMICANALYSISCONFIGURATION._serialized_start=12182
  _DYNAMICANALYSISCONFIGURATION._serialized_end=12562
  _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING._serialized_start=12328
  _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING._serialized_end=12562
  _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING_CHANNELCONDUCTANCE._serialized_start=12516
  _DYNAMICANALYSISCONFIGURATION_READSCALETRACKING_CHANNELCONDUCTANCE._serialized_end=12562
  _GETDYNAMICANALYSISCONFIGURATIONREQUEST._serialized_start=12564
  _GETDYNAMICANALYSISCONFIGURATIONREQUEST._serialized_end=12604
  _SETDYNAMICANALYSISCONFIGURATIONRESPONSE._serialized_start=12606
  _SETDYNAMICANALYSISCONFIGURATIONRESPONSE._serialized_end=12647
  _ANALYSISCONFIGURATIONSERVICE._serialized_start=12650
  _ANALYSISCONFIGURATIONSERVICE._serialized_end=15382
# @@protoc_insertion_point(module_scope)
