# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: minknow_api/manager.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from minknow_api import rpc_options_pb2 as minknow__api_dot_rpc__options__pb2
from minknow_api import device_pb2 as minknow__api_dot_device__pb2
from minknow_api import instance_pb2 as minknow__api_dot_instance__pb2
from minknow_api import protocol_settings_pb2 as minknow__api_dot_protocol__settings__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x19minknow_api/manager.proto\x12\x13minknow_api.manager\x1a\x1dminknow_api/rpc_options.proto\x1a\x18minknow_api/device.proto\x1a\x1aminknow_api/instance.proto\x1a#minknow_api/protocol_settings.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x15\n\x13\x44\x65scribeHostRequest\"\xad\x03\n\x14\x44\x65scribeHostResponse\x12\x14\n\x0cproduct_code\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x0e\n\x06serial\x18\x03 \x01(\t\x12\x14\n\x0cnetwork_name\x18\x04 \x01(\t\x12\x19\n\x11needs_association\x18\x10 \x01(\x08\x12\x1c\n\x14\x63\x61n_sequence_offline\x18\x05 \x01(\x08\x12W\n\x0c\x63\x61n_basecall\x18\x06 \x01(\x0e\x32\x41.minknow_api.manager.DescribeHostResponse.BasecallingAvailability\"\xb1\x01\n\x17\x42\x61secallingAvailability\x12\x19\n\x15\x42\x41SECALLING_AVAILABLE\x10\x00\x12\x1b\n\x17\x42\x41SECALLING_UNAVAILABLE\x10\x01\x12-\n)BASECALLING_UNAVAILABLE_BAD_CONFIGURATION\x10\x02\x12/\n+BASECALLING_UNAVAILABLE_ATTEMPTING_RECOVERY\x10\x03\"\xf3\x06\n\x10\x46lowCellPosition\x12\x0c\n\x04name\x18\x01 \x01(\t\x12@\n\x08location\x18\x02 \x01(\x0b\x32..minknow_api.manager.FlowCellPosition.Location\x12:\n\x05state\x18\x03 \x01(\x0e\x32+.minknow_api.manager.FlowCellPosition.State\x12\x41\n\trpc_ports\x18\x04 \x01(\x0b\x32..minknow_api.manager.FlowCellPosition.RpcPorts\x12\x12\n\nerror_info\x18\x05 \x01(\t\x12X\n\x15shared_hardware_group\x18\x06 \x01(\x0b\x32\x39.minknow_api.manager.FlowCellPosition.SharedHardwareGroup\x12\x15\n\ris_integrated\x18\x07 \x01(\x08\x12\x1c\n\x14\x63\x61n_sequence_offline\x18\x08 \x01(\x08\x12@\n\x0eprotocol_state\x18\t \x01(\x0e\x32(.minknow_api.manager.SimpleProtocolState\x12\x14\n\x0cis_simulated\x18\n \x01(\x08\x12I\n\x0b\x64\x65vice_type\x18\x0b \x01(\x0e\x32\x34.minknow_api.device.GetDeviceInfoResponse.DeviceType\x12\x13\n\x0bparent_name\x18\x0c \x01(\t\x1a \n\x08Location\x12\t\n\x01x\x18\x01 \x01(\x05\x12\t\n\x01y\x18\x02 \x01(\x05\x1a\x33\n\x08RpcPorts\x12\x0e\n\x06secure\x18\x01 \x01(\r\x12\x17\n\x0fsecure_grpc_web\x18\x03 \x01(\r\x1a\'\n\x13SharedHardwareGroup\x12\x10\n\x08group_id\x18\x01 \x01(\r\"\xb4\x01\n\x05State\x12\x16\n\x12STATE_INITIALISING\x10\x00\x12\x11\n\rSTATE_RUNNING\x10\x01\x12\x13\n\x0fSTATE_RESETTING\x10\x02\x12\x1a\n\x16STATE_HARDWARE_REMOVED\x10\x03\x12\x18\n\x14STATE_HARDWARE_ERROR\x10\x04\x12\x18\n\x14STATE_SOFTWARE_ERROR\x10\x05\x12\x1b\n\x17STATE_NEEDS_ASSOCIATION\x10\x06\"\x1a\n\x18\x46lowCellPositionsRequest\"j\n\x19\x46lowCellPositionsResponse\x12\x13\n\x0btotal_count\x18\x01 \x01(\x05\x12\x38\n\tpositions\x18\x02 \x03(\x0b\x32%.minknow_api.manager.FlowCellPosition\"\x1f\n\x1dWatchFlowCellPositionsRequest\"\xa4\x01\n\x1eWatchFlowCellPositionsResponse\x12\x38\n\tadditions\x18\x01 \x03(\x0b\x32%.minknow_api.manager.FlowCellPosition\x12\x36\n\x07\x63hanges\x18\x02 \x03(\x0b\x32%.minknow_api.manager.FlowCellPosition\x12\x10\n\x08removals\x18\x03 \x03(\t\"8\n\x14ResetPositionRequest\x12\x11\n\tpositions\x18\x03 \x03(\t\x12\r\n\x05\x66orce\x18\x02 \x01(\x08\"\x17\n\x15ResetPositionResponse\"\x16\n\x14\x42\x61secallerApiRequest\"@\n\x15\x42\x61secallerApiResponse\x12\x0e\n\x06secure\x18\x01 \x01(\r\x12\x17\n\x0fsecure_grpc_web\x18\x03 \x01(\r\"\x15\n\x13GetGuppyInfoRequest\"^\n\x14GetGuppyInfoResponse\x12\x0e\n\x04port\x18\x01 \x01(\rH\x00\x12\x12\n\x08ipc_path\x18\x03 \x01(\tH\x00\x12\x0f\n\x07version\x18\x02 \x01(\tB\x11\n\x0f\x63onnection_type\"\x17\n\x15GetVersionInfoRequest\"1\n!ListProtocolOutputDirFilesRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\"\xf8\x01\n\"ListProtocolOutputDirFilesResponse\x12Z\n\x0b\x64irectories\x18\x01 \x03(\x0b\x32\x45.minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo\x12\r\n\x05\x66iles\x18\x02 \x03(\t\x12\x1b\n\x13\x63urrent_listed_path\x18\x03 \x01(\t\x1aJ\n\rDirectoryInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x17\n\x0f\x64irectory_count\x18\x02 \x01(\x05\x12\x12\n\nfile_count\x18\x03 \x01(\x05\";\n\x16\x43reateDirectoryRequest\x12\x13\n\x0bparent_path\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\"\'\n\x17\x43reateDirectoryResponse\x12\x0c\n\x04path\x18\x01 \x01(\t\"\x87\x02\n\x17\x46ilesystemDiskSpaceInfo\x12\x15\n\rfilesystem_id\x18\x01 \x01(\t\x12\x17\n\x0f\x62ytes_available\x18\x02 \x01(\x04\x12\x16\n\x0e\x62ytes_capacity\x18\x03 \x01(\x04\x12\x19\n\x11\x66ile_types_stored\x18\x04 \x03(\t\x12\x1d\n\x15\x62ytes_to_stop_cleanly\x18\x05 \x01(\x04\x12\x1f\n\x17\x62ytes_when_alert_issued\x18\x06 \x01(\x04\x12\x17\n\x0frecommend_alert\x18\x07 \x01(\x08\x12\x16\n\x0erecommend_stop\x18\x08 \x01(\x08\x12\x18\n\x10\x62ytes_per_second\x18\t \x01(\x03\"\x19\n\x17GetDiskSpaceInfoRequest\",\n\x1aStreamDiskSpaceInfoRequest\x12\x0e\n\x06period\x18\x01 \x01(\r\"l\n\x18GetDiskSpaceInfoResponse\x12P\n\x1a\x66ilesystem_disk_space_info\x18\x01 \x03(\x0b\x32,.minknow_api.manager.FilesystemDiskSpaceInfo\"\x1a\n\x18GetBarcodeKitInfoRequest\"\xa8\x02\n\x19GetBarcodeKitInfoResponse\x12\\\n\x10\x62\x61rcode_kit_info\x18\x01 \x03(\x0b\x32\x42.minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry\x1a\x37\n\x0e\x42\x61rcodeKitInfo\x12\x0f\n\x07is_dual\x18\x02 \x01(\x08\x12\x14\n\x0cis_both_ends\x18\x03 \x01(\x08\x1at\n\x13\x42\x61rcodeKitInfoEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12L\n\x05value\x18\x02 \x01(\x0b\x32=.minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo:\x02\x38\x01\"\x17\n\x15GetLampKitInfoRequest\"+\n\x16GetLampKitInfoResponse\x12\x11\n\tlamp_kits\x18\x02 \x03(\t\"I\n\x15GetBarcodeKeysRequest\x12\x19\n\x11\x62\x61rcode_kit_names\x18\x01 \x03(\t\x12\x15\n\rlamp_kit_name\x18\x02 \x01(\t\"X\n\x16GetBarcodeKeysResponse\x12\x14\n\x0c\x62\x61rcode_keys\x18\x01 \x03(\t\x12\x11\n\tlamp_keys\x18\x02 \x03(\t\x12\x15\n\rcombined_keys\x18\x03 \x03(\t\"\x19\n\x17GetFlowCellTypesRequest\"\xdc\x01\n\x18GetFlowCellTypesResponse\x12\x41\n\x05types\x18\x01 \x03(\x0b\x32\x32.minknow_api.manager.GetFlowCellTypesResponse.Info\x1a}\n\x04Info\x12\x14\n\x0cproduct_code\x18\x01 \x01(\t\x12\x41\n\x0e\x63onnector_type\x18\x02 \x01(\x0e\x32).minknow_api.device.FlowCellConnectorType\x12\x1c\n\x14\x63\x61nnot_live_basecall\x18\x03 \x01(\x08\":\n\x18GetSequencingKitsRequest\x12\x1e\n\x16\x66low_cell_product_code\x18\x01 \x01(\t\"\xf2\x03\n\x19GetSequencingKitsResponse\x12@\n\x04kits\x18\x01 \x03(\x0b\x32\x32.minknow_api.manager.GetSequencingKitsResponse.Kit\x12\x66\n\x18\x62\x61rcoding_expansion_kits\x18\x02 \x03(\x0b\x32\x44.minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit\x1a\xfb\x01\n\x03Kit\x12\x14\n\x0cproduct_code\x18\x01 \x01(\t\x12 \n\x18\x62\x61rcoding_expansion_kits\x18\x02 \x03(\x05\x12\x1a\n\x12includes_barcoding\x18\x03 \x01(\x08\x12\x10\n\x08lamp_kit\x18\x10 \x01(\x08\x12\x1c\n\x14has_control_protocol\x18\x04 \x01(\x08\x12\x1e\n\x16no_sequencing_protocol\x18\x11 \x01(\x08\x12\x17\n\x0f\x66requently_used\x18\x12 \x01(\x08\x12\x0b\n\x03\x64na\x18\x05 \x01(\x08\x12\x0b\n\x03rna\x18\x06 \x01(\x08\x12\x0b\n\x03pcr\x18\x07 \x01(\x08\x12\x10\n\x08pcr_free\x18\x08 \x01(\x08\x1a-\n\x15\x42\x61rcodingExpansionKit\x12\x14\n\x0cproduct_code\x18\x01 \x01(\t\"m\n\x19\x41\x64\x64SimulatedDeviceRequest\x12\x12\n\x04name\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\x12<\n\x04type\x18\x02 \x01(\x0e\x32(.minknow_api.manager.SimulatedDeviceTypeB\x04\x88\xb5\x18\x01\"\x1c\n\x1a\x41\x64\x64SimulatedDeviceResponse\"2\n\x1cRemoveSimulatedDeviceRequest\x12\x12\n\x04name\x18\x01 \x01(\tB\x04\x88\xb5\x18\x01\"\x1f\n\x1dRemoveSimulatedDeviceResponse\"%\n#LocalAuthenticationTokenPathRequest\"4\n$LocalAuthenticationTokenPathResponse\x12\x0c\n\x04path\x18\x01 \x01(\t\"7\n\'GetAlignmentReferenceInformationRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\"\x97\x01\n(GetAlignmentReferenceInformationResponse\x12#\n\x1b\x65stimated_load_time_seconds\x18\x01 \x01(\x02\x12&\n\x1e\x65stimated_reference_size_bases\x18\x02 \x01(\x04\x12\x1e\n\x16recommended_live_usage\x18\x03 \x01(\x08\"D\n\x1c\x41ssociationDeviceCodeRequest\x12\x15\n\rposition_name\x18\x01 \x01(\tJ\x04\x08\x02\x10\x03R\x07offline\"-\n\x1d\x41ssociationDeviceCodeResponse\x12\x0c\n\x04\x63ode\x18\x01 \x01(\t\"V\n(ApplyOfflineAssociationUnlockCodeRequest\x12\x15\n\rposition_name\x18\x01 \x01(\t\x12\x13\n\x0bunlock_code\x18\x02 \x01(\t\"?\n)ApplyOfflineAssociationUnlockCodeResponse\x12\x12\n\nassociated\x18\x01 \x01(\x08\"\x1f\n\x1dListDeveloperApiTokensRequest\"\xd2\x01\n\x1eListDeveloperApiTokensResponse\x12U\n\x06tokens\x18\x01 \x03(\x0b\x32\x45.minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken\x1aY\n\x11\x44\x65veloperApiToken\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12*\n\x06\x65xpiry\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"Z\n\x1e\x43reateDeveloperApiTokenRequest\x12\x0c\n\x04name\x18\x02 \x01(\t\x12*\n\x06\x65xpiry\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"<\n\x1f\x43reateDeveloperApiTokenResponse\x12\n\n\x02id\x18\x01 \x01(\t\x12\r\n\x05token\x18\x02 \x01(\t\",\n\x1eRevokeDeveloperApiTokenRequest\x12\n\n\x02id\x18\x01 \x01(\t\"\"\n RevokeDeveloperApiTokensResponse\"\x8c\x01\n\x14\x46indProtocolsRequest\x12\x1e\n\x16\x66low_cell_product_code\x18\x01 \x01(\t\x12\x16\n\x0esequencing_kit\x18\x02 \x01(\t\x12<\n\x0f\x65xperiment_type\x18\x03 \x01(\x0e\x32#.minknow_api.manager.ExperimentType\"\xc9\x01\n\x15\x46indProtocolsResponse\x12\x46\n\tprotocols\x18\x01 \x03(\x0b\x32\x33.minknow_api.manager.FindProtocolsResponse.Protocol\x1ah\n\x08Protocol\x12\x12\n\nidentifier\x18\x01 \x01(\t\x12\'\n\x1frequires_flow_cell_product_code\x18\x02 \x01(\x08\x12\x1f\n\x17requires_sequencing_kit\x18\x03 \x01(\x08\"\xee\x01\n\x1eListSettingsForProtocolRequest\x12\x14\n\nidentifier\x18\x01 \x01(\tH\x00\x12Q\n\ncomponents\x18\x02 \x01(\x0b\x32;.minknow_api.protocol_settings.ProtocolIdentifierComponentsH\x00\x12L\n\x13\x66low_cell_connector\x18\x03 \x01(\x0e\x32).minknow_api.device.FlowCellConnectorTypeB\x04\x88\xb5\x18\x01\x42\x15\n\x13protocol_identifier\"\xa3\"\n\x1fListSettingsForProtocolResponse\x12M\n\x08protocol\x18\x01 \x01(\x0b\x32;.minknow_api.protocol_settings.ProtocolIdentifierComponents\x12T\n\x0brun_options\x18\x02 \x01(\x0b\x32?.minknow_api.manager.ListSettingsForProtocolResponse.RunOptions\x12U\n\x0b\x62\x61secalling\x18\x03 \x01(\x0b\x32@.minknow_api.manager.ListSettingsForProtocolResponse.Basecalling\x12K\n\x06output\x18\x04 \x01(\x0b\x32;.minknow_api.manager.ListSettingsForProtocolResponse.Output\x12I\n\x11protocol_settings\x18\x05 \x03(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x1a\xd5\x06\n\nRunOptions\x12\x42\n\nrun_length\x18\x01 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x44\n\x0c\x62ias_voltage\x18\x02 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12J\n\x12read_until_enabled\x18\x03 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12K\n\x13read_until_ref_file\x18\x04 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12K\n\x13read_until_channels\x18\x05 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12S\n\x1bread_until_bed_file_enabled\x18\x06 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12K\n\x13read_until_bed_file\x18\x07 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12M\n\x15read_until_enrichment\x18\x08 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12P\n\x18\x61\x63tive_channel_selection\x18\t \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12G\n\x0fmux_scan_period\x18\n \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12K\n\x13group_change_period\x18\x0b \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x1a\x80\n\n\x0b\x42\x61secalling\x12K\n\x13\x62\x61secalling_enabled\x18\x01 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12I\n\x11\x62\x61rcoding_enabled\x18\x02 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x46\n\x0e\x62\x61rcoding_kits\x18\x03 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x46\n\x0e\x62\x61secall_model\x18\x04 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12M\n\x15trim_barcodes_enabled\x18\x05 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12R\n\x1arequire_barcodes_both_ends\x18\x06 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12R\n\x1a\x64\x65tect_mid_strand_barcodes\x18\x07 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12T\n\x1coverride_mid_barcoding_score\x18\x08 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12U\n\x1doverride_rear_barcoding_score\x18\t \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12K\n\x13min_barcoding_score\x18\n \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12P\n\x18min_barcoding_score_rear\x18\x0b \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12O\n\x17min_barcoding_score_mid\x18\x0c \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12I\n\x11\x61lignment_enabled\x18\r \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12J\n\x12\x61lignment_ref_file\x18\x0e \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12R\n\x1a\x61lignment_bed_file_enabled\x18\x0f \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12J\n\x12\x61lignment_bed_file\x18\x10 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x1a\x90\x0e\n\x06Output\x12G\n\x0foutput_location\x18\x01 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x46\n\x0e\x66\x61st_q_enabled\x18\x02 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12M\n\x15\x66\x61st_q_reads_per_file\x18\x03 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12O\n\x17\x66\x61st_q_data_compression\x18\x04 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x46\n\x0e\x66\x61st_5_enabled\x18\x05 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12M\n\x15\x66\x61st_5_reads_per_file\x18\x06 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12O\n\x17\x66\x61st_5_data_trace_table\x18\x07 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12N\n\x16\x66\x61st_5_data_move_table\x18\x08 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12J\n\x12\x66\x61st_5_data_fast_q\x18\t \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12G\n\x0f\x66\x61st_5_data_raw\x18\n \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12O\n\x17\x66\x61st_5_data_compression\x18\x0b \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x43\n\x0b\x62\x61m_enabled\x18\x0c \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12N\n\x16read_filtering_enabled\x18\r \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12Q\n\x19read_filtering_min_qscore\x18\x0e \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12V\n\x1eread_filtering_min_read_length\x18\x0f \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12V\n\x1eread_filtering_max_read_length\x18\x10 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12I\n\x11\x62ulk_file_enabled\x18\x11 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12\x45\n\rbulk_file_raw\x18\x12 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12H\n\x10\x62ulk_file_events\x18\x13 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12L\n\x14\x62ulk_file_read_table\x18\x14 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12M\n\x15\x62ulk_file_raw_enabled\x18\x15 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12P\n\x18\x62ulk_file_events_enabled\x18\x16 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\x12T\n\x1c\x62ulk_file_read_table_enabled\x18\x17 \x01(\x0b\x32..minknow_api.protocol_settings.ProtocolSetting\"\x1a\n\x07\x46\x65\x61ture\x12\x0f\n\x07\x65nabled\x18\x01 \x01(\x08\"\xe5\x01\n\x0b\x46\x65\x61tureList\x12\x33\n\rfeature_flags\x18\x03 \x01(\x0b\x32\x1c.minknow_api.manager.Feature\x12\x34\n\x0e\x65nrich_deplete\x18\x01 \x01(\x0b\x32\x1c.minknow_api.manager.Feature\x12\x37\n\x11\x62\x61rcode_balancing\x18\x02 \x01(\x0b\x32\x1c.minknow_api.manager.Feature\x12\x32\n\x0c\x64\x61ta_offload\x18\x04 \x01(\x0b\x32\x1c.minknow_api.manager.Feature\"\x14\n\x12GetFeaturesRequest\"\xde\x01\n\x13GetFeaturesResponse\x12=\n\x05state\x18\x01 \x01(\x0e\x32..minknow_api.manager.GetFeaturesResponse.State\x12\x32\n\x08\x66\x65\x61tures\x18\x02 \x01(\x0b\x32 .minknow_api.manager.FeatureList\"T\n\x05State\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0b\n\x07NO_FILE\x10\x01\x12\x1b\n\x17\x45RROR_LOADING_FROM_FILE\x10\x02\x12\x14\n\x10LOADED_FROM_FILE\x10\x03\"H\n\x12SetFeaturesRequest\x12\x32\n\x08\x66\x65\x61tures\x18\x01 \x01(\x0b\x32 .minknow_api.manager.FeatureList\"\x15\n\x13SetFeaturesResponse*\x88\x01\n\x13SimpleProtocolState\x12\x15\n\x11NO_PROTOCOL_STATE\x10\x00\x12\x14\n\x10PROTOCOL_RUNNING\x10\x01\x12\"\n\x1ePROTOCOL_FINISHED_SUCCESSFULLY\x10\x02\x12 \n\x1cPROTOCOL_FINISHED_WITH_ERROR\x10\x03*\x82\x01\n\x13SimulatedDeviceType\x12\x12\n\x0eSIMULATED_AUTO\x10\x00\x12\x14\n\x10SIMULATED_MINION\x10\x01\x12\x15\n\x11SIMULATED_TRAXION\x10\x02\x12\x18\n\x14SIMULATED_PROMETHION\x10\x03\x12\x10\n\x0cSIMULATED_P2\x10\x04*j\n\x0e\x45xperimentType\x12\x0e\n\nSEQUENCING\x10\x00\x12\x0b\n\x07\x43ONTROL\x10\x01\x12\n\n\x06\x43USTOM\x10\x02\x12\x15\n\x11\x41LL_EXCEPT_HIDDEN\x10\x03\x12\x18\n\x14\x41LL_INCLUDING_HIDDEN\x10\x04\x32\xac\x1e\n\x0eManagerService\x12i\n\rdescribe_host\x12(.minknow_api.manager.DescribeHostRequest\x1a).minknow_api.manager.DescribeHostResponse\"\x03\x90\x02\x01\x12{\n\x13\x66low_cell_positions\x12-.minknow_api.manager.FlowCellPositionsRequest\x1a..minknow_api.manager.FlowCellPositionsResponse\"\x03\x90\x02\x01\x30\x01\x12\x8b\x01\n\x19watch_flow_cell_positions\x12\x32.minknow_api.manager.WatchFlowCellPositionsRequest\x1a\x33.minknow_api.manager.WatchFlowCellPositionsResponse\"\x03\x90\x02\x01\x30\x01\x12i\n\x0ereset_position\x12).minknow_api.manager.ResetPositionRequest\x1a*.minknow_api.manager.ResetPositionResponse\"\x00\x12l\n\x0e\x62\x61secaller_api\x12).minknow_api.manager.BasecallerApiRequest\x1a*.minknow_api.manager.BasecallerApiResponse\"\x03\x90\x02\x01\x12j\n\x0eget_guppy_info\x12(.minknow_api.manager.GetGuppyInfoRequest\x1a).minknow_api.manager.GetGuppyInfoResponse\"\x03\x90\x02\x01\x12q\n\x10get_version_info\x12*.minknow_api.manager.GetVersionInfoRequest\x1a,.minknow_api.instance.GetVersionInfoResponse\"\x03\x90\x02\x01\x12\x98\x01\n\x1elist_protocol_output_dir_files\x12\x36.minknow_api.manager.ListProtocolOutputDirFilesRequest\x1a\x37.minknow_api.manager.ListProtocolOutputDirFilesResponse\"\x03\x90\x02\x01\x30\x01\x12r\n\x10\x63reate_directory\x12+.minknow_api.manager.CreateDirectoryRequest\x1a,.minknow_api.manager.CreateDirectoryResponse\"\x03\x90\x02\x02\x12w\n\x13get_disk_space_info\x12,.minknow_api.manager.GetDiskSpaceInfoRequest\x1a-.minknow_api.manager.GetDiskSpaceInfoResponse\"\x03\x90\x02\x01\x12\x88\x01\n\x1eget_default_output_directories\x12\x38.minknow_api.instance.GetDefaultOutputDirectoriesRequest\x1a\'.minknow_api.instance.OutputDirectories\"\x03\x90\x02\x01\x12\x7f\n\x16stream_disk_space_info\x12/.minknow_api.manager.StreamDiskSpaceInfoRequest\x1a-.minknow_api.manager.GetDiskSpaceInfoResponse\"\x03\x90\x02\x01\x30\x01\x12z\n\x14get_barcode_kit_info\x12-.minknow_api.manager.GetBarcodeKitInfoRequest\x1a..minknow_api.manager.GetBarcodeKitInfoResponse\"\x03\x90\x02\x01\x12q\n\x11get_lamp_kit_info\x12*.minknow_api.manager.GetLampKitInfoRequest\x1a+.minknow_api.manager.GetLampKitInfoResponse\"\x03\x90\x02\x01\x12p\n\x10get_barcode_keys\x12*.minknow_api.manager.GetBarcodeKeysRequest\x1a+.minknow_api.manager.GetBarcodeKeysResponse\"\x03\x90\x02\x01\x12{\n\x13get_flow_cell_types\x12,.minknow_api.manager.GetFlowCellTypesRequest\x1a-.minknow_api.manager.GetFlowCellTypesResponse\"\x07\x90\x02\x01\x98\xb5\x18\x01\x12}\n\x13get_sequencing_kits\x12-.minknow_api.manager.GetSequencingKitsRequest\x1a..minknow_api.manager.GetSequencingKitsResponse\"\x07\x90\x02\x01\x98\xb5\x18\x01\x12y\n\x14\x61\x64\x64_simulated_device\x12..minknow_api.manager.AddSimulatedDeviceRequest\x1a/.minknow_api.manager.AddSimulatedDeviceResponse\"\x00\x12\x85\x01\n\x17remove_simulated_device\x12\x31.minknow_api.manager.RemoveSimulatedDeviceRequest\x1a\x32.minknow_api.manager.RemoveSimulatedDeviceResponse\"\x03\x90\x02\x02\x12\x9b\x01\n\x1flocal_authentication_token_path\x12\x38.minknow_api.manager.LocalAuthenticationTokenPathRequest\x1a\x39.minknow_api.manager.LocalAuthenticationTokenPathResponse\"\x03\x90\x02\x01\x12\xa7\x01\n#get_alignment_reference_information\x12<.minknow_api.manager.GetAlignmentReferenceInformationRequest\x1a=.minknow_api.manager.GetAlignmentReferenceInformationResponse\"\x03\x90\x02\x01\x12\x85\x01\n\x17\x61ssociation_device_code\x12\x31.minknow_api.manager.AssociationDeviceCodeRequest\x1a\x32.minknow_api.manager.AssociationDeviceCodeResponse\"\x03\x90\x02\x01\x12\xab\x01\n%apply_offline_association_unlock_code\x12=.minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest\x1a>.minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse\"\x03\x90\x02\x02\x12\x89\x01\n\x19list_developer_api_tokens\x12\x32.minknow_api.manager.ListDeveloperApiTokensRequest\x1a\x33.minknow_api.manager.ListDeveloperApiTokensResponse\"\x03\x90\x02\x02\x12\x89\x01\n\x1a\x63reate_developer_api_token\x12\x33.minknow_api.manager.CreateDeveloperApiTokenRequest\x1a\x34.minknow_api.manager.CreateDeveloperApiTokenResponse\"\x00\x12\x8a\x01\n\x1arevoke_developer_api_token\x12\x33.minknow_api.manager.RevokeDeveloperApiTokenRequest\x1a\x35.minknow_api.manager.RevokeDeveloperApiTokensResponse\"\x00\x12m\n\x0e\x66ind_protocols\x12).minknow_api.manager.FindProtocolsRequest\x1a*.minknow_api.manager.FindProtocolsResponse\"\x04\x98\xb5\x18\x01\x12\x90\x01\n\x1alist_settings_for_protocol\x12\x33.minknow_api.manager.ListSettingsForProtocolRequest\x1a\x34.minknow_api.manager.ListSettingsForProtocolResponse\"\x07\x90\x02\x01\x98\xb5\x18\x01\x12j\n\x0cget_features\x12\'.minknow_api.manager.GetFeaturesRequest\x1a(.minknow_api.manager.GetFeaturesResponse\"\x07\x90\x02\x01\x98\xb5\x18\x01\x12g\n\x0cset_features\x12\'.minknow_api.manager.SetFeaturesRequest\x1a(.minknow_api.manager.SetFeaturesResponse\"\x04\x98\xb5\x18\x01\x42&\n\x1c\x63om.nanoporetech.minknow_api\xa2\x02\x05MKAPIb\x06proto3')

_SIMPLEPROTOCOLSTATE = DESCRIPTOR.enum_types_by_name['SimpleProtocolState']
SimpleProtocolState = enum_type_wrapper.EnumTypeWrapper(_SIMPLEPROTOCOLSTATE)
_SIMULATEDDEVICETYPE = DESCRIPTOR.enum_types_by_name['SimulatedDeviceType']
SimulatedDeviceType = enum_type_wrapper.EnumTypeWrapper(_SIMULATEDDEVICETYPE)
_EXPERIMENTTYPE = DESCRIPTOR.enum_types_by_name['ExperimentType']
ExperimentType = enum_type_wrapper.EnumTypeWrapper(_EXPERIMENTTYPE)
NO_PROTOCOL_STATE = 0
PROTOCOL_RUNNING = 1
PROTOCOL_FINISHED_SUCCESSFULLY = 2
PROTOCOL_FINISHED_WITH_ERROR = 3
SIMULATED_AUTO = 0
SIMULATED_MINION = 1
SIMULATED_TRAXION = 2
SIMULATED_PROMETHION = 3
SIMULATED_P2 = 4
SEQUENCING = 0
CONTROL = 1
CUSTOM = 2
ALL_EXCEPT_HIDDEN = 3
ALL_INCLUDING_HIDDEN = 4


_DESCRIBEHOSTREQUEST = DESCRIPTOR.message_types_by_name['DescribeHostRequest']
_DESCRIBEHOSTRESPONSE = DESCRIPTOR.message_types_by_name['DescribeHostResponse']
_FLOWCELLPOSITION = DESCRIPTOR.message_types_by_name['FlowCellPosition']
_FLOWCELLPOSITION_LOCATION = _FLOWCELLPOSITION.nested_types_by_name['Location']
_FLOWCELLPOSITION_RPCPORTS = _FLOWCELLPOSITION.nested_types_by_name['RpcPorts']
_FLOWCELLPOSITION_SHAREDHARDWAREGROUP = _FLOWCELLPOSITION.nested_types_by_name['SharedHardwareGroup']
_FLOWCELLPOSITIONSREQUEST = DESCRIPTOR.message_types_by_name['FlowCellPositionsRequest']
_FLOWCELLPOSITIONSRESPONSE = DESCRIPTOR.message_types_by_name['FlowCellPositionsResponse']
_WATCHFLOWCELLPOSITIONSREQUEST = DESCRIPTOR.message_types_by_name['WatchFlowCellPositionsRequest']
_WATCHFLOWCELLPOSITIONSRESPONSE = DESCRIPTOR.message_types_by_name['WatchFlowCellPositionsResponse']
_RESETPOSITIONREQUEST = DESCRIPTOR.message_types_by_name['ResetPositionRequest']
_RESETPOSITIONRESPONSE = DESCRIPTOR.message_types_by_name['ResetPositionResponse']
_BASECALLERAPIREQUEST = DESCRIPTOR.message_types_by_name['BasecallerApiRequest']
_BASECALLERAPIRESPONSE = DESCRIPTOR.message_types_by_name['BasecallerApiResponse']
_GETGUPPYINFOREQUEST = DESCRIPTOR.message_types_by_name['GetGuppyInfoRequest']
_GETGUPPYINFORESPONSE = DESCRIPTOR.message_types_by_name['GetGuppyInfoResponse']
_GETVERSIONINFOREQUEST = DESCRIPTOR.message_types_by_name['GetVersionInfoRequest']
_LISTPROTOCOLOUTPUTDIRFILESREQUEST = DESCRIPTOR.message_types_by_name['ListProtocolOutputDirFilesRequest']
_LISTPROTOCOLOUTPUTDIRFILESRESPONSE = DESCRIPTOR.message_types_by_name['ListProtocolOutputDirFilesResponse']
_LISTPROTOCOLOUTPUTDIRFILESRESPONSE_DIRECTORYINFO = _LISTPROTOCOLOUTPUTDIRFILESRESPONSE.nested_types_by_name['DirectoryInfo']
_CREATEDIRECTORYREQUEST = DESCRIPTOR.message_types_by_name['CreateDirectoryRequest']
_CREATEDIRECTORYRESPONSE = DESCRIPTOR.message_types_by_name['CreateDirectoryResponse']
_FILESYSTEMDISKSPACEINFO = DESCRIPTOR.message_types_by_name['FilesystemDiskSpaceInfo']
_GETDISKSPACEINFOREQUEST = DESCRIPTOR.message_types_by_name['GetDiskSpaceInfoRequest']
_STREAMDISKSPACEINFOREQUEST = DESCRIPTOR.message_types_by_name['StreamDiskSpaceInfoRequest']
_GETDISKSPACEINFORESPONSE = DESCRIPTOR.message_types_by_name['GetDiskSpaceInfoResponse']
_GETBARCODEKITINFOREQUEST = DESCRIPTOR.message_types_by_name['GetBarcodeKitInfoRequest']
_GETBARCODEKITINFORESPONSE = DESCRIPTOR.message_types_by_name['GetBarcodeKitInfoResponse']
_GETBARCODEKITINFORESPONSE_BARCODEKITINFO = _GETBARCODEKITINFORESPONSE.nested_types_by_name['BarcodeKitInfo']
_GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY = _GETBARCODEKITINFORESPONSE.nested_types_by_name['BarcodeKitInfoEntry']
_GETLAMPKITINFOREQUEST = DESCRIPTOR.message_types_by_name['GetLampKitInfoRequest']
_GETLAMPKITINFORESPONSE = DESCRIPTOR.message_types_by_name['GetLampKitInfoResponse']
_GETBARCODEKEYSREQUEST = DESCRIPTOR.message_types_by_name['GetBarcodeKeysRequest']
_GETBARCODEKEYSRESPONSE = DESCRIPTOR.message_types_by_name['GetBarcodeKeysResponse']
_GETFLOWCELLTYPESREQUEST = DESCRIPTOR.message_types_by_name['GetFlowCellTypesRequest']
_GETFLOWCELLTYPESRESPONSE = DESCRIPTOR.message_types_by_name['GetFlowCellTypesResponse']
_GETFLOWCELLTYPESRESPONSE_INFO = _GETFLOWCELLTYPESRESPONSE.nested_types_by_name['Info']
_GETSEQUENCINGKITSREQUEST = DESCRIPTOR.message_types_by_name['GetSequencingKitsRequest']
_GETSEQUENCINGKITSRESPONSE = DESCRIPTOR.message_types_by_name['GetSequencingKitsResponse']
_GETSEQUENCINGKITSRESPONSE_KIT = _GETSEQUENCINGKITSRESPONSE.nested_types_by_name['Kit']
_GETSEQUENCINGKITSRESPONSE_BARCODINGEXPANSIONKIT = _GETSEQUENCINGKITSRESPONSE.nested_types_by_name['BarcodingExpansionKit']
_ADDSIMULATEDDEVICEREQUEST = DESCRIPTOR.message_types_by_name['AddSimulatedDeviceRequest']
_ADDSIMULATEDDEVICERESPONSE = DESCRIPTOR.message_types_by_name['AddSimulatedDeviceResponse']
_REMOVESIMULATEDDEVICEREQUEST = DESCRIPTOR.message_types_by_name['RemoveSimulatedDeviceRequest']
_REMOVESIMULATEDDEVICERESPONSE = DESCRIPTOR.message_types_by_name['RemoveSimulatedDeviceResponse']
_LOCALAUTHENTICATIONTOKENPATHREQUEST = DESCRIPTOR.message_types_by_name['LocalAuthenticationTokenPathRequest']
_LOCALAUTHENTICATIONTOKENPATHRESPONSE = DESCRIPTOR.message_types_by_name['LocalAuthenticationTokenPathResponse']
_GETALIGNMENTREFERENCEINFORMATIONREQUEST = DESCRIPTOR.message_types_by_name['GetAlignmentReferenceInformationRequest']
_GETALIGNMENTREFERENCEINFORMATIONRESPONSE = DESCRIPTOR.message_types_by_name['GetAlignmentReferenceInformationResponse']
_ASSOCIATIONDEVICECODEREQUEST = DESCRIPTOR.message_types_by_name['AssociationDeviceCodeRequest']
_ASSOCIATIONDEVICECODERESPONSE = DESCRIPTOR.message_types_by_name['AssociationDeviceCodeResponse']
_APPLYOFFLINEASSOCIATIONUNLOCKCODEREQUEST = DESCRIPTOR.message_types_by_name['ApplyOfflineAssociationUnlockCodeRequest']
_APPLYOFFLINEASSOCIATIONUNLOCKCODERESPONSE = DESCRIPTOR.message_types_by_name['ApplyOfflineAssociationUnlockCodeResponse']
_LISTDEVELOPERAPITOKENSREQUEST = DESCRIPTOR.message_types_by_name['ListDeveloperApiTokensRequest']
_LISTDEVELOPERAPITOKENSRESPONSE = DESCRIPTOR.message_types_by_name['ListDeveloperApiTokensResponse']
_LISTDEVELOPERAPITOKENSRESPONSE_DEVELOPERAPITOKEN = _LISTDEVELOPERAPITOKENSRESPONSE.nested_types_by_name['DeveloperApiToken']
_CREATEDEVELOPERAPITOKENREQUEST = DESCRIPTOR.message_types_by_name['CreateDeveloperApiTokenRequest']
_CREATEDEVELOPERAPITOKENRESPONSE = DESCRIPTOR.message_types_by_name['CreateDeveloperApiTokenResponse']
_REVOKEDEVELOPERAPITOKENREQUEST = DESCRIPTOR.message_types_by_name['RevokeDeveloperApiTokenRequest']
_REVOKEDEVELOPERAPITOKENSRESPONSE = DESCRIPTOR.message_types_by_name['RevokeDeveloperApiTokensResponse']
_FINDPROTOCOLSREQUEST = DESCRIPTOR.message_types_by_name['FindProtocolsRequest']
_FINDPROTOCOLSRESPONSE = DESCRIPTOR.message_types_by_name['FindProtocolsResponse']
_FINDPROTOCOLSRESPONSE_PROTOCOL = _FINDPROTOCOLSRESPONSE.nested_types_by_name['Protocol']
_LISTSETTINGSFORPROTOCOLREQUEST = DESCRIPTOR.message_types_by_name['ListSettingsForProtocolRequest']
_LISTSETTINGSFORPROTOCOLRESPONSE = DESCRIPTOR.message_types_by_name['ListSettingsForProtocolResponse']
_LISTSETTINGSFORPROTOCOLRESPONSE_RUNOPTIONS = _LISTSETTINGSFORPROTOCOLRESPONSE.nested_types_by_name['RunOptions']
_LISTSETTINGSFORPROTOCOLRESPONSE_BASECALLING = _LISTSETTINGSFORPROTOCOLRESPONSE.nested_types_by_name['Basecalling']
_LISTSETTINGSFORPROTOCOLRESPONSE_OUTPUT = _LISTSETTINGSFORPROTOCOLRESPONSE.nested_types_by_name['Output']
_FEATURE = DESCRIPTOR.message_types_by_name['Feature']
_FEATURELIST = DESCRIPTOR.message_types_by_name['FeatureList']
_GETFEATURESREQUEST = DESCRIPTOR.message_types_by_name['GetFeaturesRequest']
_GETFEATURESRESPONSE = DESCRIPTOR.message_types_by_name['GetFeaturesResponse']
_SETFEATURESREQUEST = DESCRIPTOR.message_types_by_name['SetFeaturesRequest']
_SETFEATURESRESPONSE = DESCRIPTOR.message_types_by_name['SetFeaturesResponse']
_DESCRIBEHOSTRESPONSE_BASECALLINGAVAILABILITY = _DESCRIBEHOSTRESPONSE.enum_types_by_name['BasecallingAvailability']
_FLOWCELLPOSITION_STATE = _FLOWCELLPOSITION.enum_types_by_name['State']
_GETFEATURESRESPONSE_STATE = _GETFEATURESRESPONSE.enum_types_by_name['State']
DescribeHostRequest = _reflection.GeneratedProtocolMessageType('DescribeHostRequest', (_message.Message,), {
  'DESCRIPTOR' : _DESCRIBEHOSTREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.DescribeHostRequest)
  })
_sym_db.RegisterMessage(DescribeHostRequest)

DescribeHostResponse = _reflection.GeneratedProtocolMessageType('DescribeHostResponse', (_message.Message,), {
  'DESCRIPTOR' : _DESCRIBEHOSTRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      product_code:
          The product code for the host, if applicable.  If this is an
          integrated Oxford Nanopore device, this will be the product
          code of the device, or the part of the device that runs
          MinKNOW (eg: several PromethION models have separate product
          codes for the sequencing unit where the flow cells are
          inserted and the compute unit - this would be the product code
          for the compute unit).  Some example product codes:
          ============  ================= Product Code  Name
          ============  ================= GRD-X5B001    GridION X5
          GRD-X5B002    GridION X5 GRD-X5B003    GridION X5 Mk1 MIN-101C
          MinION Mk1C PRO-PRMC01    PromethION Beta PRO-PRC024
          PromethION 24 PRO-PRC048    PromethION 48 ONT-314
          PromethION (Production)  If MinKNOW is running on a machine
          that is not provided by Oxford Nanopore (ie: their own laptop
          or desktop machine with a MinION plugged in), this field will
          be empty.
      description:
          A human-readable name for the type of host.  If `product_code`
          is set, it will be the name of the model of instrument (see
          the table in the `product_code` field). Otherwise it will be
          empty.
      serial:
          The serial of Nanopore device.  If `product_code` is empty,
          this will also be empty.  This uniquely identifies the device.
          See also `network_name`.
      network_name:
          The network name of the host.  This is the name the host
          system believes it has on the network. This can be useful if
          an IP address was used to connect to the RPC system.  For
          customer computers, this is the only available identfying
          information for the system.
      needs_association:
          This device has not been associated with an account.
          Association must be completed before using the device.  Note
          that this will only ever be set for hosts that also have a
          `product_code` and `serial`.  If this is true, all positions
          will report as ``STATE_NEEDS_ASSOCIATION`` until the device is
          associated. Even if this is false, however, removable
          sequencing units (eg: the MinION Mk1B) may require their own
          association (in which case they will individually report as
          ``STATE_NEEDS_ASSOCIATION`` - see the `flow_cell_positions`
          RPC).  Since 4.4
      can_sequence_offline:
          Whether the device can sequence while offline.  Not all
          sequencing devices can sequence without an internet
          connection. This indicates whether it is possible for the
          integrated sequencing positions. Note that this will only be
          set if `needs_association` is true.  Since 4.4
      can_basecall:
          Whether the device can currently provide basecalling
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.DescribeHostResponse)
  })
_sym_db.RegisterMessage(DescribeHostResponse)

FlowCellPosition = _reflection.GeneratedProtocolMessageType('FlowCellPosition', (_message.Message,), {

  'Location' : _reflection.GeneratedProtocolMessageType('Location', (_message.Message,), {
    'DESCRIPTOR' : _FLOWCELLPOSITION_LOCATION,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Attributes:
        x:
            The column (counting from 0, left-to-right) of the flow cell
            position on the sequencing unit when viewed from above/in
            front.
        y:
            The row (counting from 0, top-to-bottom) of the flow cell
            position on the sequencing unit when viewed from above/in
            front.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPosition.Location)
    })
  ,

  'RpcPorts' : _reflection.GeneratedProtocolMessageType('RpcPorts', (_message.Message,), {
    'DESCRIPTOR' : _FLOWCELLPOSITION_RPCPORTS,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Attributes:
        secure:
            A port providing the standard gRPC protocol over TLS
        secure_grpc_web:
            A port providing the gRPC-Web protocol over TLS
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPosition.RpcPorts)
    })
  ,

  'SharedHardwareGroup' : _reflection.GeneratedProtocolMessageType('SharedHardwareGroup', (_message.Message,), {
    'DESCRIPTOR' : _FLOWCELLPOSITION_SHAREDHARDWAREGROUP,
    '__module__' : 'minknow_api.manager_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
    })
  ,
  'DESCRIPTOR' : _FLOWCELLPOSITION,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      name:
          The name of the position.  For MinIONs, this is the name of
          the MinION (eg: MN12345). For integrated positions, this is
          the label for the position on the sequencer (eg: X1 for
          GridION, 1-A1-D1 for PromethION).
      location:
          For integrated flow cell positions, indicates where it is on
          the sequencing unit.  This information is not provided for
          MinIONs (except for the MinION Mk1C, in which case the
          position is always 0, 0).
      state:
          The state of the flow cell position.  If the state is not
          `STATE_RUNNING` or `STATE_INITIALISING`, the flow cell
          position can be assumed to be unusable, and the `error_info`
          field should be populated.
      rpc_ports:
          The ports the APIs for this flow cell position are provided
          on.  Always provided if `state` is `STATE_RUNNING`. May also
          be provided when `state` is one of the hardware errors if the
          software is still running.
      error_info:
          Provides a textual description of error states.  When `state`
          is not `STATE_INITIALISING`, `STATE_RUNNING` or
          `STATE_RESETTING`, this provides some information (in English)
          about the error. This will be a textual description of the
          value in `state`, possibly with extra information about the
          error (if available).  This can be useful for dealing with
          (new) unknown states.
      shared_hardware_group:
          Some positions may share hardware. Positions that share
          hardware will have the same group-id. If positions do share
          hardware, to reset the hardware you will need to reset all
          positions in the group at the same time.
      is_integrated:
          Indicates that this is an integrated flow cell position.  This
          is true for the integrated positions on a PromethION, GridION
          or MinION Mk1C, and false for a MinION Mk1B.  Integrated
          positions are always listed, even if (due to some hardware
          error) they can't be found. They are never in
          STATE_HARDWARE_REMOVED, and they always report a location.
          Additionally, integrated positions cannot be associated
          independently - if they are in STATE_NEEDS_ASSOCIATION, then
          the host as a whole needs associating. Likewise, either all
          integrated positions can run offline, or none of them can.
          Since 4.4
      can_sequence_offline:
          Indicates that this position can sequence offline.  For
          integrated positions, this is the same as the corresponding
          field returned from the describe_host RPC.
      protocol_state:
          Indicates the state of the last or current protocol on the
          flow cell position.  Since 5.0.
      is_simulated:
          Whether the device is simulated.  If this is true, there is no
          physical device - MinKNOW is simulating it. If it is false,
          MinKNOW will be acquiring data from a real device.  Since 5.2
      device_type:
          The type of the device.  Since 5.2
      parent_name:
          The name of the device this flow cell position is part of.
          For an integrated position, this will be the host serial, as
          returned by describe_host().  For a MinION Mk1B, this will be
          the same as the `name` field.  For a P2 Solo, this will be the
          name of the P2 Solo unit.  Since 5.3
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPosition)
  })
_sym_db.RegisterMessage(FlowCellPosition)
_sym_db.RegisterMessage(FlowCellPosition.Location)
_sym_db.RegisterMessage(FlowCellPosition.RpcPorts)
_sym_db.RegisterMessage(FlowCellPosition.SharedHardwareGroup)

FlowCellPositionsRequest = _reflection.GeneratedProtocolMessageType('FlowCellPositionsRequest', (_message.Message,), {
  'DESCRIPTOR' : _FLOWCELLPOSITIONSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPositionsRequest)
  })
_sym_db.RegisterMessage(FlowCellPositionsRequest)

FlowCellPositionsResponse = _reflection.GeneratedProtocolMessageType('FlowCellPositionsResponse', (_message.Message,), {
  'DESCRIPTOR' : _FLOWCELLPOSITIONSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      total_count:
          How many positions are available in total.  This is the same
          in every message returned from a single call, and allows the
          caller to easily see how many further positions might be in
          subsequent messages.
      positions:
          Known flow cell positions.  Note that not all positions listed
          here are necessarily available. In particular, integrated flow
          cell positions (eg: on GridIONs or PromethIONs) will always be
          listed.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FlowCellPositionsResponse)
  })
_sym_db.RegisterMessage(FlowCellPositionsResponse)

WatchFlowCellPositionsRequest = _reflection.GeneratedProtocolMessageType('WatchFlowCellPositionsRequest', (_message.Message,), {
  'DESCRIPTOR' : _WATCHFLOWCELLPOSITIONSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.WatchFlowCellPositionsRequest)
  })
_sym_db.RegisterMessage(WatchFlowCellPositionsRequest)

WatchFlowCellPositionsResponse = _reflection.GeneratedProtocolMessageType('WatchFlowCellPositionsResponse', (_message.Message,), {
  'DESCRIPTOR' : _WATCHFLOWCELLPOSITIONSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Each flow cell position will first be listed in `additions`. After
  that, it may appear in `changes` in zero or more messages. Then, it
  may appear in `removals` once, after which it will either never appear
  again, or appear in `additions` again (restarting the cycle).  No
  position will ever appear in more than one field in the same response
  message.
  
  Attributes:
      additions:
          Flow cell positions that are new (to this call).  Contains
          flow cell positions that have not been seen before on this
          call (or have re-appeared after being removed).  Note that a
          flow cell position being listed here does not mean it is
          available. In particular, integrated flow cell positions (eg:
          on GridIONs or PromethIONs) will always be provided, so that
          they can be positioned appropriately.
      changes:
          Flow cell positions that have changed state.  Every flow cell
          position provided in this list will have previously been
          provided in `additions`.
      removals:
          A flow cell position has been removed.  Note that this can
          only happen with MinIONs - integrated flow cell positions are
          never removed (if they become unavailable, this will be noted
          in the `changes` field).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.WatchFlowCellPositionsResponse)
  })
_sym_db.RegisterMessage(WatchFlowCellPositionsResponse)

ResetPositionRequest = _reflection.GeneratedProtocolMessageType('ResetPositionRequest', (_message.Message,), {
  'DESCRIPTOR' : _RESETPOSITIONREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      positions:
          The names of positions to restart.
      force:
          Force the software to be restarted even when it appears to be
          in a healthy state (ie: STATE_RUNNING).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ResetPositionRequest)
  })
_sym_db.RegisterMessage(ResetPositionRequest)

ResetPositionResponse = _reflection.GeneratedProtocolMessageType('ResetPositionResponse', (_message.Message,), {
  'DESCRIPTOR' : _RESETPOSITIONRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ResetPositionResponse)
  })
_sym_db.RegisterMessage(ResetPositionResponse)

BasecallerApiRequest = _reflection.GeneratedProtocolMessageType('BasecallerApiRequest', (_message.Message,), {
  'DESCRIPTOR' : _BASECALLERAPIREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.BasecallerApiRequest)
  })
_sym_db.RegisterMessage(BasecallerApiRequest)

BasecallerApiResponse = _reflection.GeneratedProtocolMessageType('BasecallerApiResponse', (_message.Message,), {
  'DESCRIPTOR' : _BASECALLERAPIRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      secure:
          The port to use to access the minknow_api.basecaller API using
          the standard gRPC protocol over TLS
      secure_grpc_web:
          The port to use to access the minknow_api.basecaller API using
          the gRPC-Web protocol over TLS
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.BasecallerApiResponse)
  })
_sym_db.RegisterMessage(BasecallerApiResponse)

GetGuppyInfoRequest = _reflection.GeneratedProtocolMessageType('GetGuppyInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETGUPPYINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetGuppyInfoRequest)
  })
_sym_db.RegisterMessage(GetGuppyInfoRequest)

GetGuppyInfoResponse = _reflection.GeneratedProtocolMessageType('GetGuppyInfoResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETGUPPYINFORESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      port:
          The port Guppy is listening on.
      ipc_path:
          The path to an ipc file Guppy is using. Use "ipc://<ipc_path>"
          for a guppy connection string.
      version:
          The Guppy server version.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetGuppyInfoResponse)
  })
_sym_db.RegisterMessage(GetGuppyInfoResponse)

GetVersionInfoRequest = _reflection.GeneratedProtocolMessageType('GetVersionInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETVERSIONINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetVersionInfoRequest)
  })
_sym_db.RegisterMessage(GetVersionInfoRequest)

ListProtocolOutputDirFilesRequest = _reflection.GeneratedProtocolMessageType('ListProtocolOutputDirFilesRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTPROTOCOLOUTPUTDIRFILESREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      path:
          Specify the root path to list files from. If the path is left
          empty, then the base protocol output directory will be used.
          Note that the path specified HAS to be a descendant of the
          protocol output directory, otherwise a INVALID_ARGUMENT error
          will be returned  If the path is left empty, and the path
          specified in the user config doesn't exist, then the NOT_FOUND
          error code will be returned
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  })
_sym_db.RegisterMessage(ListProtocolOutputDirFilesRequest)

ListProtocolOutputDirFilesResponse = _reflection.GeneratedProtocolMessageType('ListProtocolOutputDirFilesResponse', (_message.Message,), {

  'DirectoryInfo' : _reflection.GeneratedProtocolMessageType('DirectoryInfo', (_message.Message,), {
    'DESCRIPTOR' : _LISTPROTOCOLOUTPUTDIRFILESRESPONSE_DIRECTORYINFO,
    '__module__' : 'minknow_api.manager_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
    })
  ,
  'DESCRIPTOR' : _LISTPROTOCOLOUTPUTDIRFILESRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      directories:
          List of sub-directories in the directory specified
      files:
          List of files in the directory specified
      current_listed_path:
          The absolute directory that is being listed within this
          response
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  })
_sym_db.RegisterMessage(ListProtocolOutputDirFilesResponse)
_sym_db.RegisterMessage(ListProtocolOutputDirFilesResponse.DirectoryInfo)

CreateDirectoryRequest = _reflection.GeneratedProtocolMessageType('CreateDirectoryRequest', (_message.Message,), {
  'DESCRIPTOR' : _CREATEDIRECTORYREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      parent_path:
          The path at which to create the directory.  This must exist,
          be a directory, and be within the protocol output directory.
          This can be determined via calls to
          list_protocol_output_dir_files().
      name:
          The name of the directory to create.  This must be a single
          path component (ie: it cannot contain '/' or '\'). There may
          be other restrictions on valid characters, depending on the
          operating system.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.CreateDirectoryRequest)
  })
_sym_db.RegisterMessage(CreateDirectoryRequest)

CreateDirectoryResponse = _reflection.GeneratedProtocolMessageType('CreateDirectoryResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATEDIRECTORYRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      path:
          The path to the created directory.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.CreateDirectoryResponse)
  })
_sym_db.RegisterMessage(CreateDirectoryResponse)

FilesystemDiskSpaceInfo = _reflection.GeneratedProtocolMessageType('FilesystemDiskSpaceInfo', (_message.Message,), {
  'DESCRIPTOR' : _FILESYSTEMDISKSPACEINFO,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """disk-usage information for one file-system
  
  Attributes:
      filesystem_id:
          The name of the file-system
      bytes_available:
          How much space is left on the file-system
      bytes_capacity:
          The total capacity of the file-system when empty.
      file_types_stored:
          A list of what types of file MinKNOW stores on this file-
          system, eg: reads, logs, intermediate-files, etc.
      bytes_to_stop_cleanly:
          MinKNOW needs this much space to stop experiments. If
          bytes_available goes below this number, data could be lost!
      bytes_when_alert_issued:
          The amount of space left on the file-system when
          recommend_alert was set true.
      recommend_alert:
          MinKNOW recommends that you alert someone about the disk-usage
      recommend_stop:
          MinKNOW recommends that you stop experiments due to disk-usage
          concerns
      bytes_per_second:
          Rate of change in bytes_available (per second) +'ve numbers
          indicate that bytes_available is decreasing and space is being
          used A value of 0 can indicate that this has not applicable or
          not available.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FilesystemDiskSpaceInfo)
  })
_sym_db.RegisterMessage(FilesystemDiskSpaceInfo)

GetDiskSpaceInfoRequest = _reflection.GeneratedProtocolMessageType('GetDiskSpaceInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETDISKSPACEINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetDiskSpaceInfoRequest)
  })
_sym_db.RegisterMessage(GetDiskSpaceInfoRequest)

StreamDiskSpaceInfoRequest = _reflection.GeneratedProtocolMessageType('StreamDiskSpaceInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMDISKSPACEINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      period:
          Disk space information will be streamed with this value
          determining the period in seconds between updates. A period of
          0 is invalid
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.StreamDiskSpaceInfoRequest)
  })
_sym_db.RegisterMessage(StreamDiskSpaceInfoRequest)

GetDiskSpaceInfoResponse = _reflection.GeneratedProtocolMessageType('GetDiskSpaceInfoResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETDISKSPACEINFORESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetDiskSpaceInfoResponse)
  })
_sym_db.RegisterMessage(GetDiskSpaceInfoResponse)

GetBarcodeKitInfoRequest = _reflection.GeneratedProtocolMessageType('GetBarcodeKitInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETBARCODEKITINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKitInfoRequest)
  })
_sym_db.RegisterMessage(GetBarcodeKitInfoRequest)

GetBarcodeKitInfoResponse = _reflection.GeneratedProtocolMessageType('GetBarcodeKitInfoResponse', (_message.Message,), {

  'BarcodeKitInfo' : _reflection.GeneratedProtocolMessageType('BarcodeKitInfo', (_message.Message,), {
    'DESCRIPTOR' : _GETBARCODEKITINFORESPONSE_BARCODEKITINFO,
    '__module__' : 'minknow_api.manager_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
    })
  ,

  'BarcodeKitInfoEntry' : _reflection.GeneratedProtocolMessageType('BarcodeKitInfoEntry', (_message.Message,), {
    'DESCRIPTOR' : _GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY,
    '__module__' : 'minknow_api.manager_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry)
    })
  ,
  'DESCRIPTOR' : _GETBARCODEKITINFORESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      barcode_kit_info:
          Map of barcode kit name to barcode kit info
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKitInfoResponse)
  })
_sym_db.RegisterMessage(GetBarcodeKitInfoResponse)
_sym_db.RegisterMessage(GetBarcodeKitInfoResponse.BarcodeKitInfo)
_sym_db.RegisterMessage(GetBarcodeKitInfoResponse.BarcodeKitInfoEntry)

GetLampKitInfoRequest = _reflection.GeneratedProtocolMessageType('GetLampKitInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETLAMPKITINFOREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetLampKitInfoRequest)
  })
_sym_db.RegisterMessage(GetLampKitInfoRequest)

GetLampKitInfoResponse = _reflection.GeneratedProtocolMessageType('GetLampKitInfoResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETLAMPKITINFORESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      lamp_kits:
          Lamp kit names
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetLampKitInfoResponse)
  })
_sym_db.RegisterMessage(GetLampKitInfoResponse)

GetBarcodeKeysRequest = _reflection.GeneratedProtocolMessageType('GetBarcodeKeysRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETBARCODEKEYSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      barcode_kit_names:
          Names of barcode kits to obtain barcode names for  Fails with
          INVALID_ARGUMENT if any of the requested `barcode_kit_names`
          are unavailable
      lamp_kit_name:
          Name of lamp kit to obtain barcode names for.  Fails with
          INVALID_ARGUMENT if the requested `lamp_kit_name` is
          unavailable.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKeysRequest)
  })
_sym_db.RegisterMessage(GetBarcodeKeysRequest)

GetBarcodeKeysResponse = _reflection.GeneratedProtocolMessageType('GetBarcodeKeysResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETBARCODEKEYSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      barcode_keys:
          Returned barcode keys.
      lamp_keys:
          Returned lamp barcode ids.
      combined_keys:
          Combined barcode and lamp keys.  Returned keys are joined
          strings of all requested barcode kits, giving the caller a
          unique string to identify each barcode pair.  eg. if both a
          lamp kit + barcode kit are specified, NxM barcode keys are
          returned:  - barcode01_lamp01  - barcode01_lamp02  -
          barcode01_lamp03  - barcode02_lamp01  - barcode02_lamp02  -
          barcode02_lamp03
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetBarcodeKeysResponse)
  })
_sym_db.RegisterMessage(GetBarcodeKeysResponse)

GetFlowCellTypesRequest = _reflection.GeneratedProtocolMessageType('GetFlowCellTypesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETFLOWCELLTYPESREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Request message for `ManagerService.get_flow_cell_types`.""",
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetFlowCellTypesRequest)
  })
_sym_db.RegisterMessage(GetFlowCellTypesRequest)

GetFlowCellTypesResponse = _reflection.GeneratedProtocolMessageType('GetFlowCellTypesResponse', (_message.Message,), {

  'Info' : _reflection.GeneratedProtocolMessageType('Info', (_message.Message,), {
    'DESCRIPTOR' : _GETFLOWCELLTYPESRESPONSE_INFO,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Information about a flow cell type.
    
    Attributes:
        product_code:
            The product code for the flow cell type.  This is the user-
            visible name for the flow cell type. It is the name used to
            order flow cells, and is also displayed on the packaging.
            While most product codes are 10 characters, be aware that
            longer product codes can exist and have been used in the past.
            Example: "FLO-MIN106".
        connector_type:
            The connector type of this flow cell type.  This determines
            which flow cell positions it is possible to insert this flow
            cell into. The connector type for a given flow cell position
            can be determined using
            `minknow_api.device.DeviceService.get_device_state`.  This
            will never be ``FCCON_NOT_SET``.
        cannot_live_basecall:
            Indicates that live basecalling is not possible on the flow
            cell.  Note that almost all flow cell types can be basecalled
            on: that is why this indicates a negative (saving some bytes
            on the wire by allowing the common case of basecalling being
            possible to be omitted entirely).
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.GetFlowCellTypesResponse.Info)
    })
  ,
  'DESCRIPTOR' : _GETFLOWCELLTYPESRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Response message for `ManagerService.get_flow_cell_types`.
  
  Attributes:
      types:
          The flow cell types.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetFlowCellTypesResponse)
  })
_sym_db.RegisterMessage(GetFlowCellTypesResponse)
_sym_db.RegisterMessage(GetFlowCellTypesResponse.Info)

GetSequencingKitsRequest = _reflection.GeneratedProtocolMessageType('GetSequencingKitsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETSEQUENCINGKITSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Request message for `ManagerService.get_sequencing_kits`.
  
  Attributes:
      flow_cell_product_code:
          The product code of the flow cell that will be used for
          sequencing.  Only kits compatible with this flow cell type
          will be returned (currently, this means that there is at least
          one (sequencing or control) protocol that is compatible with
          both the kit and this flow cell product code).  This may also
          affect the returned information about the kit. For example, if
          it isn't possible to basecall on the flow cell, none of the
          kits will claim to be barcoding capable (or compatible with
          any barcoding expansion kits).
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetSequencingKitsRequest)
  })
_sym_db.RegisterMessage(GetSequencingKitsRequest)

GetSequencingKitsResponse = _reflection.GeneratedProtocolMessageType('GetSequencingKitsResponse', (_message.Message,), {

  'Kit' : _reflection.GeneratedProtocolMessageType('Kit', (_message.Message,), {
    'DESCRIPTOR' : _GETSEQUENCINGKITSRESPONSE_KIT,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Information about a sequencing kit.
    
    Attributes:
        product_code:
            The product code for the sequencing kit.  This is the user-
            visible name for the kit. It is the name used to order kits,
            and is also displayed on the packaging.  While most product
            codes are 10-15 characters, be aware that longer (or shorter)
            product codes can exist.  Examples: "SQK-LSK109", "OND-SQK-
            LP0096S".
        barcoding_expansion_kits:
            Compatible barcoding expansion kits.  These are indexes into
            the GetSequencingKitsResponse.barcoding_expansion_kits list.
            For example, 0 would indicate the first kit in that list. The
            values are guaranteed to be unique and valid indexes for that
            list.
        includes_barcoding:
            Whether barcoding support is part of the sequencing kit.  If
            this is set, barcoding can be done without any expansion kits
            (and, in fact, barcoding is an integral part of the kit).
        lamp_kit:
            Whether the kit can be used for LamPORE diagnostics.
        has_control_protocol:
            Whether there is a "control" protocol available for this kit.
        no_sequencing_protocol:
            Indicates there is no sequencing protocol available for this
            kit.  This is an unusual situation. If a kit is known about,
            it should generally have a sequencing protocol associated with
            it, and it would be strange to have a control protocol
            available but no sequencing protocol.
        frequently_used:
            Indicates that the sequencing kit is one of the most commonly
            used ones.  This can be used to display such kits first, or
            otherwise highlight them in some way.
        dna:
            The kit can be used with DNA samples.
        rna:
            The kit can be used with RNA samples.
        pcr:
            The kit can be used with samples that have had PCR applied to
            them.
        pcr_free:
            The kit can be used without a PCR step.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.GetSequencingKitsResponse.Kit)
    })
  ,

  'BarcodingExpansionKit' : _reflection.GeneratedProtocolMessageType('BarcodingExpansionKit', (_message.Message,), {
    'DESCRIPTOR' : _GETSEQUENCINGKITSRESPONSE_BARCODINGEXPANSIONKIT,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Information about a barcoding expansion kit.  In the future, this may
    include compatibility information for dual barcoding, for example.
    
    Attributes:
        product_code:
            The product code for the barcoding expansion kit.  This is the
            user-visible name for the kit. It is the name used to order
            kits, and is also displayed on the packaging.  While most
            product codes are 10 characters, be aware that longer product
            codes can exist.  Example: "EXP-NBD104".
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
    })
  ,
  'DESCRIPTOR' : _GETSEQUENCINGKITSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Response message for `ManagerService.get_sequencing_kits`.
  
  Attributes:
      kits:
          The known sequencing kits.
      barcoding_expansion_kits:
          The possible barcoding expansion kits.  These are kits that
          can be used in combination with certain sequencing kits to add
          (or extend) barcoding functionality.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetSequencingKitsResponse)
  })
_sym_db.RegisterMessage(GetSequencingKitsResponse)
_sym_db.RegisterMessage(GetSequencingKitsResponse.Kit)
_sym_db.RegisterMessage(GetSequencingKitsResponse.BarcodingExpansionKit)

AddSimulatedDeviceRequest = _reflection.GeneratedProtocolMessageType('AddSimulatedDeviceRequest', (_message.Message,), {
  'DESCRIPTOR' : _ADDSIMULATEDDEVICEREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      name:
          The name of the position, this must be unique and the correct
          format:  For MinIONs and MinION-mk1Cs, "MS" followed by five
          digits, eg: "MS12345". For GridIONs, "GS" followed by five
          digits, eg: "GS12345". For P2Solos, "P2S" followed by four
          digits, eg: "P2S1234".  PromethIONs position-names have no
          format restriction, but must be unique
      type:
          The type of the simulated device to create.  If left at
          default (AUTO), then a sensible default device type is
          selected.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.AddSimulatedDeviceRequest)
  })
_sym_db.RegisterMessage(AddSimulatedDeviceRequest)

AddSimulatedDeviceResponse = _reflection.GeneratedProtocolMessageType('AddSimulatedDeviceResponse', (_message.Message,), {
  'DESCRIPTOR' : _ADDSIMULATEDDEVICERESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.AddSimulatedDeviceResponse)
  })
_sym_db.RegisterMessage(AddSimulatedDeviceResponse)

RemoveSimulatedDeviceRequest = _reflection.GeneratedProtocolMessageType('RemoveSimulatedDeviceRequest', (_message.Message,), {
  'DESCRIPTOR' : _REMOVESIMULATEDDEVICEREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      name:
          The name of the simulated device to be removed
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.RemoveSimulatedDeviceRequest)
  })
_sym_db.RegisterMessage(RemoveSimulatedDeviceRequest)

RemoveSimulatedDeviceResponse = _reflection.GeneratedProtocolMessageType('RemoveSimulatedDeviceResponse', (_message.Message,), {
  'DESCRIPTOR' : _REMOVESIMULATEDDEVICERESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.RemoveSimulatedDeviceResponse)
  })
_sym_db.RegisterMessage(RemoveSimulatedDeviceResponse)

LocalAuthenticationTokenPathRequest = _reflection.GeneratedProtocolMessageType('LocalAuthenticationTokenPathRequest', (_message.Message,), {
  'DESCRIPTOR' : _LOCALAUTHENTICATIONTOKENPATHREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.LocalAuthenticationTokenPathRequest)
  })
_sym_db.RegisterMessage(LocalAuthenticationTokenPathRequest)

LocalAuthenticationTokenPathResponse = _reflection.GeneratedProtocolMessageType('LocalAuthenticationTokenPathResponse', (_message.Message,), {
  'DESCRIPTOR' : _LOCALAUTHENTICATIONTOKENPATHRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      path:
          The full path of the local authentication token
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  })
_sym_db.RegisterMessage(LocalAuthenticationTokenPathResponse)

GetAlignmentReferenceInformationRequest = _reflection.GeneratedProtocolMessageType('GetAlignmentReferenceInformationRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETALIGNMENTREFERENCEINFORMATIONREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      path:
          The full path of the alignment reference.  Should be a .fasta,
          or .mmi file.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  })
_sym_db.RegisterMessage(GetAlignmentReferenceInformationRequest)

GetAlignmentReferenceInformationResponse = _reflection.GeneratedProtocolMessageType('GetAlignmentReferenceInformationResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETALIGNMENTREFERENCEINFORMATIONRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      estimated_load_time_seconds:
          Estimated load time of the reference in seconds.
      estimated_reference_size_bases:
          Estimated size of the reference file in bases.
      recommended_live_usage:
          Does the reference file fit within the recommended live usage
          memory size?  This uses an estimate of how much memory a
          reference may use when running in guppy and compares to the
          amount of memory in the sequencer. It does not account for
          whether the reference will run in real time.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  })
_sym_db.RegisterMessage(GetAlignmentReferenceInformationResponse)

AssociationDeviceCodeRequest = _reflection.GeneratedProtocolMessageType('AssociationDeviceCodeRequest', (_message.Message,), {
  'DESCRIPTOR' : _ASSOCIATIONDEVICECODEREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Offline association is now the default workflow  The following are
  therefore reserved/deprecated
  
  Attributes:
      position_name:
          The flow cell position to get the association code/key for.
          If this is omitted, the code/key for the sequencing device as
          a whole is returned.  Note that this cannot be omitted if
          MinKNOW is installed on a PC (as opposed to a sequencing
          device). It should be omitted if (and only if) the data
          returned from `describe_host` has its ``needs_association``
          field set to true.  Passing a integrated flow cell position
          will return the code/key for the whole sequencing device.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.AssociationDeviceCodeRequest)
  })
_sym_db.RegisterMessage(AssociationDeviceCodeRequest)

AssociationDeviceCodeResponse = _reflection.GeneratedProtocolMessageType('AssociationDeviceCodeResponse', (_message.Message,), {
  'DESCRIPTOR' : _ASSOCIATIONDEVICECODERESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      code:
          The code required to associate the device with an account.  If
          the request had `offline` set, this code is suitable for use
          in the customer portal offline association page. Otherwise, it
          is suitable for the online association APIs.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.AssociationDeviceCodeResponse)
  })
_sym_db.RegisterMessage(AssociationDeviceCodeResponse)

ApplyOfflineAssociationUnlockCodeRequest = _reflection.GeneratedProtocolMessageType('ApplyOfflineAssociationUnlockCodeRequest', (_message.Message,), {
  'DESCRIPTOR' : _APPLYOFFLINEASSOCIATIONUNLOCKCODEREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      position_name:
          The flow cell position to unlock.  This should be set (or not
          set) to match the corresponding call to
          `offline_association_device_code`.
      unlock_code:
          The unlock code provided by the user.  This the code given by
          the customer support portal when the corresponding device code
          is entered into the device association page.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  })
_sym_db.RegisterMessage(ApplyOfflineAssociationUnlockCodeRequest)

ApplyOfflineAssociationUnlockCodeResponse = _reflection.GeneratedProtocolMessageType('ApplyOfflineAssociationUnlockCodeResponse', (_message.Message,), {
  'DESCRIPTOR' : _APPLYOFFLINEASSOCIATIONUNLOCKCODERESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      associated:
          True if the association was successful (the unlock_code was
          accepted), false otherwise.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  })
_sym_db.RegisterMessage(ApplyOfflineAssociationUnlockCodeResponse)

ListDeveloperApiTokensRequest = _reflection.GeneratedProtocolMessageType('ListDeveloperApiTokensRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTDEVELOPERAPITOKENSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListDeveloperApiTokensRequest)
  })
_sym_db.RegisterMessage(ListDeveloperApiTokensRequest)

ListDeveloperApiTokensResponse = _reflection.GeneratedProtocolMessageType('ListDeveloperApiTokensResponse', (_message.Message,), {

  'DeveloperApiToken' : _reflection.GeneratedProtocolMessageType('DeveloperApiToken', (_message.Message,), {
    'DESCRIPTOR' : _LISTDEVELOPERAPITOKENSRESPONSE_DEVELOPERAPITOKEN,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Attributes:
        id:
            Unique ID assigned to the token.
        name:
            User facing name describing the token (guaranteed unique
            across tokens).
        expiry:
            Optional expiry of the token.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
    })
  ,
  'DESCRIPTOR' : _LISTDEVELOPERAPITOKENSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListDeveloperApiTokensResponse)
  })
_sym_db.RegisterMessage(ListDeveloperApiTokensResponse)
_sym_db.RegisterMessage(ListDeveloperApiTokensResponse.DeveloperApiToken)

CreateDeveloperApiTokenRequest = _reflection.GeneratedProtocolMessageType('CreateDeveloperApiTokenRequest', (_message.Message,), {
  'DESCRIPTOR' : _CREATEDEVELOPERAPITOKENREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      name:
          User facing name describing the token.
      expiry:
          Optional expiry time for the token.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.CreateDeveloperApiTokenRequest)
  })
_sym_db.RegisterMessage(CreateDeveloperApiTokenRequest)

CreateDeveloperApiTokenResponse = _reflection.GeneratedProtocolMessageType('CreateDeveloperApiTokenResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATEDEVELOPERAPITOKENRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      id:
          Unique ID assigned to the token for identification purposes.
          Not valid as an authentication token.
      token:
          Created token, available to be used with minknow API's
          immediately.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.CreateDeveloperApiTokenResponse)
  })
_sym_db.RegisterMessage(CreateDeveloperApiTokenResponse)

RevokeDeveloperApiTokenRequest = _reflection.GeneratedProtocolMessageType('RevokeDeveloperApiTokenRequest', (_message.Message,), {
  'DESCRIPTOR' : _REVOKEDEVELOPERAPITOKENREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      id:
          The id passed back from [CreateDeveloperApiTokenRequest] or
          [DeveloperApiToken].
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  })
_sym_db.RegisterMessage(RevokeDeveloperApiTokenRequest)

RevokeDeveloperApiTokensResponse = _reflection.GeneratedProtocolMessageType('RevokeDeveloperApiTokensResponse', (_message.Message,), {
  'DESCRIPTOR' : _REVOKEDEVELOPERAPITOKENSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.RevokeDeveloperApiTokensResponse)
  })
_sym_db.RegisterMessage(RevokeDeveloperApiTokensResponse)

FindProtocolsRequest = _reflection.GeneratedProtocolMessageType('FindProtocolsRequest', (_message.Message,), {
  'DESCRIPTOR' : _FINDPROTOCOLSREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      flow_cell_product_code:
          Find protocols that are compatible with this flow cell product
          code.  Set to empty string to find protocols matching all flow
          cell product codes.
      sequencing_kit:
          Limit to protocols that are compatible with this sequencing
          kit.  Set to empty string to find protocols matching all kits.
      experiment_type:
          Limit response to certain protocol types.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FindProtocolsRequest)
  })
_sym_db.RegisterMessage(FindProtocolsRequest)

FindProtocolsResponse = _reflection.GeneratedProtocolMessageType('FindProtocolsResponse', (_message.Message,), {

  'Protocol' : _reflection.GeneratedProtocolMessageType('Protocol', (_message.Message,), {
    'DESCRIPTOR' : _FINDPROTOCOLSRESPONSE_PROTOCOL,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Attributes:
        identifier:
            An identifying string for protocol, of the form:
            LOCATION:relative/path/to/protocol  The identifier uniquely
            identifies the protocol.
        requires_flow_cell_product_code:
            Whether the protocol requires a flow cell product code in
            order to start.
        requires_sequencing_kit:
            Whether the protocol requires a sequencing kit in order to
            start.
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.FindProtocolsResponse.Protocol)
    })
  ,
  'DESCRIPTOR' : _FINDPROTOCOLSRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      protocols:
          Protocols available for starting.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FindProtocolsResponse)
  })
_sym_db.RegisterMessage(FindProtocolsResponse)
_sym_db.RegisterMessage(FindProtocolsResponse.Protocol)

ListSettingsForProtocolRequest = _reflection.GeneratedProtocolMessageType('ListSettingsForProtocolRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTSETTINGSFORPROTOCOLREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      identifier:
          specify the protocol with a string containing all the
          protocol's identifying components, eg:
          "sequencing/sequencing_MIN106_DNA:FLO-MIN106:SQK-RPB004"
      components:
          specify the protocol providing the identifying components
          individually. All components are optional, if more than one
          protocol matches given strings, information about the first
          will be returned.
      flow_cell_connector:
          The flow-cell connector type identifies the type of hardware
          and is used to identify the correct protocol. The flow-cell
          connector types applicable to the device are listed by the
          get_flow_cell_types rpc in this service and the
          get_device_state rpc in the device service.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListSettingsForProtocolRequest)
  })
_sym_db.RegisterMessage(ListSettingsForProtocolRequest)

ListSettingsForProtocolResponse = _reflection.GeneratedProtocolMessageType('ListSettingsForProtocolResponse', (_message.Message,), {

  'RunOptions' : _reflection.GeneratedProtocolMessageType('RunOptions', (_message.Message,), {
    'DESCRIPTOR' : _LISTSETTINGSFORPROTOCOLRESPONSE_RUNOPTIONS,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Run options
    
    Attributes:
        active_channel_selection:
             bool
        mux_scan_period:
             in hours
    """,
    # @@protoc_insertion_point(class_scope:minknow_api.manager.ListSettingsForProtocolResponse.RunOptions)
    })
  ,

  'Basecalling' : _reflection.GeneratedProtocolMessageType('Basecalling', (_message.Message,), {
    'DESCRIPTOR' : _LISTSETTINGSFORPROTOCOLRESPONSE_BASECALLING,
    '__module__' : 'minknow_api.manager_pb2'
    # @@protoc_insertion_point(class_scope:minknow_api.manager.ListSettingsForProtocolResponse.Basecalling)
    })
  ,

  'Output' : _reflection.GeneratedProtocolMessageType('Output', (_message.Message,), {
    'DESCRIPTOR' : _LISTSETTINGSFORPROTOCOLRESPONSE_OUTPUT,
    '__module__' : 'minknow_api.manager_pb2'
    ,
    '__doc__': """Output""",
    # @@protoc_insertion_point(class_scope:minknow_api.manager.ListSettingsForProtocolResponse.Output)
    })
  ,
  'DESCRIPTOR' : _LISTSETTINGSFORPROTOCOLRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      protocol_settings:
          Any protocol settings not covered by the above structures, for
          example those required for custom-scripts.
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.ListSettingsForProtocolResponse)
  })
_sym_db.RegisterMessage(ListSettingsForProtocolResponse)
_sym_db.RegisterMessage(ListSettingsForProtocolResponse.RunOptions)
_sym_db.RegisterMessage(ListSettingsForProtocolResponse.Basecalling)
_sym_db.RegisterMessage(ListSettingsForProtocolResponse.Output)

Feature = _reflection.GeneratedProtocolMessageType('Feature', (_message.Message,), {
  'DESCRIPTOR' : _FEATURE,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      enabled:
          Enable or disable the feature
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.Feature)
  })
_sym_db.RegisterMessage(Feature)

FeatureList = _reflection.GeneratedProtocolMessageType('FeatureList', (_message.Message,), {
  'DESCRIPTOR' : _FEATURELIST,
  '__module__' : 'minknow_api.manager_pb2'
  ,
  '__doc__': """Attributes:
      feature_flags:
          feature_flags is a special value  If false, turns off all
          other feature flags If true, allows individual flags to be
          enabled and disabled
  """,
  # @@protoc_insertion_point(class_scope:minknow_api.manager.FeatureList)
  })
_sym_db.RegisterMessage(FeatureList)

GetFeaturesRequest = _reflection.GeneratedProtocolMessageType('GetFeaturesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETFEATURESREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetFeaturesRequest)
  })
_sym_db.RegisterMessage(GetFeaturesRequest)

GetFeaturesResponse = _reflection.GeneratedProtocolMessageType('GetFeaturesResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETFEATURESRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.GetFeaturesResponse)
  })
_sym_db.RegisterMessage(GetFeaturesResponse)

SetFeaturesRequest = _reflection.GeneratedProtocolMessageType('SetFeaturesRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETFEATURESREQUEST,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.SetFeaturesRequest)
  })
_sym_db.RegisterMessage(SetFeaturesRequest)

SetFeaturesResponse = _reflection.GeneratedProtocolMessageType('SetFeaturesResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETFEATURESRESPONSE,
  '__module__' : 'minknow_api.manager_pb2'
  # @@protoc_insertion_point(class_scope:minknow_api.manager.SetFeaturesResponse)
  })
_sym_db.RegisterMessage(SetFeaturesResponse)

_MANAGERSERVICE = DESCRIPTOR.services_by_name['ManagerService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.nanoporetech.minknow_api\242\002\005MKAPI'
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY._options = None
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY._serialized_options = b'8\001'
  _ADDSIMULATEDDEVICEREQUEST.fields_by_name['name']._options = None
  _ADDSIMULATEDDEVICEREQUEST.fields_by_name['name']._serialized_options = b'\210\265\030\001'
  _ADDSIMULATEDDEVICEREQUEST.fields_by_name['type']._options = None
  _ADDSIMULATEDDEVICEREQUEST.fields_by_name['type']._serialized_options = b'\210\265\030\001'
  _REMOVESIMULATEDDEVICEREQUEST.fields_by_name['name']._options = None
  _REMOVESIMULATEDDEVICEREQUEST.fields_by_name['name']._serialized_options = b'\210\265\030\001'
  _LISTSETTINGSFORPROTOCOLREQUEST.fields_by_name['flow_cell_connector']._options = None
  _LISTSETTINGSFORPROTOCOLREQUEST.fields_by_name['flow_cell_connector']._serialized_options = b'\210\265\030\001'
  _MANAGERSERVICE.methods_by_name['describe_host']._options = None
  _MANAGERSERVICE.methods_by_name['describe_host']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['flow_cell_positions']._options = None
  _MANAGERSERVICE.methods_by_name['flow_cell_positions']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['watch_flow_cell_positions']._options = None
  _MANAGERSERVICE.methods_by_name['watch_flow_cell_positions']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['basecaller_api']._options = None
  _MANAGERSERVICE.methods_by_name['basecaller_api']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_guppy_info']._options = None
  _MANAGERSERVICE.methods_by_name['get_guppy_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_version_info']._options = None
  _MANAGERSERVICE.methods_by_name['get_version_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['list_protocol_output_dir_files']._options = None
  _MANAGERSERVICE.methods_by_name['list_protocol_output_dir_files']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['create_directory']._options = None
  _MANAGERSERVICE.methods_by_name['create_directory']._serialized_options = b'\220\002\002'
  _MANAGERSERVICE.methods_by_name['get_disk_space_info']._options = None
  _MANAGERSERVICE.methods_by_name['get_disk_space_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_default_output_directories']._options = None
  _MANAGERSERVICE.methods_by_name['get_default_output_directories']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['stream_disk_space_info']._options = None
  _MANAGERSERVICE.methods_by_name['stream_disk_space_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_barcode_kit_info']._options = None
  _MANAGERSERVICE.methods_by_name['get_barcode_kit_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_lamp_kit_info']._options = None
  _MANAGERSERVICE.methods_by_name['get_lamp_kit_info']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_barcode_keys']._options = None
  _MANAGERSERVICE.methods_by_name['get_barcode_keys']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_flow_cell_types']._options = None
  _MANAGERSERVICE.methods_by_name['get_flow_cell_types']._serialized_options = b'\220\002\001\230\265\030\001'
  _MANAGERSERVICE.methods_by_name['get_sequencing_kits']._options = None
  _MANAGERSERVICE.methods_by_name['get_sequencing_kits']._serialized_options = b'\220\002\001\230\265\030\001'
  _MANAGERSERVICE.methods_by_name['remove_simulated_device']._options = None
  _MANAGERSERVICE.methods_by_name['remove_simulated_device']._serialized_options = b'\220\002\002'
  _MANAGERSERVICE.methods_by_name['local_authentication_token_path']._options = None
  _MANAGERSERVICE.methods_by_name['local_authentication_token_path']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['get_alignment_reference_information']._options = None
  _MANAGERSERVICE.methods_by_name['get_alignment_reference_information']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['association_device_code']._options = None
  _MANAGERSERVICE.methods_by_name['association_device_code']._serialized_options = b'\220\002\001'
  _MANAGERSERVICE.methods_by_name['apply_offline_association_unlock_code']._options = None
  _MANAGERSERVICE.methods_by_name['apply_offline_association_unlock_code']._serialized_options = b'\220\002\002'
  _MANAGERSERVICE.methods_by_name['list_developer_api_tokens']._options = None
  _MANAGERSERVICE.methods_by_name['list_developer_api_tokens']._serialized_options = b'\220\002\002'
  _MANAGERSERVICE.methods_by_name['find_protocols']._options = None
  _MANAGERSERVICE.methods_by_name['find_protocols']._serialized_options = b'\230\265\030\001'
  _MANAGERSERVICE.methods_by_name['list_settings_for_protocol']._options = None
  _MANAGERSERVICE.methods_by_name['list_settings_for_protocol']._serialized_options = b'\220\002\001\230\265\030\001'
  _MANAGERSERVICE.methods_by_name['get_features']._options = None
  _MANAGERSERVICE.methods_by_name['get_features']._serialized_options = b'\220\002\001\230\265\030\001'
  _MANAGERSERVICE.methods_by_name['set_features']._options = None
  _MANAGERSERVICE.methods_by_name['set_features']._serialized_options = b'\230\265\030\001'
  _SIMPLEPROTOCOLSTATE._serialized_start=11290
  _SIMPLEPROTOCOLSTATE._serialized_end=11426
  _SIMULATEDDEVICETYPE._serialized_start=11429
  _SIMULATEDDEVICETYPE._serialized_end=11559
  _EXPERIMENTTYPE._serialized_start=11561
  _EXPERIMENTTYPE._serialized_end=11667
  _DESCRIBEHOSTREQUEST._serialized_start=205
  _DESCRIBEHOSTREQUEST._serialized_end=226
  _DESCRIBEHOSTRESPONSE._serialized_start=229
  _DESCRIBEHOSTRESPONSE._serialized_end=658
  _DESCRIBEHOSTRESPONSE_BASECALLINGAVAILABILITY._serialized_start=481
  _DESCRIBEHOSTRESPONSE_BASECALLINGAVAILABILITY._serialized_end=658
  _FLOWCELLPOSITION._serialized_start=661
  _FLOWCELLPOSITION._serialized_end=1544
  _FLOWCELLPOSITION_LOCATION._serialized_start=1235
  _FLOWCELLPOSITION_LOCATION._serialized_end=1267
  _FLOWCELLPOSITION_RPCPORTS._serialized_start=1269
  _FLOWCELLPOSITION_RPCPORTS._serialized_end=1320
  _FLOWCELLPOSITION_SHAREDHARDWAREGROUP._serialized_start=1322
  _FLOWCELLPOSITION_SHAREDHARDWAREGROUP._serialized_end=1361
  _FLOWCELLPOSITION_STATE._serialized_start=1364
  _FLOWCELLPOSITION_STATE._serialized_end=1544
  _FLOWCELLPOSITIONSREQUEST._serialized_start=1546
  _FLOWCELLPOSITIONSREQUEST._serialized_end=1572
  _FLOWCELLPOSITIONSRESPONSE._serialized_start=1574
  _FLOWCELLPOSITIONSRESPONSE._serialized_end=1680
  _WATCHFLOWCELLPOSITIONSREQUEST._serialized_start=1682
  _WATCHFLOWCELLPOSITIONSREQUEST._serialized_end=1713
  _WATCHFLOWCELLPOSITIONSRESPONSE._serialized_start=1716
  _WATCHFLOWCELLPOSITIONSRESPONSE._serialized_end=1880
  _RESETPOSITIONREQUEST._serialized_start=1882
  _RESETPOSITIONREQUEST._serialized_end=1938
  _RESETPOSITIONRESPONSE._serialized_start=1940
  _RESETPOSITIONRESPONSE._serialized_end=1963
  _BASECALLERAPIREQUEST._serialized_start=1965
  _BASECALLERAPIREQUEST._serialized_end=1987
  _BASECALLERAPIRESPONSE._serialized_start=1989
  _BASECALLERAPIRESPONSE._serialized_end=2053
  _GETGUPPYINFOREQUEST._serialized_start=2055
  _GETGUPPYINFOREQUEST._serialized_end=2076
  _GETGUPPYINFORESPONSE._serialized_start=2078
  _GETGUPPYINFORESPONSE._serialized_end=2172
  _GETVERSIONINFOREQUEST._serialized_start=2174
  _GETVERSIONINFOREQUEST._serialized_end=2197
  _LISTPROTOCOLOUTPUTDIRFILESREQUEST._serialized_start=2199
  _LISTPROTOCOLOUTPUTDIRFILESREQUEST._serialized_end=2248
  _LISTPROTOCOLOUTPUTDIRFILESRESPONSE._serialized_start=2251
  _LISTPROTOCOLOUTPUTDIRFILESRESPONSE._serialized_end=2499
  _LISTPROTOCOLOUTPUTDIRFILESRESPONSE_DIRECTORYINFO._serialized_start=2425
  _LISTPROTOCOLOUTPUTDIRFILESRESPONSE_DIRECTORYINFO._serialized_end=2499
  _CREATEDIRECTORYREQUEST._serialized_start=2501
  _CREATEDIRECTORYREQUEST._serialized_end=2560
  _CREATEDIRECTORYRESPONSE._serialized_start=2562
  _CREATEDIRECTORYRESPONSE._serialized_end=2601
  _FILESYSTEMDISKSPACEINFO._serialized_start=2604
  _FILESYSTEMDISKSPACEINFO._serialized_end=2867
  _GETDISKSPACEINFOREQUEST._serialized_start=2869
  _GETDISKSPACEINFOREQUEST._serialized_end=2894
  _STREAMDISKSPACEINFOREQUEST._serialized_start=2896
  _STREAMDISKSPACEINFOREQUEST._serialized_end=2940
  _GETDISKSPACEINFORESPONSE._serialized_start=2942
  _GETDISKSPACEINFORESPONSE._serialized_end=3050
  _GETBARCODEKITINFOREQUEST._serialized_start=3052
  _GETBARCODEKITINFOREQUEST._serialized_end=3078
  _GETBARCODEKITINFORESPONSE._serialized_start=3081
  _GETBARCODEKITINFORESPONSE._serialized_end=3377
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFO._serialized_start=3204
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFO._serialized_end=3259
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY._serialized_start=3261
  _GETBARCODEKITINFORESPONSE_BARCODEKITINFOENTRY._serialized_end=3377
  _GETLAMPKITINFOREQUEST._serialized_start=3379
  _GETLAMPKITINFOREQUEST._serialized_end=3402
  _GETLAMPKITINFORESPONSE._serialized_start=3404
  _GETLAMPKITINFORESPONSE._serialized_end=3447
  _GETBARCODEKEYSREQUEST._serialized_start=3449
  _GETBARCODEKEYSREQUEST._serialized_end=3522
  _GETBARCODEKEYSRESPONSE._serialized_start=3524
  _GETBARCODEKEYSRESPONSE._serialized_end=3612
  _GETFLOWCELLTYPESREQUEST._serialized_start=3614
  _GETFLOWCELLTYPESREQUEST._serialized_end=3639
  _GETFLOWCELLTYPESRESPONSE._serialized_start=3642
  _GETFLOWCELLTYPESRESPONSE._serialized_end=3862
  _GETFLOWCELLTYPESRESPONSE_INFO._serialized_start=3737
  _GETFLOWCELLTYPESRESPONSE_INFO._serialized_end=3862
  _GETSEQUENCINGKITSREQUEST._serialized_start=3864
  _GETSEQUENCINGKITSREQUEST._serialized_end=3922
  _GETSEQUENCINGKITSRESPONSE._serialized_start=3925
  _GETSEQUENCINGKITSRESPONSE._serialized_end=4423
  _GETSEQUENCINGKITSRESPONSE_KIT._serialized_start=4125
  _GETSEQUENCINGKITSRESPONSE_KIT._serialized_end=4376
  _GETSEQUENCINGKITSRESPONSE_BARCODINGEXPANSIONKIT._serialized_start=4378
  _GETSEQUENCINGKITSRESPONSE_BARCODINGEXPANSIONKIT._serialized_end=4423
  _ADDSIMULATEDDEVICEREQUEST._serialized_start=4425
  _ADDSIMULATEDDEVICEREQUEST._serialized_end=4534
  _ADDSIMULATEDDEVICERESPONSE._serialized_start=4536
  _ADDSIMULATEDDEVICERESPONSE._serialized_end=4564
  _REMOVESIMULATEDDEVICEREQUEST._serialized_start=4566
  _REMOVESIMULATEDDEVICEREQUEST._serialized_end=4616
  _REMOVESIMULATEDDEVICERESPONSE._serialized_start=4618
  _REMOVESIMULATEDDEVICERESPONSE._serialized_end=4649
  _LOCALAUTHENTICATIONTOKENPATHREQUEST._serialized_start=4651
  _LOCALAUTHENTICATIONTOKENPATHREQUEST._serialized_end=4688
  _LOCALAUTHENTICATIONTOKENPATHRESPONSE._serialized_start=4690
  _LOCALAUTHENTICATIONTOKENPATHRESPONSE._serialized_end=4742
  _GETALIGNMENTREFERENCEINFORMATIONREQUEST._serialized_start=4744
  _GETALIGNMENTREFERENCEINFORMATIONREQUEST._serialized_end=4799
  _GETALIGNMENTREFERENCEINFORMATIONRESPONSE._serialized_start=4802
  _GETALIGNMENTREFERENCEINFORMATIONRESPONSE._serialized_end=4953
  _ASSOCIATIONDEVICECODEREQUEST._serialized_start=4955
  _ASSOCIATIONDEVICECODEREQUEST._serialized_end=5023
  _ASSOCIATIONDEVICECODERESPONSE._serialized_start=5025
  _ASSOCIATIONDEVICECODERESPONSE._serialized_end=5070
  _APPLYOFFLINEASSOCIATIONUNLOCKCODEREQUEST._serialized_start=5072
  _APPLYOFFLINEASSOCIATIONUNLOCKCODEREQUEST._serialized_end=5158
  _APPLYOFFLINEASSOCIATIONUNLOCKCODERESPONSE._serialized_start=5160
  _APPLYOFFLINEASSOCIATIONUNLOCKCODERESPONSE._serialized_end=5223
  _LISTDEVELOPERAPITOKENSREQUEST._serialized_start=5225
  _LISTDEVELOPERAPITOKENSREQUEST._serialized_end=5256
  _LISTDEVELOPERAPITOKENSRESPONSE._serialized_start=5259
  _LISTDEVELOPERAPITOKENSRESPONSE._serialized_end=5469
  _LISTDEVELOPERAPITOKENSRESPONSE_DEVELOPERAPITOKEN._serialized_start=5380
  _LISTDEVELOPERAPITOKENSRESPONSE_DEVELOPERAPITOKEN._serialized_end=5469
  _CREATEDEVELOPERAPITOKENREQUEST._serialized_start=5471
  _CREATEDEVELOPERAPITOKENREQUEST._serialized_end=5561
  _CREATEDEVELOPERAPITOKENRESPONSE._serialized_start=5563
  _CREATEDEVELOPERAPITOKENRESPONSE._serialized_end=5623
  _REVOKEDEVELOPERAPITOKENREQUEST._serialized_start=5625
  _REVOKEDEVELOPERAPITOKENREQUEST._serialized_end=5669
  _REVOKEDEVELOPERAPITOKENSRESPONSE._serialized_start=5671
  _REVOKEDEVELOPERAPITOKENSRESPONSE._serialized_end=5705
  _FINDPROTOCOLSREQUEST._serialized_start=5708
  _FINDPROTOCOLSREQUEST._serialized_end=5848
  _FINDPROTOCOLSRESPONSE._serialized_start=5851
  _FINDPROTOCOLSRESPONSE._serialized_end=6052
  _FINDPROTOCOLSRESPONSE_PROTOCOL._serialized_start=5948
  _FINDPROTOCOLSRESPONSE_PROTOCOL._serialized_end=6052
  _LISTSETTINGSFORPROTOCOLREQUEST._serialized_start=6055
  _LISTSETTINGSFORPROTOCOLREQUEST._serialized_end=6293
  _LISTSETTINGSFORPROTOCOLRESPONSE._serialized_start=6296
  _LISTSETTINGSFORPROTOCOLRESPONSE._serialized_end=10683
  _LISTSETTINGSFORPROTOCOLRESPONSE_RUNOPTIONS._serialized_start=6736
  _LISTSETTINGSFORPROTOCOLRESPONSE_RUNOPTIONS._serialized_end=7589
  _LISTSETTINGSFORPROTOCOLRESPONSE_BASECALLING._serialized_start=7592
  _LISTSETTINGSFORPROTOCOLRESPONSE_BASECALLING._serialized_end=8872
  _LISTSETTINGSFORPROTOCOLRESPONSE_OUTPUT._serialized_start=8875
  _LISTSETTINGSFORPROTOCOLRESPONSE_OUTPUT._serialized_end=10683
  _FEATURE._serialized_start=10685
  _FEATURE._serialized_end=10711
  _FEATURELIST._serialized_start=10714
  _FEATURELIST._serialized_end=10943
  _GETFEATURESREQUEST._serialized_start=10945
  _GETFEATURESREQUEST._serialized_end=10965
  _GETFEATURESRESPONSE._serialized_start=10968
  _GETFEATURESRESPONSE._serialized_end=11190
  _GETFEATURESRESPONSE_STATE._serialized_start=11106
  _GETFEATURESRESPONSE_STATE._serialized_end=11190
  _SETFEATURESREQUEST._serialized_start=11192
  _SETFEATURESREQUEST._serialized_end=11264
  _SETFEATURESRESPONSE._serialized_start=11266
  _SETFEATURESRESPONSE._serialized_end=11287
  _MANAGERSERVICE._serialized_start=11670
  _MANAGERSERVICE._serialized_end=15554
# @@protoc_insertion_point(module_scope)
