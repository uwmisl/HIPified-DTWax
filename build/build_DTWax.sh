#!/bin/bash

# Parse arguments (filename, -debug, -segment_size)
debug_flag="" segment_size=1
while [ $# -gt 0 ]; do
  case $1 in
    -debug) debug_flag="debug"; shift ;;
    -segment_size) segment_size=$2; shift 2 ;;
    *) file=$1; shift ;;
  esac
done

# Filename is required
[ -z "$file" ] && { echo "Error: Missing filename." >&2; exit 1; }

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
script_name=$(basename "$0")

# Check if the file exists
if [ ! -f "$file" ]; then
  echo "Error: File '$file' does not exist."  >&2
  exit 1
fi

# Calculate required values
ref_len=$(head -n 1 "$file" | wc -w)
query_len=$(sed -n '2p' "$file" | wc -w)
num_reads=$(( $(wc -l < "$file") - 1 ))

# Define output path for the header file
src_dir="$script_dir/../src"
output_file="$src_dir/include/data_dims.hpp"

# Write precompiler directives to data_dims.hpp
cat <<EOL > "$output_file"
/*
This file has been autogenerated by $script_name for the data in $file
If you have a new data file, building using $script_name <your data file> is recommended.
*/

#ifndef DATA_DIMS_HPP
#define DATA_DIMS_HPP

// The number of threads in each warp. This is 64 for AMD and 32 for NVIDIA.
// This version of DTWax has not been tested on NVIDIA hardware.
// Because of the shfl_up operations, the calculations will NOT be correct if you have the incorrect number.
#define WARP_SIZE 64

// Must be no larger than QUERY_LEN. This is the number of query elements in each query batch.
// This is constrained by the size of shared memory.
#define QUERY_BATCH_SIZE 64 

// Each thread will process SEGMENT_SIZE elements of the reference sequence at once
#define SEGMENT_SIZE $segment_size

// Data dimensions
#define REF_LEN $ref_len
#define QUERY_LEN $query_len
#define NUM_READS $num_reads

// Derived constants
#define REF_TILE_SIZE (SEGMENT_SIZE * WARP_SIZE)
#define REF_BATCH (REF_LEN / REF_TILE_SIZE)
#define QUERY_BATCH (QUERY_LEN / QUERY_BATCH_SIZE)
#define NUM_WAVES (QUERY_BATCH_SIZE + (REF_TILE_SIZE - 1) / (SEGMENT_SIZE))
#define WARP_SIZE_MINUS_ONE (WARP_SIZE - 1)
#define NUM_WAVES_BY_WARP_SIZE ((NUM_WAVES / WARP_SIZE) * WARP_SIZE)
#define REF_BATCH_MINUS_ONE (REF_BATCH - 1)
#define TWICE_WARP_SIZE_MINUS_ONE ((2 * WARP_SIZE) - 1)
#define RESULT_REG (SEGMENT_SIZE - 1)

#endif // DATA_DIMS_HPP
EOL

# Move to src directory and run make
if ! cd $src_dir; then
  echo "Error: Directory $src_dir not found. Build failed."  >&2
  exit 1
fi

# Run make
if make clean; make $debug_flag; then
  echo -e "Successfully built.\n"
else
  echo "Error: Build failed."  >&2
  exit 1
fi